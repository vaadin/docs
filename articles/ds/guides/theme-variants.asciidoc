---
title: Theme Variants
order: 50
layout: page
---

= Theme Variants
ifdef::web[]
endif::web[]

Variants are opt-in features of each theme which affect the visual presentation of components.
They do not affect their behavior or functionality.

Examples of variants include light and dark modes, density presets (compact, small, large), and visual prominence (primary, tertiary, no-borders).

Themes can define global and component-specific variants.
Theme variants can be used across all <<style-scopes#,Style Scopes>> – you don’t need to define or import them individually for each style scope.

ifdef::web[]
endif::web[]

== Global Variants

Global variants affect all component instances in an application.
Light and dark modes are good examples of global variants.

See the documentation for <<lumo/variants#,Lumo Variants>> and <<material/variants#,Material Variants>> to learn more about the built-in variants.

[.example]
--

In server-side views (Java), use the `variant` attribute of the [classname]#@Theme# annotation.
See <<using-themes#,Using Themes>> for more information.

[source, java]
----
include::src/main/java/com/vaadin/flow/tutorial/theme/UsingComponentThemes.java[tags=lumo-dark, indent=0, group=Java]
----

NOTE: <<applicatioin-theme#global-styles, global styles>> in a custom theme can override the global variants.

In client-side views (JavaScript), set the `theme` attribute on the `document.documentElement` object.

[source, javascript]
----
include::src/main/js/ThemeVariants.js[tags=global-dark, indent=0, group=JavaScript]
----

In client-side templates (HTML), set the `theme` attribute on the `<html>` element.

[source, html]
----
include::src/main/html/ThemeVariants.html[tags=global-dark, indent=0, group=HTML]
----
--


== Component Variants

Component variants affect selected component instances.
Primary buttons, and small buttons and text fields are common examples of component variants.
You can combine multiple variants together for a single component, for example a small primary button.

Many components have built-in variants in both the Lumo and the Material theme.
See the documentation for <<lumo/variants#,Lumo Variants>> and <<material/variants#,Material Variants>> to learn more about the built-in variants.

[.example]
--

Components which have built-in variants implement the [classname]#HasTheme# interface and have convenient Java APIs for using them.
For other components, use the <<../flow/element-api/tutorial-properties-attributes#,Element API>> and the [methodname]#setAttribute# method.

[source, java]
----
include::src/main/java/com/vaadin/flow/tutorial/theme/UsingComponentThemes.java[tags=themed-button, indent=0, group=Java]

include::src/main/java/com/vaadin/flow/tutorial/theme/UsingComponentThemes.java[tags=themed-button2, indent=0, group=Java]

include::src/main/java/com/vaadin/flow/tutorial/theme/UsingComponentThemes.java[tags=themed-button3, indent=0, group=Java]
----

NOTE: <<applicatioin-theme#components-styles, Component styles>> in a custom theme can override the component variants.

In client-side JavaScript views, use the standard [methodname]#setAttribute# DOM method to set the [propertyname]#theme# attribute value.

[source, javascript]
----
include::src/main/js/ThemeVariants.js[tags=themed-button, indent=0, group=JavaScript]
----

In client-side HTML templates, use the [propertyname]#theme# attribute value.

[source, html]
----
include::src/main/html/ThemeVariants.html[tags=themed-button, indent=0, group=HTML]
----
--


== Sub-component Variants

Theme variants propagate to sub-components. For example, the Combo Box component internally contains the Text Field component. Setting a theme variant on a Combo Box will also be applied on the internal Text Field component.

This also means, that even though Combo Box does not have a built-in “small” variant of its own, it can still utilize the built-in “small” variant of the Text Field component. For example:

[.example]
--
In server-side views (Java):

[source, java]
----
include::src/main/java/com/vaadin/flow/tutorial/theme/UsingComponentThemes.java[tags=combobox-variant, indent=0, group=Java]
----

In client-side views (JavaScript):

[source, javascript]
----
include::src/main/js/ThemeVariants.js[tags=combobox-variant, indent=0, group=JavaScript]
----

In client-side templates (HTML):

[source, html]
----
include::src/main/html/ThemeVariants.html[tags=combobox-variant, indent=0, group=HTML]
----
--

See <<styling-components#sub-components,Styling Components>> to learn about the hierarchy of built-in Vaadin components, so you can use variants more effectively and know which exact components you need to target in order to customize components with sub-components.


== Custom Variants

Custom variants allow you to freely customize the visual appearance of components.
They are defined in an additional stylesheet which you import as component styles (see <<importing-style-sheets#,Importing Style Sheets>>).
Technically, custom variants work exactly like built-in variants.

To create a custom variant, first we need to write the styles for that variant.
For example, to create a new variant for Button, the following CSS would work:

[source, css]
----
:host([theme~="my-custom-variant"]) {
  /* Set the CSS properties you want to customize */
}
----

To learn how to correctly target internal parts of components and how to write the correct CSS selectors, see <<styling-components#,Styling Components>>.

Then, you need to import the style sheet into the corresponding component’s style scope. See <<importing-style-sheets#component-local-scope,Importing Style Sheets>> to learn more.

Finally, you can use the `my-custom-variant` on a Button component, as shown before.
