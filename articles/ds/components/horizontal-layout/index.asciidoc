---
title: Horizontal Layout
page-links:
  - 'API: https://cdn.vaadin.com/vaadin-web-components/{moduleNpmVersion:@vaadin/ordered-layout}/#/elements/vaadin-horizontal-layout[TypeScript] / https://vaadin.com/api/platform/{moduleMavenVersion:com.vaadin:vaadin}/com/vaadin/flow/component/orderedlayout/HorizontalLayout.html[Java]'
  - 'Source: https://github.com/vaadin/web-components/tree/v{moduleNpmVersion:@vaadin/ordered-layout}/packages/horizontal-layout[TypeScript] / https://github.com/vaadin/flow-components/tree/{moduleMavenVersion:com.vaadin:vaadin}/vaadin-ordered-layout-flow-parent[Java]'
---


= Horizontal Layout

// tag::description[]
Horizontal Layout places components side-by-side in a row.
// end::description[]
By default, it defines its width and height automatically, determined by the components it contains.

See <<../vertical-layout#, Vertical Layout>> for placing components top-to-bottom.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/basiclayouts/basic-layouts-horizontal-layout.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/basiclayouts/BasicLayoutsHorizontalLayout.java[render,tags=snippet,indent=0,group=Java]
----
--

Components in a Horizontal Layout can be aligned horizontally, as you'd expect, but also vertically.



== Vertical Alignment

You can position components at the top, middle, or bottom. You can also stretch items or position them along the text baseline in the layout.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/basiclayouts/basic-layouts-horizontal-layout-vertical-alignment.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/basiclayouts/BasicLayoutsHorizontalLayoutVerticalAlignment.java[render,tags=layout,indent=0,group=Java]
----
--
|===
|Value |Description

|`STRETCH` (default)
|Vertically stretches items that have undefined height.

|`START`
|Positions items at the top of the layout.

|`CENTER`
|Centers items, vertically.

|`END`
|Positions items at the bottom of the layout.

|`BASELINE`
|Positions items along the layout's text baseline.
|===

It's also possible to set a different vertical alignment for individual items by overriding the general alignment setting of the layout.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/basiclayouts/basic-layouts-horizontal-layout-individual-alignment.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/basiclayouts/BasicLayoutsHorizontalLayoutIndividualAlignment.java[render,tags=layout,indent=0,group=Java]
----
--


== Horizontal Alignment

Components in a Horizontal Layout can be left-aligned, centered or right-aligned. You can also position components by specifying how the excess space in a layout is distributed among them.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/basiclayouts/basic-layouts-horizontal-layout-horizontal-alignment.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/basiclayouts/BasicLayoutsHorizontalLayoutHorizontalAlignment.java[render,tags=layout,indent=0,group=Java]
----
--
|===
|Value |Description

|`START` (default)
|Left-aligns for left-to-right language items. For right-to-left languages, right-aligns items.

|`CENTER`
|Centers items, horizontally.

|`END`
|Right-aligns for left-to-right language items. For right-to-left languages, left-aligns items.

|`BETWEEN`
|Available space is distributed evenly between items. No space is added before the first item, or after the last.

|`AROUND`
|Available space is distributed evenly around items. The space before the first item and after the last, is half of that between items.

|`EVENLY`
|Available space is distributed evenly between items. The space before the first item, between items, and after the last item is the same.
|===


== Spacing

Spacing is used to create space among components in the same layout. Spacing can help prevent misclicks and distinguish content areas.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/basiclayouts/basic-layouts-horizontal-layout-spacing.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/basiclayouts/BasicLayoutsHorizontalLayoutSpacing.java[render,tags=snippet,indent=0,group=Java]
----
--

Five different spacing theme variants are available:

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/basiclayouts/basic-layouts-horizontal-layout-spacing-variants.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/basiclayouts/BasicLayoutsHorizontalLayoutSpacingVariants.java[render,tags=snippet,indent=0,group=Java]
----
--

|===
|Theme Variant |Usage Recommendation

|`spacing-xs`
|Extra-small space between items.

|`spacing-s`
|Small space between items.

|`spacing`
|Medium space between items.

|`spacing-l`
|Large space between items.

|`spacing-xl`
|Extra-large space between items.
|===

[.example]
--

[source,typescript]
----
<vaadin-horizontal-layout
  theme="spacing-xs padding">
</vaadin-horizontal-layout>
----

[source,java]
----
HorizontalLayout layout = new HorizontalLayout();
layout.setSpacing(false);
layout.getThemeList().add("spacing-xs");
----

--


== Padding

Padding is the space between the outer border and the content in a layout. Padding can help distinguish the content in a layout from its surrounding. Padding is applied using the padding theme variant.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/basiclayouts/basic-layouts-horizontal-layout-padding.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/basiclayouts/BasicLayoutsHorizontalLayoutPadding.java[render,tags=snippet,indent=0,group=Java]
----
--


== Margin

Use margin to create space around a layout.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/basiclayouts/basic-layouts-horizontal-layout-margin.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/basiclayouts/BasicLayoutsHorizontalLayoutMargin.java[render,tags=snippet,indent=0,group=Java]
----
--


== Expanding Items

Components can be made to expand and take up any excess space a layout may have.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/basiclayouts/basic-layouts-expanding-items.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/basiclayouts/BasicLayoutsExpandingItems.java[render,tags=snippet,indent=0,group=Java]
----
--

When multiple components expand, they do so relative to each other. For example, having two items with expand ratios of 2 and 1 results in the first item taking up twice as much of the available space as the second item.


[discussion-id]`61c42eee-d39a-11ed-afa1-0242ac120002`