---
title: Map
page-links:
  - 'API: https://vaadin.com/api/platform/{moduleMavenVersion:com.vaadin:vaadin}/com/vaadin/flow/component/map/Map.html[Java]'
  - 'Source: https://github.com/vaadin/flow-components/tree/{moduleMavenVersion:com.vaadin:vaadin}/vaadin-map-flow-parent[Java]'
section-nav: commercial
---

= Map
:experimental:

:commercial-feature: Map
include::{articles}/_commercial-banner.asciidoc[opts=optional]

.Experimental Feature
[IMPORTANT]
====
Map is currently considered an experimental feature, which means that its behavior, API, and look and feel might still change.
In order to use Map, it must be explicitly enabled with a feature flag. See the <<Feature Flag>> section on how to do so.
====

// tag::description[]
Map is a component for displaying geographic maps from various sources.
// end::description[]
It supports multiple layers, tiled and full image sources, adding markers, and interaction through events.

[.example]
--
[source,typescript]
----
include::{root}/frontend/demo/component/map/map-basic.ts[preimport,hidden]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/map/MapBasic.java[render,tags=snippet,indent=0,group=Java]
----
--

.OpenStreetMap Usage
[NOTE]
====
By default, Map uses an OpenStreetMap source.
That makes it easy to get started with development.
However, for production use we encourage to use a commercial map service, or a self-hosted solution.
The OpenStreetMap tile servers are not intended to be used as map service for applications in production.
Please read and respect the https://operations.osmfoundation.org/policies/tiles/[OpenStreetMap tile usage policy^].
====

== Viewport

Map provides interactions, controls, as well as APIs, to control the viewport.
That includes setting the center, the zoom level, and the rotation.

By default, map coordinates, such as the view's center, are specified in https://en.wikipedia.org/wiki/Web_Mercator_projection[EPSG:3857 / Web Mercator Projection^], unless the map service uses a custom projection.
As coordinates are often provided as latitude and longitude, Map provides utilities for converting those into Web Mercator projection.

The zoom level is a decimal number that starts at zero as the most zoomed-out level, and then continually increases to zoom further in.
By default, the maximum zoom level is currently restricted to `28`.
In practical terms, the level of detail of the map data that a map service provides determines how useful higher zoom levels are.

[.example]
--
[source,typescript]
----
include::{root}/frontend/demo/component/map/map-viewport.ts[preimport,hidden]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/map/MapViewport.java[render,tags=snippet1,indent=0,group=Java]

...

include::{root}/src/main/java/com/vaadin/demo/component/map/MapViewport.java[render,tags=snippet2,indent=0,group=Java]
----
--

== Map Sources

Web maps can be roughly categorized as being based either on tiled images, full images or vector data.
Each category comes with its own set of standards and formats that define how the map data is structured and to be used.
Map services are applications (typically servers or cloud services) that provide map data in one or more of these formats.

The Map component provides various sources for loading map data in a specific format from a map service.
Note that each source requires using a specific type of layer that can render data from that source.

The following table lists the sources that can be used with Map, an example usage of each source can be found in the demo below:

[cols="1,1,4"]
|===
| Source | Requires | Description

| https://vaadin.com/api/platform/{moduleMavenVersion:com.vaadin:vaadin}/com/vaadin/flow/component/map/configuration/source/OSMSource.html[OSM]
| https://vaadin.com/api/platform/{moduleMavenVersion:com.vaadin:vaadin}/com/vaadin/flow/component/map/configuration/layer/TileLayer.html[Tile layer]
| Loads image tiles from the OpenStreetMap service.
This source is configured as the default.
It does not require further configuration, as it contains presets for URL and attributions.
This source should only be used for development purposes, for applications in production we encourage to use a commercial map service or a self-hosted solution.
Please read and respect the https://operations.osmfoundation.org/policies/tiles/[OpenStreetMap tile usage policy^].

| https://vaadin.com/api/platform/{moduleMavenVersion:com.vaadin:vaadin}/com/vaadin/flow/component/map/configuration/source/XYZSource.html[XYZ]
| https://vaadin.com/api/platform/{moduleMavenVersion:com.vaadin:vaadin}/com/vaadin/flow/component/map/configuration/layer/TileLayer.html[Tile layer]
| Loads image tiles from a map service that supports the https://wiki.openstreetmap.org/wiki/Slippy_map_tilenames[Slippy Map tile numbering scheme^], also known as XYZ format.
This source requires configuring a URL pattern that contains placeholders for the `x` and `y` tile coordinates, as well as the `z` placeholder for the zoom level.
For example `https://my-map-service.com/my-tileset/{z}/{x}/{y}.png`.
For the specific URL, consult the documentation of the map service that you intend to use.

| https://vaadin.com/api/platform/{moduleMavenVersion:com.vaadin:vaadin}/com/vaadin/flow/component/map/configuration/source/TileWMSSource.html[Tile WMS]
| https://vaadin.com/api/platform/{moduleMavenVersion:com.vaadin:vaadin}/com/vaadin/flow/component/map/configuration/layer/TileLayer.html[Tile layer]
| Loads image tiles from a https://www.ogc.org/standards/wms[Web Map Service] (WMS).
This source requires configuring the URL to the WMS, as well as the request parameters.
At least the `LAYERS` request parameter must be configured, for other required parameters and available values please consult the documentation of the service itself.

|===

// TODO: Image WMS is not in a release yet, also demo needs to be extended
////
| Image WMS
| Image layer
| Loads a full image for the viewport from a https://www.ogc.org/standards/wms[Web Map Service] (WMS).
This source requires configuring the URL to the WMS, as well as the request parameters.
At least the `LAYERS` request parameter must be configured, for other required parameters and available values please consult the documentation of the service itself.
////


[.example]
--
[source,typescript]
----
include::{root}/frontend/demo/component/map/map-sources.ts[preimport,hidden]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/map/MapSources.java[render,tags=snippet,indent=0,group=Java]
----
--

== Layers

The map component is pre-configured with a background layer, showing a map from the OpenStreetMap service by default, as well as a feature layer for quickly adding geographical features such as markers.
The default background layer can be replaced, and additional layers added on top of it, for example to display overlays.

By default, layers are rendered in the order that they were added to the map, with the first added layer rendered first, and the last added layer rendered last.
For finer-grained control of the layer rendering order, a `z-index` can be defined for each layer.
Layers with a higher z-index are rendered on top of layers with a lower z-index.
The exceptions are the background layer, which is always rendered first, and the feature layer, which is rendered with a z-index of `100` by default.

The visibility of layers can be toggled, which can be an alternative to dynamically adding and removing them.
For map overlays, a layer can be configured with a lowered opacity, so that the background layer is still semi-visible below the overlay layer.
Note that some map services may provide map data with a lowered opacity by default.

The following example demonstrates how to replace the background layer, how to add several overlay layers to the map, and how to control their visibility:

[.example]
--
[source,typescript]
----
include::{root}/frontend/demo/component/map/map-layers.ts[preimport,hidden]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/map/MapLayers.java[render,tags=snippet1,indent=0,group=Java]

...

include::{root}/src/main/java/com/vaadin/demo/component/map/MapLayers.java[render,tags=snippet2,indent=0,group=Java]

...

include::{root}/src/main/java/com/vaadin/demo/component/map/MapLayers.java[render,tags=snippet3,indent=0,group=Java]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/map/LayerOption.java[group=Java]
----
--

== Markers

Markers can be displayed on top of a map to indicate points of interest, such as addresses, buildings, vehicles, or any other entity.
A marker is defined by a coordinate and an icon.
Icons can be configured either as a URL or a <<{articles}/flow/advanced/dynamic-content#using-streamresource,StreamResource>>.
If no custom icon is provided the marker will use a default icon.

By default, map coordinates, such as a marker's location, are specified in https://en.wikipedia.org/wiki/Web_Mercator_projection[EPSG:3857 / Web Mercator Projection^], unless the map service uses a custom projection.
As coordinates are often provided as latitude and longitude, Map provides utilities for converting those into Web Mercator projection.

[.example]
--
[source,typescript]
----
include::{root}/frontend/demo/component/map/map-markers.ts[preimport,hidden]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/map/MapMarkers.java[render,tags=snippet,indent=0,group=Java]
----
--

.Performance considerations
[NOTE]
====
When using custom icons, ensure that you only create one icon instance per custom image that you want to use.
For example, when adding multiple markers that use the same image, then it is sufficient to create one icon instance and use that for all markers.
Creating a separate icon instance for each marker can degrade performance in the browser in terms of memory usage.
====

== Events

The Map component provides several events that can be used to make a map interactive.
Currently, the following events are supported:

[cols="1,4"]
|===
| Event | Description

|https://vaadin.com/api/platform/{moduleMavenVersion:com.vaadin:vaadin}/com/vaadin/flow/component/map/events/MapViewMoveEndEvent.html[View Move End]
|Triggered after the user has changed the viewport, regardless of the input method.
The event will only be triggered after the user has finished manipulating the viewport, for example after letting go of the mouse button after a mouse drag interaction.

The event contains details about the current viewport, such as the center, the zoom level, and the current bounding box (extent) of the viewport.

|https://vaadin.com/api/platform/{moduleMavenVersion:com.vaadin:vaadin}/com/vaadin/flow/component/map/events/MapClickEvent.html[Map Click]
|Triggered when the user clicks on the map.
The event contains information about the clicked coordinates and other details of the mouse event.
It also contains a list of all markers at that location in order to distinguish whether the click occurred on the map itself, or on a marker.

|https://vaadin.com/api/platform/{moduleMavenVersion:com.vaadin:vaadin}/com/vaadin/flow/component/map/events/MapFeatureClickEvent.html[Feature Click]
|Triggered when the user clicks on a marker.
The event contains information about the clicked marker and other details of the mouse event.
In case of overlapping markers, the event will only be fired for the top-level marker at that location.

The term _feature_ refers to geographical features in a general sense.
For now Map only supports markers as geographical features, so these are equivalent.

|===

The following example demonstrates how to make use of the events:

[.example]
--
[source,typescript]
----
include::{root}/frontend/demo/component/map/map-events.ts[preimport,hidden]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/map/MapEvents.java[render,tags=snippet,indent=0,group=Java]
----
--

== Theme Variants

=== Borderless

By default, Map has a visible, rounded border. The border can be removed by using the `borderless` theme variant.

[.example]
--
[source,typescript]
----
include::{root}/frontend/demo/component/map/map-theme-borderless.ts[preimport,hidden]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/map/MapThemeBorderless.java[render,tags=snippet,indent=0,group=Java]
----
--

== Feature Flag

In order to use Map, it must be explicitly enabled with a feature flag. There are two methods to do so:

=== Using Vaadin Developer Tools

1. Click on the Vaadin Developer Tools icon button in your running application
2. Open the [guilabel]#Experimental Features# tab
3. Enable the [guilabel]#Map component (Pro)# feature
4. Restart the application

image::enable-feature-flag.png[]

=== Adding a Feature Flags Properties File

1. Create a `src/main/resources/vaadin-featureflags.properties` in your application folder
2. Add the following content: `com.vaadin.experimental.mapComponent=true`
3. Restart the application
