---
title: Notification
layout: tabbed-page
tab-title: Usage
page-links: \
https://github.com/vaadin/vaadin-flow-components/releases/tag/{moduleMavenVersion:com.vaadin:vaadin-notification-flow}\[Flow {moduleMavenVersion:com.vaadin:vaadin-notification-flow}], \
https://github.com/vaadin/vaadin-notification/releases/tag/v{moduleNpmVersion:vaadin-notification}\[Web Component {moduleNpmVersion:vaadin-notification}]
section-nav: incomplete
---

= Notification

// tag::description[]
Notifications are used to provide feedback to the user.
They communicate information about activities, processes, and events in the application.
// end::description[]

.Work In Progress
[NOTE]
====
The usage examples for this component are currently in progress.
In the meantime, you can view the previous examples for the web component and the Java/Flow component.

[.buttons]
- https://vaadin.com/components/vaadin-notification/html-examples[Web Component Examples]
- https://vaadin.com/components/vaadin-notification/java-examples[Java Component Examples]
====


// Custom style additions for the examples, that combine two renders together
++++
<style>
.example.merge,
.example.merge .render {
  margin-bottom: 0;
  border-bottom-left-radius: 0;
  border-bottom-right-radius: 0;
  overflow: visible;
}
.example.merge {
  display: flex;
  flex-direction: column;
}
.example.merge + .example,
.example.merge + .example .render {
  margin-top: 0;
  border-top-left-radius: 0;
  border-bottom-right-radius: 0;
}
.example.merge + .example .render {
  text-align: center;
  padding-top: 0;
  padding-bottom: var(--docs-space-m);
}

.example.do .example-title {
  font-weight: var(--docs-font-weight-strong);
  color: var(--docs-green-500);
}

.example.do {
  border-bottom: var(--docs-border-radius-l) solid var(--docs-green-400);
}

.example.dont .example-title {
  font-weight: var(--docs-font-weight-strong);
  color: var(--docs-red-500);
}

.example.dont {
  border-bottom: var(--docs-border-radius-l) solid var(--docs-red-400);
}
</style>
++++

[.example.render-only.merge]
--
[source, typescript]
----
include::{root}/frontend/demo/component/notification/notification-basic-preview.ts[render]
----
--

[.example]
--
[source, html]
----
include::{root}/frontend/demo/component/notification/notification-basic.ts[render, tags=*, indent=0, group=TypeScript]
----
--


== Theme Variants


=== Success

The `success` theme variant can be used to display success messages, such as when a task or operation is completed.

[.example.render-only.merge]
--
[source, typescript]
----
include::{root}/frontend/demo/component/notification/notification-success-preview.ts[render]
----
--

[.example]
--
[source, html]
----
include::{root}/frontend/demo/component/notification/notification-success.ts[render, tags=*, indent=0, group=TypeScript]
----
--

Most successful operations should not be declared with notifications, as these can distract the user more than provide useful information.
Only use success notifications for operations whose successful completion may otherwise be difficult to discern.


=== Error

The `error` theme variant can be used to display alerts, failures, or warnings.

[.example.render-only.merge]
--
[source, typescript]
----
include::{root}/frontend/demo/component/notification/notification-error-preview.ts[render]
----
--

[.example]
--
[source, html]
----
include::{root}/frontend/demo/component/notification/notification-error.ts[render, tags=*, indent=0, group=TypeScript]
----
--

Error notifications should be persistent, and provide the user with a button that closes the notification and/or allows the user to take appropriate action.

Notifications are non-modal and can be ignored, making them inappropriate for displaying unexpected technical errors that prevent the application from functioning, or situations that require immediate user action.
Use a modal <<../dialog#, Dialog>> in such situations.


=== Primary

The `primary` theme variant can be used for important informational messages and/or to draw extra attention to it.

[.example.render-only.merge]
--
[source, typescript]
----
include::{root}/frontend/demo/component/notification/notification-primary-preview.ts[render]
----
--

[.example]
--
[source, html]
----
include::{root}/frontend/demo/component/notification/notification-primary.ts[render, tags=*, indent=0, group=TypeScript]
----
--


=== Contrast

A high-contrast version that improves legibility and distinguishes it from the rest of the UI.

[.example.render-only.merge]
--
[source, typescript]
----
include::{root}/frontend/demo/component/notification/notification-contrast-preview.ts[render]
----
--

[.example]
--
[source, html]
----
include::{root}/frontend/demo/component/notification/notification-contrast.ts[render, tags=*, indent=0, group=TypeScript]
----
--


== Duration

Notifications stay on-screen for 5 seconds by default.
The duration is in milliseconds, and should be based on content and importance:

Use short durations for notifications that have:

- Short text content
- Lesser importance (for example, operations that finished without errors)
- No interactive elements

Use longer durations for notifications that have:

- Longer text content
- Higher importance (for example, errors)
- Interactive elements (for example, links or undo actions)

A duration of at least 5 seconds is recommended to ensure that the user has a chance to see and understand the notification.


=== Persistent Notifications

Setting the duration to zero disables auto closing, keeping the notification visible until explicitly dismissed by the user.
This should be used for notifications that provide vital information to the user, such as errors.
Persistent notifications should contain a Button that closes the notification and/or allows the user to take appropriate action.

Less important notifications should not be persistent, and instead disappear automatically after an appropriate delay.


== Position

Notifications can be positioned in the viewport in seven non-stretched positions, or stretched across the top or bottom:

[.example]
--
Use the `position` attribute in HTML templates, for example, `<vaadin-notification position="top-end"></vaadin-notification>`.

[source, typescript]
----
include::{root}/frontend/demo/component/notification/notification-position.ts[render, tags=snippet, indent=0, group=TypeScript]
----
--


=== Recommendations

- *Top End* or *Bottom Start* are recommended for most notifications, as these are non-obtrusive but still noticeable.
- *Middle* is the most disruptive position, and only be used for important notifications like errors.
- *Bottom End* is the least obtrusive position, but can go unnoticed.
- *Stretch* notifications, that span the full width of the viewport, are more disruptive, and should be reserved for important notifications whose contents require more space.
- Applications with a notification button or drop-down in the header or footer should position notifications to appear in the same part of the screen.
- For a consistent user experience, use one or two positions throughout the application.
- Avoid using positions that may obstruct important parts of the UI, such as navigation.


== Stacking

Multiple simultaneously displayed notifications are stacked vertically, depending on their positioning:

- When using the bottom half of the screen as the position, a new notification appears below the older notifications.
- With the position set to the top half, a new notification appears above the existing notifications.


== Size

The notification card is automatically sized based on its content.

- In large viewports, the card’s maximum width is ⅓ of the viewport.
- In small viewports, the card always takes up the entire width of the viewport.


== Interactive Elements

Notifications can contain interactive content like Buttons or links that allow the user to perform related actions.

For example, if an operation fails, the error notification could offer the user the possibility to try again.
Or, it could contain a link to a view that allows the user to resolve the problem.

[.example.render-only.merge]
--
[source, typescript]
----
include::{root}/frontend/demo/component/notification/notification-retry-preview.ts[render]
----
--

[.example]
--
[source, html]
----
include::{root}/frontend/demo/component/notification/notification-retry.ts[render, tags=*, indent=0, group=TypeScript]
----
--

In situations where the user might want to revert an action, display an Undo button.

[.example.render-only.merge]
--
[source, typescript]
----
include::{root}/frontend/demo/component/notification/notification-undo-preview.ts[render]
----
--

[.example]
--
[source, html]
----
include::{root}/frontend/demo/component/notification/notification-undo.ts[render, tags=*, indent=0, group=TypeScript]
----
--

Notifications can also contain links to relevant information.

[.example.render-only.merge]
--
[source, typescript]
----
include::{root}/frontend/demo/component/notification/notification-link-preview.ts[render]
----
--

[.example]
--
[source, html]
----
include::{root}/frontend/demo/component/notification/notification-link.ts[render, tags=*, indent=0, group=TypeScript]
----
--


=== Making Interactive Elements Keyboard-Accessible

Take care to ensure that keyboard-only users can access interactive elements in notifications:

- Make the notification persistent, to prevent it from disappearing before the user has had a chance to interact with it.
- Provide a keyboard shortcut, either to trigger the action itself, or to move focus to the notification card in cases where multiple interactive elements are present.
- Make the shortcut discoverable, for example, by displaying it as part of the notification’s content.

[.example.render-only.merge]
--
[source, typescript]
----
include::{root}/frontend/demo/component/notification/notification-keyboard-a11y-preview.ts[render]
----
--

[.example]
--
[source, html]
----
include::{root}/frontend/demo/component/notification/notification-keyboard-a11y.ts[render, tags=*, indent=0, group=TypeScript]
----
--


== Icons and Other Rich Formatting

Icons and other content formatting can be used to provide information and helpful visual cues, for example, to make errors and success notifications easier to distinguish for users with color blindness.

[.example.render-only.merge]
--
[source, typescript]
----
include::{root}/frontend/demo/component/notification/notification-rich-preview.ts[render]
----
--

[.example]
--
[source, html]
----
include::{root}/frontend/demo/component/notification/notification-rich.ts[render, tags=*, indent=0, group=TypeScript]
----
--


== Best Practices


=== Use Sparingly

Notifications are disruptive by design and should be used sparingly.
Use fewer notifications by reserving them for more important information that may otherwise go unnoticed by the user.

Less urgent notifications can be provided through a link or drop-down in the application header or footer, instead of immediate notifications.

[.example]
--
[source, typescript]
----
include::{root}/frontend/demo/component/notification/notification-popup.ts[render, tags=*, indent=0, group=TypeScript]
----
--


=== Limit Content Length

Aim for one or two lines of content.
Notifications should be brief and to the point.
More information can be provided through an embedded link or Button.

.[example-title]#Do# show a preview of longer content, and link to the full details
[.example.render-only.do]
--
[source, typescript]
----
include::{root}/frontend/demo/component/notification/notification-content-length-do.ts[render]
----
--

.[example-title]#Don't# display all details in the notification
[.example.render-only.dont]
--
[source, typescript]
----
include::{root}/frontend/demo/component/notification/notification-content-length-dont.ts[render]
----
--


== Related Components

|===
|Component |Usage recommendations

|<<../dialog#, Dialog>>|Dialog should be used instead of Notification for anything that requires immediate user action.
|===
