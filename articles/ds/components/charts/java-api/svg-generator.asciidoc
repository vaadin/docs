---
title: Exporting Charts as SVG
order: 9
layout: page
---

[[charts.svggenerator]]
= Exporting Charts as SVG

Charts can be exported as SVG by using the [classname]#SVGGenerator# class.
This allows you to generate an SVG string of any chart, using a [classname]#Configuration# object with the chart's data.

== Installing

Add the `vaadin-charts-flow-svg-generator` dependency to your project's `pom.xml` as follows:

[source,xml]
----
<dependency>
    <groupId>com.vaadin</groupId>
    <artifactId>vaadin-charts-flow-svg-generator</artifactId>
</dependency>
----

.NodeJS required
NOTE: NodeJS must be installed for the generator to work.
You can see installation instructions <<../../../../guide/install#node-js,here>>.

== Using the Generator

Create an instance of [classname]#SVGGenerator# and call the [methodname]#generate()# method, passing the chart's [classname]#Configuration# as an argument.
The method returns a string with the SVG data of the chart.

.Close the generator
WARNING: Remember to *close the generator when you're done using it*.
It is recommended to use a try-with-resources block, so the generator is automatically closed.

[source,java]
----
Configuration configuration = new Configuration();
// ...
try (SVGGenerator generator = new SVGGenerator()) {
    String svg = generator.generate(configuration);
}
----

== Customizing SVG Generation

Some attributes about the resulting SVG can be customized. Customizable options include:

* Width
* Height
* Theme
* Language
* Showing timeline
* Executing JavaScript code (formatter functions)

Any customizations are handled with the [classname]#ExportOptions# class.

[source,java]
----
Configuration configuration = new Configuration();
// ...
ExportOptions options = new ExportOptions();
options.setWidth(800);
options.setHeight(600);
try (SVGGenerator generator = new SVGGenerator()) {
    String svg = generator.generate(configuration, options);
}
----

.CSS styling not supported
NOTE: CSS styling is not supported when exporting a chart as SVG.

=== Executing JavaScript Functions

It is possible to execute functions from [classname]#Configuration# objects, for example, formatter functions.
Executing functions must be explicitly enabled by setting the `executeFunctions` flag to `true`.

.Only Run Trusted Code
CAUTION: Enabling this option will allow JavaScript code to run on your server.
Make sure to only allow safe and trusted code.

[source,java]
----
Configuration configuration = new Configuration();
configuration.getyAxis().getLabels().setFormatter("function () { return this.value +' mm'; }");
// ...
ExportOptions options = new ExportOptions();
options.setExecuteFunctions(true);
try (SVGGenerator generator = new SVGGenerator()) {
    String svg = generator.generate(configuration, options);
}
----

== Preview SVG (for debugging)

You can add the SVG to a component to see the resulting image.

.For debugging purposes only
CAUTION: Use the <<../../../basic-use,Chart>> component to render charts.
This approach is only intended to help you debug your app.

[source,java]
----
Div div = new Div();
Configuration configuration = new Configuration();
// ...
try (SVGGenerator generator = new SVGGenerator()) {
    String svg = generator.generate(configuration);
    div.getElement().setProperty("innerHTML", svg);
}
add(div);
----