---
title: Upgrading Guide
order: 1000
---

= Upgrading Guide for Charts


[[charts.migratingfromearlierversions]]
== Changes in Version 9

Vaadin Charts 9 comes with new chart types and brings back the API to style from Java.
Since there are breaking changes introduced in Vaadin Charts 9, these changes cannot be backported to Vaadin 14 as part of the platform.

This guide will help you update your project to use the latest Charts version.

=== Summary

Below, you can see the main changes done for Charts 9 compared to previous versions:

* Upgraded to HighCharts 8.1
* Styling can be done either with CSS or Java API (default)
* New chart types:
** <<charts-charttypes/#charts.charttypes.bullet,Bullet Chart>>
** <<charts-charttypes/#charts.charttypes.organization,Organization Chart>>
** <<charts-charttypes/#charts.charttypes.timeline,Timeline Chart>>
** <<charts-charttypes/#charts.charttypes.xrange,X-Range Chart>>
* Java API for lazy drilldown

=== Installing The Latest Charts Version

While the newer Charts was released for V17, a project running V14 in *npm mode* can use the new Charts by overriding the version at the project's POM file:

[source, xml]
----
<dependency>
    <groupId>com.vaadin</groupId>
    <artifactId>vaadin-charts-flow</artifactId>
    <version>19.0.2</version>
</dependency>
----

Check the latest version on the https://github.com/vaadin/vaadin-flow-components/releases[Vaadin Flow Components release page].

=== Migration Guide

If you are planning to use Vaadin Charts 9 on a V14 platform, there are different approaches depending on the styling option picked.

.Both CSS and Java styling cannot be used in the same project
[CAUTION]
While no error is thrown if different styling methods are used in the same project, *only one method should be used across all charts*, since having both could lead to unexpected results.

==== Java API for Styling

Vaadin Charts 9+ uses Java API for styling by default.
This is more suitable for new projects or projects where the amount of charts is small or not heavily customised.

For example, that's how the <<css-styling/#css.styling.example1,Example 1 from the CSS Styling guide>> would look like using the Java API:

[source, java]
----
Chart chart = new Chart();
Configuration configuration = chart.getConfiguration();

configuration.getChart().setType(ChartType.LINE);

configuration.getxAxis().setCategories("Jan", "Feb", "Mar", "Apr");

DataSeries ds = new DataSeries();
ds.setData(7.0, 6.9, 9.5, 14.5);

DataLabels callout = new DataLabels(true);
callout.setShape(Shape.CALLOUT);
callout.setY(-12);
// Setting the color to the data labels
callout.setColor(SolidColor.RED);
ds.get(1).setDataLabels(callout);
ds.get(2).setDataLabels(callout);
configuration.addSeries(ds);

// Adding a plot options to set the color to the markers
PlotOptionsLine plotOptions = new PlotOptionsLine();
plotOptions.getMarker().setFillColor(SolidColor.YELLOW);
chart.getConfiguration().setPlotOptions(plotOptions);

add(chart);
----


==== Using CSS Styling

If you want to upgrade Vaadin Charts, but want to keep using CSS styling, there are a few steps needed to make it work:

. Enable CSS style on every instance by calling `setStyledMode(true)`:
+
[source, java]
----
Chart chart = new Chart();
Configuration conf = chart.getConfiguration();
conf.getChart().setStyledMode(true);
----
. Import the charts default theme module to your view with:
+
[source, java]
----
@JsModule("@vaadin/vaadin-charts/theme/vaadin-chart-default-theme")
----

For more detailed instructions, please check the
<<css-styling#,"CSS Styling guide">>



== Changes in Version 6

Vaadin Charts 6 comes with some good enhancements, most notably: CSS styling.
This necessitated removal of many Java style configuration API among other changes.

=== Summary

* Upgraded to HighCharts 5
* Styling is now primarily done with CSS
* Dropped "size with units" sizing properties in favor of strings to take full advantage of browser capabilities
* [classname]`ZAxis` is now a subclass of [classname]`Axis`
* Getting [classname]`PlotOptionsSeries` no longer automatically creates a new instance
* Gradient is no longer supported
* Plot background image is no longer supported
* SVG Generator is no longer supported

=== Replaced types

[options="header"]
|===
| Old Type | Replaced By
| [classname]`PinchType` | [classname]`Dimension`
| [classname]`ZoomType` | [classname]`Dimension`
|===

=== Dropped types

[options="header"]
|===
| Type | Used In
| [classname]`Handles` | Navigator.handles
|===

=== Dropped properties

[cols="2,5",options="header"]
|===
| Type | Properties
| [classname]`AbstractDataLabels` (and subclasses) | backgroundColor, borderColor, borderRadius, borderWidth, color, reservedSpace, style
| [classname]`AreaOptions` (and subclasses) | color, dashStyle, lineColor, lineWidth, negativeColor
| [classname]`Axis` (and subclasses) | gridLineColor, gridLineWidth, minorGridLineColor, minorGridLineWidth, tickColor
| [classname]`AxisTitle` | reserveSpace
| [classname]`AxisStyle` | tickWidth, tickColor, gridLineColor, gridLineWidth
| [classname]`Background` | backgroundColor, borderColor, borderWidth
| [classname]`ChartModel` | backgroundColor, borderColor, plotBackgroundColor, plotBackgroundImage, plotBorderColor, selectionMarkerFill
| [classname]`ChartStyle` | backgroundColor, plotBackgroundColor, plotBorderWidth, plotBorderColor, borderWidth, borderColor
| [classname]`ColumnOptions` (and subclasses) | color
| [classname]`ContextButton` | symbolFill, symbolSize, symbolStroke, symbolStrokeWidth
| [classname]`Credits` | style
| [classname]`GaugeOptions` (and subclasses) | zoneAxis, zones
| [classname]`Global` | canvasToolsURL
| [classname]`Hover` | lineWidth, lineWidthPlus, fillColor, lineColor
| [classname]`Labels` | style
| [classname]`Legend` | backgroundColor, borderColor, borderWidth, itemHiddenStyle, itemHoverStyle, itemStyle
| [classname]`LegendNavigation` | activeColor, inactiveColor, style
| [classname]`LegendTitle` | style
| [classname]`Loading` | labelStyle, style
| [classname]`Marker` | fillColor, lineColor, lineWidth
| [classname]`Navigation` | menuItemHoverStyle, menuItemStyle, menuStyle
| [classname]`Navigator` | handles, maskFill, outlineColor, outlineWidth
| [classname]`NoData` | style
| [classname]`OhlcOptions` (and subclasses) | color,lineWidth
| [classname]`PlotOptionsBoxplot` | color, lineWidth, negativeColor
| [classname]`PlotOptionsBubble` | color, dashStyle, lineWidth, negativeColor
| [classname]`PlotOptionsCandlestick` | lineColor
| [classname]`PlotOptionsFlags` | color, lineColor, lineWidth
| [classname]`PlotOptionsPolygon` | color, dashStyle, lineWidth, negativeColor
| [classname]`PlotOptionsSeries` | color, dashStyle, lineWidth, negativeColor
| [classname]`PlotOptionsTreemap` | color
| [classname]`PlotOptionsWaterfall` | dashStyle, lineColor
| [classname]`PointOptions` (and subclasses) | color, dashStyle, lineWidth, negativeColor
| [classname]`PyramidOptions` (and subclasses) | heightUnit, widthUnit
| [classname]`RangeSelector` | buttonTheme, inputStyle, labelStyle
| [classname]`Select` | fillColor, lineColor, lineWidth
| [classname]`StackLabels` | style
| [classname]`Subtitle` | style
| [classname]`Title` | style
|===

More information about Charts styling can be obtained in <<css-styling#css.styling,"CSS Styling">>.

=== Properties with new types

[options="header"]
|===
| Property | New Type
| ZAxis.title | [classname]`AxisTitle`
| ZAxis.type | [classname]`AxisType`
| ColumnOptions.zoneAxis | [classname]`ZoneAxis`
| Label.textAlign | [classname]`TextAlign`
| ChartModel.panKey | [classname]`PanKey`
| Exporting.type | [classname]`ExportingFileType`
| Background.shape | [classname]`BackgroundShape`
|===
