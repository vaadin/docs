---
title: Basic Layouts
---

= Basic Layouts

// tag::description[]
Vaadin features two basic layout components: Vertical Layout and Horizontal Layout.
As their names suggest, they render their contents vertically and horizontally, respectively.
Components are shown in the order they are added to either layout.
// end::description[]

.Work In Progress
[NOTE]
====
The Java examples for this component are currently in progress. In the meantime, you can view the previous examples.

[.buttons]
- https://vaadin.com/components/vaadin-ordered-layout/java-examples[Java Component Examples]
====

== Vertical Layout

Vertical Layout places components top-to-bottom in a column.
By default, it has 100% width and undefined height, meaning its width is constrained by its parent component and its height is determined by the components it contains.

[.example]
--

[source,html]
----
include::{root}/frontend/demo/component/basiclayouts/basic-layouts-vertical-layout.ts[render,tags=snippet,indent=0,group=TypeScript]
----

//[source,java]
//----
//include::{root}/src/main/java/com/vaadin/demo/component/basiclayouts/BasicLayoutsVerticalLayout.java[render,tags=snippet,indent=0,group=Java]
//----
--

Components in a Vertical Layout can be aligned both vertically and horizontally.

=== Vertical Alignment

You can position components at the top, middle, or bottom.
Alternatively, you can position components by specifying how a layout’s excess space (if any) is distributed between them.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/basiclayouts/basic-layouts-vertical-layout-vertical-alignment.ts[render,tags=snippet,indent=0,group=TypeScript]
----

//[source,java]
//----
//include::{root}/src/main/java/com/vaadin/demo/component/basiclayouts/BasicLayoutsVerticalLayoutVerticalAlignment.java[render,tags=snippet,indent=0,group=Java]
//----
--

|===
|Value |Description

|`START` (default)
|Positions items at the top.

|`CENTER`
|Vertically centers items.

|`END`
|Positions items at the bottom.

|`BETWEEN`
|Available space is distributed evenly between items.
No space is added before the first item, or after the last.

|`AROUND`
|Available space is distributed evenly between items.
The space before the first item, and after the last, is half of that between items.

|`EVENLY`
|Available space is distributed evenly between items.
The space before the first item, between items and after the last item is the same.

|===

=== Horizontal Alignment

Components in a Vertical Layout can be left-aligned (default), centered, right-aligned or stretched horizontally.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/basiclayouts/basic-layouts-vertical-layout-horizontal-alignment.ts[render,tags=snippet,indent=0,group=TypeScript]
----

//[source,java]
//----
//include::{root}/src/main/java/com/vaadin/demo/component/basiclayouts/BasicLayoutsVerticalLayoutHorizontalAlignment.java[render,tags=snippet,indent=0,group=Java]
//----
--

|===
|Value |Description

|`START` (default)
|Left-aligns (LTR) or right-aligns (RTL) items

|`CENTER`
|Horizontally centers items

|`END`
|Right-aligns (LTR) or left-aligns (RTL) items

|`STRETCH`
|Stretches items with undefined width horizontally

|===

It is also possible to horizontally align individual components, overriding the alignment set by the parent layout.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/basiclayouts/basic-layouts-vertical-layout-individual-alignment.ts[render,tags=snippet,indent=0,group=TypeScript]
----

//[source,java]
//----
//include::{root}/src/main/java/com/vaadin/demo/component/basiclayouts/BasicLayoutsVerticalLayoutIndividualAlignment.java[render,tags=snippet,indent=0,group=Java]
//----
--

== Horizontal Layout

Horizontal Layout places components side-by-side in a row.
By default, it has undefined width and height, meaning its size is determined by the components it contains.

[.example]
--

[source,html]
----
include::{root}/frontend/demo/component/basiclayouts/basic-layouts-horizontal-layout.ts[render,tags=snippet,indent=0,group=TypeScript]
----

//[source,java]
//----
//include::{root}/src/main/java/com/vaadin/demo/component/basiclayouts/BasicLayoutsHorizontalLayout.java[render,tags=snippet,indent=0,group=Java]
//----
--

Like Vertical Layout, Horizontal Layout enables both vertical and horizontal alignment of components.

=== Vertical Alignment

You can position components at the top, middle, or bottom.
Items can alternatively be made to stretch vertically or positioned along the layout’s text baseline.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/basiclayouts/basic-layouts-horizontal-layout-vertical-alignment.ts[render,tags=snippet,indent=0,group=TypeScript]
----

//[source,java]
//----
//include::{root}/src/main/java/com/vaadin/demo/component/basiclayouts/BasicLayoutsHorizontalLayoutVerticalAlignment.java[render,tags=snippet,indent=0,group=Java]
//----
--

|===
|Value |Description

|`STRETCH` (default)
|Stretches items with undefined height horizontally

|`START`
|Positions items at the top of the layout

|`CENTER`
|Vertically centers items

|`END`
|Positions items at the bottom of the layout

|`BASELINE`
|Position items along the layout’s (text) baseline.

|===

It is also possible to vertically align individual components, overriding the alignment set by the parent layout.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/basiclayouts/basic-layouts-horizontal-layout-individual-alignment.ts[render,tags=snippet,indent=0,group=TypeScript]
----

//[source,java]
//----
//include::{root}/src/main/java/com/vaadin/demo/component/basiclayouts/BasicLayoutsHorizontalLayoutIndividualAlignment.java[render,tags=snippet,indent=0,group=Java]
//----
--

=== Horizontal Alignment

Components in a Horizontal Layout can be left-aligned, centered or right-aligned.
Alternatively, you can position components by specifying how a layout’s excess space is distributed between them.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/basiclayouts/basic-layouts-horizontal-layout-horizontal-alignment.ts[render,tags=snippet,indent=0,group=TypeScript]
----

//[source,java]
//----
//include::{root}/src/main/java/com/vaadin/demo/component/basiclayouts/BasicLayoutsHorizontalLayoutHorizontalAlignment.java[render,tags=snippet,indent=0,group=Java]
//----
--

|===
|Value |Description

|`START` (default)
|Left-aligns (LTR) or right-aligns (RTL) items

|`END`
|Right-aligns (LTR) or left-aligns (RTL) items

|`CENTER`
|Horizontally centers items

|`BETWEEN`
|Available space is distributed evenly between items.
No space is added before the first item, or after the last.

|`AROUND`
|Available space is distributed evenly between items.
The space before the first item, and after the last, is half of that between items.

|`EVENLY`
|Available space is distributed evenly between items.
The space before the first item, between items and after the last item is the same.

|===

== Spacing

Spacing is used to create space between components in the same layout.
Spacing can help prevent misclicks and distinguish content areas.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/basiclayouts/basic-layouts-spacing.ts[render,tags=snippet,indent=0,group=TypeScript]
----

//[source,java]
//----
//include::{root}/src/main/java/com/vaadin/demo/component/basiclayouts/BasicLayoutsSpacing.java[render,tags=snippet,indent=0,group=Java]
//----
--

.CAUTION: Combining spacing and alignment
[WARNING]
Vertical Layout’s vertical alignment and Horizontal Layout’s horizontal alignment might not work properly when spacing is enabled.
If your layout requires both, consider disabling spacing and handling the alignment using CSS.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/basiclayouts/basic-layouts-spacing-variants.ts[render,tags=snippet,indent=0,group=TypeScript]
----

//[source,java]
//----
//include::{root}/src/main/java/com/vaadin/demo/component/basiclayouts/BasicLayoutsSpacingVariants.java[render,tags=snippet,indent=0,group=Java]
//----
--

|===
|Theme variant |Usage recommendations

|`spacing-xs`
|Extra small space between items

|`spacing-s`
|Small space between items

|`spacing`
|Medium space between items

|`spacing-l`
|Large space between items

|`spacing-xl`
|Extra large space between items

|===

== Padding

Padding is the space between a layout’s outer border and its content.
Padding can help distinguish a layout’s content from its surroundings.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/basiclayouts/basic-layouts-padding.ts[render,tags=snippet,indent=0,group=TypeScript]
----

//[source,java]
//----
//include::{root}/src/main/java/com/vaadin/demo/component/basiclayouts/BasicLayoutsPadding.java[render,tags=snippet,indent=0,group=Java]
//----
--

== Margin

Use margin to create space around a layout.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/basiclayouts/basic-layouts-margin.ts[render,tags=snippet,indent=0,group=TypeScript]
----

//[source,java]
//----
//include::{root}/src/main/java/com/vaadin/demo/component/basiclayouts/BasicLayoutsMargin.java[render,tags=snippet,indent=0,group=Java]
//----
--

== Expanding Items

Components can be made to expand and take up any excess space a layout may have.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/basiclayouts/basic-layouts-expanding-items.ts[render,tags=snippet,indent=0,group=TypeScript]
----

//[source,java]
//----
//include::{root}/src/main/java/com/vaadin/demo/component/basiclayouts/BasicLayoutsExpandingItems.java[render,tags=snippet,indent=0,group=Java]
//----
--

When multiple components expand, they do so relative to each other.
For example, two items with expand ratios of 2 and 1, will result in the first item taking up twice as much of the available space as the second item.
