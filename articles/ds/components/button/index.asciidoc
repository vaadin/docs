---
title: Button
page-links:
  - 'API: https://cdn.vaadin.com/vaadin-web-components/{moduleNpmVersion:vaadin-button}/#/elements/vaadin-button[TypeScript] / https://vaadin.com/api/platform/{moduleMavenVersion:com.vaadin:vaadin}/com/vaadin/flow/component/button/Button.html[Java]'
  - 'Source: https://github.com/vaadin/web-components/tree/v{moduleNpmVersion:vaadin-button}/packages/vaadin-button[TypeScript] / https://github.com/vaadin/flow-components/tree/{moduleMavenVersion:com.vaadin:vaadin}/vaadin-button-flow-parent[Java]'
---

= Button
:toclevels: 2
:experimental:

// tag::description[]
The Button component allows users to perform actions.
// end::description[]
It comes in several different style variants, and supports icons in addition to text labels.

[.example]
--

[source,html]
----
include::{root}/frontend/demo/component/button/button-basic.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/button/ButtonBasic.java[render,tags=snippet,indent=0,group=Java]
----

--

== Styles

The following variants can be used to distinguish between actions of different importance in the UI:

[.example]
--
[source,html]
----
include::{root}/frontend/demo/component/button/button-styles.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/button/ButtonStyles.java[render,tags=snippet,indent=0,group=Java]
----
--

[cols="1,3a",grid=rows]
|===
|Variant |Usage recommendations

|Primary
|* The most important action in a view or part of a view.
* The main closure or continuation action (such as *Save*) in a form or dialog.
* Avoid presenting the user with more than one at any time.

|Secondary
|* Default style recommended for most actions.
* Alternate or negative closure actions (for example, *Cancel*) in a form or dialog.

|Tertiary
|* Lower-importance actions
* Especially in parts of the UI with less space, such as cards, or for repeated actions for items in lists, tables, etc.
* Caution: can be mistaken for non-interactive text
|===

=== Danger / Error Variants

A style for distinguishing actions related to dangers, warnings, or errors.

[.example]
--

[source,html]
----
include::{root}/frontend/demo/component/button/button-error.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/button/ButtonError.java[render,tags=snippet,indent=0,group=Java]
----
--

Use this style for:

* Dangerous actions, such as those that will lose or destroy data.
* Primary danger buttons should only be used when the dangerous action is the most likely action, such as the affirmative *Delete* action in a deletion confirmation dialog.
* Secondary and Tertiary variants can also be used for actions related to current errors (such as resolving them or viewing their details).

=== Size Variants

The following size variants are available for Button instances whose size needs to be different from the default:

[.example]
--

[source,html]
----
include::{root}/frontend/demo/component/button/button-sizes.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/button/ButtonSizes.java[render,tags=snippet,indent=0,group=Java]
----
--

[cols="1,3",grid=rows]
|===
|Variant |Usage recommendations

|Large
|For especially important call-to-action buttons, where extra emphasis is needed.

|Normal
|Default size.

|Small
|Compact option for cramped parts of the UI, if a Tertiary variant is not deemed appropriate.
|===

.Default button size can be customized
[TIP]
Size variants should only be used in special cases.
See <<../../foundation/size-space#size-and-space,Size and Space>> for details on how to change the default button size.

=== Miscellaneous Style Variants

The *Tertiary Inline* variant omits all white space around the label, which is useful for embedding a Button as part of text content or another component.
It should not be confused with a link:[Link], however.
// the link in the line above should not send the user anywhere

[.example]
--

[source,html]
----
include::{root}/frontend/demo/component/button/button-tertiary-inline.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/button/ButtonTertiaryInline.java[render,tags=snippet,indent=0,group=Java]
----
--


The *Success* and *Contrast* variants should provide additional color options for buttons.

[.example]
--

[source,html]
----
include::{root}/frontend/demo/component/button/button-success.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/button/ButtonSuccess.java[render,tags=snippet,indent=0,group=Java]
----
--


[.example]
--

[source,html]
----
include::{root}/frontend/demo/component/button/button-contrast.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/button/ButtonContrast.java[render,tags=snippet,indent=0,group=Java]
----
--


The *Tertiary + Contrast* combination should be avoided, because of its similarity to non-interactive text elements.

.Default button colors can be customized
[TIP]
Note that the standard Button colors can be adjusted using <<../../foundation/color#,theme features>>, so these variants should not be used to replace standard buttons just to achieve a different color.

== Buttons With Icons

Buttons can have icons instead of text, or on either side in addition to text:

[.example]
--

[source,html]
----
include::{root}/frontend/demo/component/button/button-icons.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/button/ButtonIcons.java[render,tags=snippet,indent=0,group=Java]
----
--

Usage recommendations:

* *Use icons sparingly*.
Most actions are difficult to represent reliably with icons, and the benefit of icons in addition to text should be weighed against the additional visual noise this creates.
* *Icon-only* buttons should be primarily used for *extremely common recurring actions* with highly standardized, universally understood icons (for example, a cross for *close*), and for actions that are *repeated* (for example, in lists and tables).
* Icon-only buttons should provide a *textual alternative for screen readers* using the `aria-label` attribute.

.Icon-only button style variant
[NOTE]
Use the `icon` / `LUMO_ICON` theme variant on icon-only buttons to reduce the white space on either side of the icon.

== Buttons With Images

Images can be used similarly to icons.
See icon usage recommendations.

[.example]
--

[source,html]
----
include::{root}/frontend/demo/component/button/button-images.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/button/ButtonImages.java[render,tags=snippet,indent=0,group=Java]
----
--

== Disabled

Buttons representing actions that are not currently available to the user should be either hidden or disabled.
A disabled button is rendered as "dimmed", and is excluded from the focus order (such as when interactive UI elements are focused using the tab key).

[.example]
--

[source,html]
----
include::{root}/frontend/demo/component/button/button-disabled.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/button/ButtonDisabled.java[render,tags=snippet,indent=0,group=Java]
----
--

=== Hidden vs Disabled

Hiding an unavailable action entirely is often preferable to a disabled button, as this reduces UI clutter.
However, in certain situations this can be problematic:

* If the user expects a button to be present, such as at the end of a form, hiding the button can cause confusion, even if the form clearly indicates the presence of one or more invalid fields.
* As a hidden button does not occupy any space in the UI, toggling its visibility can cause unwanted changes in the layout of other elements.

=== Showing an Error on Click

As an alternative to hiding or disabling buttons, unavailable actions can instead be configured to show an error message when the button is clicked (using a <<../notification/index#,Notification>> or an adjacent inline text element).
This approach is the most accessible option, but may cause frustration in users who expect unavailable actions to be somehow distinguished from available actions.

=== Prevent Multiple Clicks

Buttons can be configured to become disabled automatically when clicked.

This can be especially useful for actions that take a bit longer to perform.
Not only does this avoid the need for special handling of clicks while the action is in progress, but it also communicates to the user that the action was successfully received and is being processed.

[.example]
--

[source,html]
----
include::{root}/frontend/demo/component/button/button-disable-long-action.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/button/ButtonDisableLongAction.java[render,tags=snippet,indent=0,group=Java]
----
--

== Focus

Similarly to <<../input-fields#,input fields>>, the focus ring is only rendered when the button is focused by keyboard or programmatically.

[.example.render-only]
--

[source,html]
----
include::{root}/frontend/demo/component/button/button-focus.ts[render,tags=snippet,indent=0,group=TypeScript]
----

--

=== Auto Focus

Buttons can receive keyboard focus automatically when the UI they appear in is rendered.

[.example]
--
[source,html]
----
<source-info group="TypeScript"></source-info>
<vaadin-button autofocus>Button</vaadin-button>
----

[source,java]
----
<source-info group="Java"></source-info>
Button button = new Button("Button");
button.setAutofocus(true);
----
--

== Keyboard Usage

A focused button can be triggered with kbd:[Enter] or kbd:[Space].

// === Custom Keyboard Shortcuts

// Buttons can be assigned keyboard shortcuts that are either *global*, which work regardless of where keyboard focus is, or *scoped* to a certain component or container.

// Java samples for keyboard shortcuts goes here

== Best Practices

=== Button Labels

* The label should describe the action, preferably using active verbs, such as _"View details"_ rather than just _"Details"_.
* In cases of possible ambiguity, also specify the object of the verb, such as _"Save changes"_ instead of _"Save"_.
* Button groups representing options, such as the buttons of a <<../confirm-dialog#,Confirm Dialog>>, should state what each option represents, such as _"Save changes"_, instead of _"Yes"_, as the latter forces the user to read the question being asked, and increases the risk of selecting the wrong option.
* Keep labels short, ideally less than three words or 25 characters.
* Use ellipsis (…) when an action is *not immediate* but requires more steps to complete.
This is useful, for example, for destructive actions like _"Delete..."_ when a <<../confirm-dialog#,Confirm Dialog>> is used to confirm the action before it is executed.

=== ARIA Labels

The `aria-label` attribute can be used to provide a separate label for accessibility technologies (AT) such as screen readers.
This is important, for example, for icon-only buttons that lack a visible label.

Buttons with regular, visible labels can also benefit from separate `aria-label` s to provide more context that may otherwise be difficult for the AT user to perceive.
In the example below, the buttons' `aria-label` specifies which email address will be removed.

[.example]
--

[source,html]
----
include::{root}/frontend/demo/component/button/button-labels.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/button/ButtonLabels.java[render,tags=snippet,indent=0,group=Java]
----
--

=== Buttons in Forms

[.example]
--

[source,html]
----
include::{root}/frontend/demo/component/button/button-form.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/button/ButtonForm.java[render,tags=snippet,indent=0,group=Java]
----
--

* Buttons should be placed *below the form* they are associated with.
* Buttons should be *aligned left*.
* *Primary action first*, followed by other actions, in order of importance.

=== Buttons in Dialogs

[.example]
--

[source,html]
----
include::{root}/frontend/demo/component/button/button-dialog.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/button/ButtonDialog.java[render,tags=snippet,indent=0,group=Java]
----
--

* Buttons should be placed at the *bottom of the dialog*.
* Buttons should be *aligned right*.
* *Primary action last*, preceded by other actions.
* *Dangerous actions* should be aligned left, to avoid accidental clicks, especially if no confirmation step is included.

=== Global vs Selection-Specific Actions

In lists of selectable items (such as in a <<../grid#,Grid>>) that provide actions applicable to the selected item, buttons for selection-specific actions should be placed separately from "global", non-selection-specific actions, preferably below the list of selectable items.
In the example below, the global _"Add user"_ action is separated from the selection-specific actions below the Grid.

[.example]
--

[source,html]
----
include::{root}/frontend/demo/component/button/button-grid.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/button/ButtonGrid.java[render,tags=snippet,indent=0,group=Java]
----
--

== Related Components

[cols="1,2"]
|===
|Component |Usage recommendations

|Anchor
|Use anchor elements instead of buttons for navigation links.

|<<../menu-bar#,Menu Bar>>
|Overlay menus with items that trigger actions.
Can also be used for single "*menu buttons*" and "*button groups*" without overlay menus.
|===
