---
title: Grid
layout: tabbed-page
tab-title: Usage
page-links:
  - https://github.com/vaadin/vaadin-flow-components/releases/tag/{moduleMavenVersion:com.vaadin:vaadin-grid-flow}[Flow {moduleMavenVersion:com.vaadin:vaadin-grid-flow}]
  - https://github.com/vaadin/vaadin-grid/releases/tag/v{moduleNpmVersion:vaadin-grid}[Web Component {moduleNpmVersion:vaadin-grid}]
section-nav: incomplete
---

= Grid

// tag::description[]
Grid is a component for showing tabular data.
// end::description[]

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/grid/grid-basic.ts[render,tags=snippet,indent=0,group=TypeScript]
----

// [source,java]
// ----
// include::../../../../src/main/java/com/vaadin/demo/component/grid/GridBasic.java[render,tags=snippet,indent=0,group=Java]
// ----

// [source,java]
// ----
// include::../../../../src/main/java/com/vaadin/demo/domain/Person.java[group=Java,tags=snippet]
// ----

--

.Work In Progress
[NOTE]
====
The Java examples for this component are currently in progress. In the meantime, you can view the previous examples.

[.buttons]
- https://vaadin.com/components/vaadin-grid/java-examples[Java Component Examples]
====

== Content

A basic Grid uses plain text to display information in rows and columns.
Rich content can be used to provide additional information in a more legible fashion.
Components such as <<../input-fields#,input fields>> and <<../button#,Button>> are also supported.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/grid/grid-content.ts[render,tags=snippet,indent=0,group=TypeScript]
----

// TODO: Java example for grid content goes here
--

=== Component Renderer vs Template Renderer (Flow only)

Custom content can be rendered using Component Renderers or Template Renderers.

==== Component Renderer

Component Renderers are easy to build but slow to render.
For a given column, they generate a component for each item in the dataset.
The rendered components are fully controllable on the server side.

[.example]
--

// TODO: Java example for component renderer goes here
--

For each rendered cell, Grid creates a corresponding component instance on the server side.
A dataset of 100 items and 10 columns using Component Renderer adds up to 1000 components that need to be managed.
The more components used in a Component Renderer, the more it will negatively affect performance.

Component Renderers are very flexible and easy to use, but should be used with caution.
They are better suited as editors since only a single row can be edited at a time.
They can also be used for detail rows.

==== Template Renderer

Template Renderers render quickly but require writing HTML.
To use components with Template Renderers, you must use their HTML format.
Templates are immutable, meaning the state of the components cannot be managed on the server side.
The template can however have different representations depending on the state of the item.

Consider the following example:

[.example]
--

// TODO: Java example for template renderer goes here
--

The only data sent from the server, other than the template itself (which is only sent once), is the extra name property of each item.

Templates still enable event handling on the server side but you cannot, for example, disable or change the text of a button from the event handler.
For those types of situations, use editors instead.

With template renderers, the server does not keep track of the components in each cell.
It only manages the state of the item in each row.
The client side does not need to wait for the server to send missing information about what needs to be rendered: it can use the template and stamp away all the information it needs.

== Dynamic Height

Grid has a default height of 400 pixels.
It becomes scrollable when its items overflow the allocated space.

In addition to setting any fixed or relative value, the Grid’s height can be set by the number of items in the dataset, meaning the Grid will grow and shrink based on the row count.

Please note that this disables scrolling and should not be used for large data sets to avoid performance issues.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/grid/grid-dynamic-height.ts[render,tags=snippet,indent=0,group=TypeScript]
----

// TODO: Java exmaple for Grid with dynamic height goes here
--

== Selection

Selection is not enabled by default.
Grid supports single and multi-select.
The former allows the user to select exactly one item while the latter enables multiple items to be selected.

=== Single Selection Mode

In single selection mode, rows are selected and deselected by clicking anywhere on the row.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/grid/grid-single-selection-mode.ts[render,tags=snippet,indent=0,group=TypeScript]
----

// TODO: Java example for grid single-selection mode goes here

--

=== Multi-Select Mode

In multi-select mode, a checkbox column is used to select and deselect rows.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/grid/grid-multi-select-mode.ts[render,tags=snippet,indent=0,group=TypeScript]
----

// TODO: Java example for grid multi-selection mode goes here

--

== Columns

Column alignment, freezing (fixed position), grouping, headers & footers, visibility, and width can be configured.
Users can be allowed to resize and reorder columns.

=== Column Alignment

Three different column alignments are supported: left (default), center and right.

Right align is useful when comparing numeric values as it helps with readability and scannability.
Tabular numbers (if the font offers them) or a monospace font could be used to further improve digit alignment.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/grid/grid-column-alignment.ts[render,tags=snippet,indent=0,group=TypeScript]
----

// TODO: Java example for grid column alignment goes here
--

=== Column Freezing

Columns and column groups can be frozen to exclude them from horizontal scrolling of the Grid.

This can be useful for keeping the most important columns always visible in Grids with a large number of columns.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/grid/grid-column-freezing.ts[render,tags=snippet,indent=0,group=TypeScript]
----

// TODO: Java example for Grid Column Freezing goes here
--

.Freeze leftmost columns only
[NOTE]
====
While it’s technically possible to freeze any column, this feature should primarily be used to freeze a certain number of columns starting with the leftmost one, leaving all remaining columns to the right unfrozen.
====

=== Column Grouping

It is possible to group columns together. Grouped columns share a common header and footer.
Use this feature to better visualise and organise related or hierarchical data.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/grid/grid-column-grouping.ts[render,tags=snippet,indent=0,group=TypeScript]
----

// TODO: Java example for Grid Column Grouping goes here
--

=== Column Headers & Footers

Each column has its own customizable header and footer.
A basic column header shows the name in plain text.
Footers are empty and thus hidden by default. Both can contain rich content and components.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/grid/grid-column-header-footer.ts[render,tags=snippet,indent=0,group=TypeScript]
----

// TODO: Java example for Column Header and Footer goes here
--

=== Column Visibility

Columns and column groups can be hidden.
You can provide the user with a menu for toggling column visibilities, for example, using Menu Bar.

Allowing the user to hide columns is useful when only a subset of the columns are relevant to their task, and if there is a large number of columns.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/grid/grid-column-visibility.ts[render,tags=snippet,indent=0,group=TypeScript]
----

// TODO: Java example for column visibility goes here
--

=== Column Reordering & Resizing

Enabling the user to reorder columns is useful when they wish to compare data that is not adjacent by default.
Grouped columns can only be reordered within their group.

Resizing is helpful when a column’s content does not fit and gets cut off or varies in length.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/grid/grid-column-reordering-resizing.ts[render,tags=snippet,indent=0,group=TypeScript]
----

// TODO: Java example for column reordering and resizing goes here

--

=== Column Width

All columns are the same width by default.
You can set a specific width for any column, or allow the Grid to automatically set the width based on the contents.

Column widths can be fixed or non-fixed (default).
Fixed width columns do not grow or shrink as the available space changes, while non-fixed width columns do.

In the following example, the first and last columns have fixed widths.
The second column’s width is to set to be based on the content, while the third column takes up the remaining space.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/grid/grid-column-width.ts[render,tags=snippet,indent=0,group=TypeScript]
----

// TODO: Java example for grid column with goes here
--

== Sorting

Any column can be made sortable.
Enable sorting to allow the user to sort items alphabetically, numerically, by date, etc.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/grid/grid-sorting.ts[render,tags=snippet,indent=0,group=TypeScript]
----

// TODO: Java example for grid sorting goes here
--

You can also sort columns that contain rich and/or custom content by defining which property to sort by.
For example, you can have a column containing a person’s profile picture, name and email sorted by the person’s last name.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/grid/grid-rich-content-sorting.ts[render,tags=snippet,indent=0,group=TypeScript]
----

// TODO: Java example for gird rich content sorting goes here
--

Sorting helps users find and analyze the data, so it's generally recommended to enable it for all applicable columns, except in cases where the order of items is an essential part of the data itself (such as prioritized lists).

== Filtering

Filtering allows the user to quickly find a specific item or subset of items.
You can use the built-in column filters or create external and/or custom filters.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/grid/grid-built-in-filtering.ts[render,tags=snippet,indent=0,group=TypeScript]
----

// TODO: Java example for Grid with built-in filtering goes here
--

Place filters outside the Grid when

* The filter is based on multiple columns
* a bigger field or more complex filter UI is needed, which wouldn’t comfortably fit in a column

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/grid/grid-filter.ts[render,tags=snippet,indent=0,group=TypeScript]
----

// TODO: Java example for grid filter goes here
--

== Item Details

Item details are expandable content areas that can be displayed below the regular content of a row, used to display more information about an item.
By default, an item’s details are toggled by clicking on the item’s row.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/grid/grid-item-details.ts[render,tags=snippet,indent=0,group=TypeScript]
----

// TODO: Java example for grid item details goes here
--

The default toggle behavior can be replaced by programmatically toggling the details visibility, for example, from a button click.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/grid/grid-item-details-toggle.ts[render,tags=snippet,indent=0,group=TypeScript]
----

// TODO: Java example for grid item details with toggle goes here
--

== Context Menu

You can use a Context Menu to provide shortcuts to the user.
It appears on right (default) or left click.
In a mobile browser, a long press opens the menu.

Please note that using a Context Menu should not be the only way of accomplishing a task.
The same functionality needs to be accessible elsewhere in the UI as well.

See <<../context-menu#,Context Menu>> for more information.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/grid/grid-context-menu.ts[render,tags=snippet,indent=0,group=TypeScript]
----

// TODO: Java example for grid context-menu goes here
--

== Drag and Drop

Grid supports drag and drop, for example to reorder rows and to drag rows between Grids.

=== Drop Mode

A Grid’s drop mode determines where a drop can happen.
Vaadin offers 4 different drop modes:


|===
|Drop Mode |Description

|<<#drag-rows-between-grids,On Grid>>
|Drops can occur on the Grid as whole, not on top of or between individual rows.
Use this option when the order is unimportant.

|<<#row-reordering,Between>>
|Drops can happen between rows.
Use this mode when the order is important.

|<<#drag-and-drop-filters,On Top>>
|Drops can take place on top of rows.
This is useful when creating relationships between items or moving an item into another item, for example placing a file inside a folder.

|On Top or Between
|Drops can occur on top of or between rows.
|===

=== Row Reordering

You can use drag and drop to reorder rows.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/grid/grid-row-reordering.ts[render,tags=snippet,indent=0,group=TypeScript]
----

// TODO: Java example goes here
--

=== Drag Rows Between Grids

Rows can be dragged from one Grid to another, for example to move, copy or link items from different datasets.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/grid/grid-drag-rows-between-grids.ts[render,tags=snippet,indent=0,group=TypeScript]
----

// TODO: Java example goes here
--


=== Drag and Drop Filters

Drag and drop filters determine which rows are draggable and which rows are valid drop targets, respectively.
The filters function on a per row basis.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/grid/grid-drag-drop-filters.ts[render,tags=snippet,indent=0,group=TypeScript]
----

// TODO: Java example goes here
--

== Inline Editing (Java Only)

Grid can be configured to allow inline editing.
Editing can be either buffered and non-buffered.
Buffered means changes must be explicitly committed, while non-buffered automatically commit changes on blur (when a field loses focus).

=== Buffered

[.example]
--

// TODO: Java example goes here
--

=== Non-Buffered

[.example]
--

// TODO: Java example goes here
--

Alternatively, use <<../grid-pro#,Grid Pro>> for more streamlined inline-editing, or <<../crud#,CRUD>> for editing in a separate side panel or dialog.

== Styling Rows and Columns

You can style individual cells based on the data, for example, to highlight changes or important information.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/grid/grid-styling.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,css]
----
include::{root}/frontend/themes/docs/components/vaadin-grid-styling.css[render,tags=snippet,indent=0,group=CSS]
----

// TODO: Java example goes here
--

== Theme Variants

Grid variants can reduce the white space inside the grid, adjust border and row highlight visibility, and control cell content overflow behavior.

Variants can be combined together freely.

=== Compact

The `compact` theme variant makes the Grid more dense by reducing the header and row heights, as well as the spacing between columns.

It is useful for displaying more information on-screen without having to scroll.
It can also help improve scannability and comparability between rows.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/grid/grid-compact.ts[render,tags=snippet,indent=0,group=TypeScript]
----

// TODO: Java example goes here
--

=== No Border

The `no-border` theme variant removes Grid’s outer border.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/grid/grid-no-border.ts[render,tags=snippet,indent=0,group=TypeScript]
----

// TODO: Java example goes here
--

=== No Row Border

This theme variant removes the horizontal row borders.
It is best suited for small datasets.
Parsing larger sets may be difficult unless paired with the `row-stripes` theme variant.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/grid/grid-no-row-border.ts[render,tags=snippet,indent=0,group=TypeScript]
----

// TODO: Java example goes here
--

=== Column Borders

You can add vertical borders between columns by using the `column-borders` theme variant.
Data sets with a lot of columns packed tightly together, or where content gets truncated, can benefit from the additional separation that vertical borders bring.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/grid/grid-column-borders.ts[render,tags=snippet,indent=0,group=TypeScript]
----

// TODO: Java example goes here
--

=== Row Stripes

The `row-stripes` theme produces a background color for every other row.
It can have a positive effect on scannability.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/grid/grid-row-stripes.ts[render,tags=snippet,indent=0,group=TypeScript]
----

// TODO: Java example goes here
--

=== Wrap Cell Content

Overflowing cell content is clipped or truncated by default.
This variant makes the content wrap instead.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/grid/grid-wrap-cell-content.ts[render,tags=snippet,indent=0,group=TypeScript]
----

// TODO: Java example goes here
--

== Related Components

|===
|Component |Usage recommendations

|<<../crud#,CRUD>>
|Component for creating, displaying, updating and deleting tabular data.

|<<../grid-pro#,Grid Pro>>
|Component for showing and editing tabular data.

|<<../tree-grid#,Tree Grid>>
|Component for showing hierarchical tabular data.

|<<../list-box#,List Box>>
|Lightweight component for lightweight, single-column lists.
|===
