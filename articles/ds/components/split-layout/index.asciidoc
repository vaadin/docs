---
title: Split Layout
page-links:
  - 'API: https://cdn.vaadin.com/vaadin-web-components/{moduleNpmVersion:vaadin-split-layout}/#/elements/vaadin-split-layout[TypeScript] / https://vaadin.com/api/platform/{moduleMavenVersion:com.vaadin:vaadin}/com/vaadin/flow/component/splitlayout/SplitLayout.html[Java]'
  - 'Source: https://github.com/vaadin/web-components/tree/v{moduleNpmVersion:vaadin-split-layout}/packages/vaadin-split-layout[TypeScript] / https://github.com/vaadin/flow-components/tree/{moduleMavenVersion:com.vaadin:vaadin}/vaadin-split-layout-flow-parent[Java]'
---

= Split Layout

// tag::description[]
Split Layout is a component with two content areas and a draggable split handle between them.
// end::description[]

[.example]
--

[source,html]
----
include::{root}/frontend/demo/component/splitlayout/split-layout-basic.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/splitlayout/SplitLayoutBasic.java[render,tags=snippet,indent=0,group=Java]
----
--

== Orientation

The default orientation is horizontal, placing the content areas side by side.
The orientation can also be vertical.

Orientation should be set based on the content and the screen size.
The user can also be allowed to choose which orientation they wish to use.

[.example]
--

[source,html]
----
include::{root}/frontend/demo/component/splitlayout/split-layout-orientation.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/splitlayout/SplitLayoutOrientation.java[render,tags=snippet,indent=0,group=Java]
----
--

== Splitter Position

The initial splitter position is determined by the default size of the two content area components.
Their height and width affect the position when using a vertical and horizontal orientation, respectively.

The initial split position can also be explicitly set using a percentage value.
When using vertical orientation, the split layout must have an explicit height for this to work.
This can either be an absolute or percentage value.
When using a percentage value, ensure that ancestors have an explicit height as well.

[.example]
--

[source,html]
----
include::{root}/frontend/demo/component/splitlayout/split-layout-initial-splitter-position.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/splitlayout/SplitLayoutInitialSplitterPosition.java[render,tags=snippet,indent=0,group=Java]
----
--

The splitter respects the minimum and maximum size of the content area components.

[.example]
--

[source,html]
----
include::{root}/frontend/demo/component/splitlayout/split-layout-min-max-size.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/splitlayout/SplitLayoutMinMaxSize.java[render,tags=snippet,indent=0,group=Java]
----
--

The split can be adjusted programmatically, for example, by using a Button.
This is useful when the user wants to toggle between certain positions.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/splitlayout/split-layout-toggle.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/splitlayout/SplitLayoutToggle.java[render,tags=snippet,indent=0,group=Java]

...

include::{root}/src/main/java/com/vaadin/demo/component/splitlayout/SplitLayoutToggle.java[render,tags=setstyles,indent=0,group=Java]
----
--

== Theme Variants

Split Layout has two theme variants: `small` and `minimal`.

[.example]
--

[source,html]
----
include::{root}/frontend/demo/component/splitlayout/split-layout-theme-small.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/splitlayout/SplitLayoutThemeVariants.java[render,tags=snippet,indent=0,group=Java]
----
--

The `small` theme variant makes the divider smaller.
The `minimal` theme variant hides the visual divider.
Both variants only show the split handle on hover and are not ideal for touch devices.

[.example]
--

[source,html]
----
include::{root}/frontend/demo/component/splitlayout/split-layout-theme-minimal.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/splitlayout/SplitLayoutMinimalThemeVariants.java[render,tags=snippet,indent=0,group=Java]
----
--

When using the `minimal` theme variant, it is recommended to somehow suggest the split between the two sides, for example by styling one side as a layer on top of the other.

While these variants reduce the visual clutter, they make it less obvious to the user that the content is resizable.

== Best Practices

* Don't use Split Layout when either content area has, or should have, a fixed size.

* Split Layouts can be difficult to use in responsive applications due to the splitter position being percentage based and thus the content scales with the viewport.

* Use Split Layout to give the user the ability to adjust the layout.
  However, if the only distinct positions such as collapsed and expanded are useful to the user, use a toggle button instead.
  Non-adjustable layouts should use Ordered Layouts or Flex Layout.
