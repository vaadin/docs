---
title: App Layout
page-links:
  - 'API: https://cdn.vaadin.com/vaadin-web-components/{moduleNpmVersion:vaadin-app-layout}/#/elements/vaadin-app-layout[TypeScript] / https://vaadin.com/api/platform/{moduleMavenVersion:com.vaadin:vaadin}/com/vaadin/flow/component/applayout/AppLayout.html[Java]'
  - 'Source: https://github.com/vaadin/web-components/tree/v{moduleNpmVersion:vaadin-app-layout}/packages/vaadin-app-layout[TypeScript] / https://github.com/vaadin/flow-components/tree/{moduleMavenVersion:com.vaadin:vaadin}/vaadin-app-layout-flow-parent[Java]'
---

= App Layout

// tag::description[]
App Layout is a component for building common application layouts.
// end::description[]

include::../_shared.asciidoc[tag=scaled-examples]
include::../_shared.asciidoc[tag=scaled-examples-responsive]

[.example]
--

[source,html]
----
include::{root}/frontend/demo/component/app-layout/app-layout-basic.ts[render, frame, tags=snippet, indent=0, group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/applayout/AppLayoutBasic.java[render,frame,tags=snippet,indent=0,group=Java]
----
--

The layout consists of three sections: a horizontal navigation bar (*navbar*), a collapsible navigation drawer (*drawer*) and a content area.
An application's main navigation blocks should be positioned in the navbar and/or drawer, whereas views are rendered in the content area.

App Layout is responsive and adjusts automatically to fit desktop, tablet, and mobile screen sizes.

== Navbar Placement

The navbar can be located on top or to the side of the drawer.

When put on top, the navbar is typically used as an application header.
Application headers contain, for example, the application's name and branding, as well as actions that apply to the entire application, such as notifications, settings, etc.

[.example.desktop]
--

[source,html]
----
include::{root}/frontend/demo/component/app-layout/app-layout-navbar-placement.ts[render, frame, tags=snippet, indent=0, group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/applayout/AppLayoutNavbarPlacement.java[render,frame,tags=snippet,indent=0,group=Java]
----
--

When placed to the side, the navbar is often seen as a view header, housing the view's title, and actions and secondary navigation that relate only to the current view.

[.example.desktop]
--

[source,html]
----
include::{root}/frontend/demo/component/app-layout/app-layout-navbar-placement-side.ts[render, frame, tags=snippet, indent=0, group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/applayout/AppLayoutNavbarPlacementSide.java[render,frame,tags=snippet,indent=0,group=Java]
----
--

== Drawer Toggle

Show and hide the drawer using a Drawer Toggle (or a Button).
The Drawer Toggle (☰) should always be accessible (unless the drawer is empty) and is most often situated in the navbar.

== Scrolling Behavior

Mobile browsers will collapse and expand their address bars when the user scrolls down and up, respectively.
On iOS, you can tap the status bar (signal strength, battery, clock, etc.) to scroll back to the top of the page/view.
To enable this effect, neither the App Layout nor its parent should have their heights defined.

.Scrolling containers with 100% height
[NOTE]
This behavior is not compatible with vertically scrollable Grids, or other scrolling containers within the content area whose height is 100%.

== Bottom Navbar on Small Touchscreens

When the navbar is used for navigation, the *touch-optimized navbar* slot can be used to provide a separate version of the navigation at the bottom of the UI, optimized for mobile phones.

[.example.mobile]
--

[source,html]
----
include::{root}/frontend/demo/component/app-layout/app-layout-bottom-navbar.ts[render, frame, tags=snippet, indent=0, group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/applayout/AppLayoutBottomNavbar.java[render,frame,tags=snippet,indent=0,group=Java]
----
--

== Best Practices

=== Navbar vs Drawer

Make the choice between navbar and drawer based primarily on the number of items placed in it.

The navbar is a good choice for a small number of items (3–5), as these can fit into the viewport without scrolling.

[.example]
--

[source,html]
----
include::{root}/frontend/demo/component/app-layout/app-layout-navbar.ts[render, frame, tags=snippet, indent=0, group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/applayout/AppLayoutNavbar.java[render,frame,tags=snippet,indent=0,group=Java]
----
--

When more items need to be displayed, or if small-screen support is a priority, the drawer is a better choice, as it can accommodate a longer list of links without scrolling, and collapses into a hamburger menu on small screens.
Furthermore, a vertical list of items is easier for the user to scan.

[.example]
--

[source,html]
----
include::{root}/frontend/demo/component/app-layout/app-layout-drawer.ts[render, frame, tags=snippet, indent=0, group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/applayout/AppLayoutDrawer.java[render,frame,tags=snippet,indent=0,group=Java]
----
--

For applications that require multilevel or hierarchical navigation, use the drawer to (at least) house the first level.
The secondary (and tertiary) navigation items can be placed in either the drawer or the navbar.

[.example]
--

[source,html]
----
include::{root}/frontend/demo/component/app-layout/app-layout-secondary-navigation.ts[render, frame, tags=snippet, indent=0, group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/applayout/AppLayoutSecondaryNavigation.java[render,frame,tags=snippet,indent=0,group=Java]
----
--
