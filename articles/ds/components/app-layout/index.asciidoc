---
title: App Layout
layout: tabbed-page
tab-title: Usage
page-links: \
https://github.com/vaadin/vaadin-flow-components/releases/tag/{moduleMavenVersion:com.vaadin:vaadin-app-layout-flow}\[Flow {moduleMavenVersion:com.vaadin:vaadin-app-layout-flow}], \
https://github.com/vaadin/vaadin-app-layout/releases/tag/v{moduleNpmVersion:vaadin-app-layout}\[Web Component {moduleNpmVersion:vaadin-app-layout}]
section-nav: incomplete
---

= App Layout

// tag::description[]
App Layout is a component for building common application layouts.
// end::description[]

.Scaled down examples
[IMPORTANT]
The examples on this page are scaled down so that their viewport-size dependant behavior can be demonstrated.
Some examples change their behavior also based on your browser viewport size.

++++
<style>
/* absolute positioning is needed in Chrome for iframes
  to clip the contents inside the border-radius */

/* Aim for 16:9 aspect ratio for "desktop" examples */
.example:not(.mobile) .render {
  position: relative;
  padding: 0;
  padding-top: 52%;
  min-height: 0 !important;
  border: 1px solid var(--docs-divider-color-2);
  border-radius: 0;
  margin: var(--docs-space-s);
  margin-bottom: var(--docs-space-xs);
}

.example {
  /* Just enough to keep "desktop" mode when docs are at max-width */
  --scale: 0.58;
}

/* Examples that want to keep stay in "desktop" mode on all viewport sizes */
@media (max-width: 1260px) {
  .example.desktop {
    --scale: 0.495;
  }
}

@media (max-width: 960px) {
  .example.desktop {
    --scale: 0.47;
  }
}

@media (max-width: 580px) {
  .example.desktop {
    --scale: 0.28;
  }
}

.example:not(.mobile) iframe {
  position: absolute;
  border-radius: 5px;
  transform: scale(var(--scale));
  max-width: calc(100% / var(--scale)) !important;
  width: calc(100% / var(--scale)) !important;
  height: calc(100% / var(--scale));
  transform-origin: 0 0;
  top: 0;
  left: 0;
}

/* Aim for "standard" portrait phone dimensions */
.example.mobile .render {
  min-height: 0 !important;
  width: 256px;
  height: 510px;
  padding: 0;
  margin: 0 auto;
  background: transparent;
}

.example.mobile iframe {
  position: absolute;
  width: 320px !important;
  height: 620px;
  overflow: hidden;
  transform: scale(0.75);
  transform-origin: 32px 120px;
  border-radius: 32px;
  box-shadow: 0 0 0 10px black, 0 3px 22px black;
}
</style>
++++

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/app-layout/app-layout-basic.ts[render, frame, tags=snippet, indent=0, group=TypeScript]
----
--

The layout consists of three sections: a horizontal navigation bar (*navbar*), a collapsible navigation drawer (*drawer*) and a content area.
An application’s main navigation blocks should be positioned in the navbar and/or drawer while views are rendered in the content area.

App Layout is responsive and adjusts automatically to fit desktop, tablet and mobile screen sizes.

== Navbar Placement

The navbar can be located on top or to the side of the drawer.

When put on top, the navbar is typically used as an application header.
Application headers contain, for example, the application’s name and branding as well as actions that apply to the entire application such as notifications, settings, etc.

[.example.desktop]
--

[source,typescript]
----
include::{root}/frontend/demo/component/app-layout/app-layout-navbar-placement.ts[render, frame, tags=snippet, indent=0, group=TypeScript]
----
--

When placed to the side, the navbar is often seen as a view header, housing the view’s title, actions and secondary navigation that only relate to the current view.

[.example.desktop]
--

[source,typescript]
----
include::{root}/frontend/demo/component/app-layout/app-layout-navbar-placement-side.ts[render, frame, tags=snippet, indent=0, group=TypeScript]
----
--

== Drawer Toggle

Show and hide the drawer using a Drawer Toggle (or a Button).
The Drawer Toggle (☰) should always be accessible (unless the drawer is empty) and is most often situated in the navbar.

== Scrolling Behaviour

Mobile browsers will collapse and expand their address bars when the user scrolls down and up respectively.
On iOS you can tap the status bar (signal strength, battery, clock, etc) to scroll back to the top of the page/view.
To enable this effect, neither the App Layout or its parent should have their heights defined.

.Scrolling containers with 100% height
[NOTE]
This behaviour is not compatible with vertically scrollable Grids, or other scrolling containers within the content area, whose height is 100%.

== Bottom Navbar on Small Touchscreens

When the navbar is used for navigation, the *touch-optimized navbar* slot can be used to provide a separate version of the navigation at the bottom of the UI, optimized for mobile phones.

[.example.mobile]
--

[source,typescript]
----
include::{root}/frontend/demo/component/app-layout/app-layout-bottom-navbar.ts[render, frame, tags=snippet, indent=0, group=TypeScript]
----
--

== Best Practices

=== Navbar vs Drawer

Make the choice between navbar and drawer primarily based on the number of items placed in it.

The navbar is a good choice for a small number of items (3–5), as these can fit into the viewport without scrolling.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/app-layout/app-layout-navbar.ts[render, frame, tags=snippet, indent=0, group=TypeScript]
----
--

When more items need to be displayed, or if small screen support is a priority, the drawer is a better choice, as it can accommodate a longer list of links without scrolling, and collapses into a hamburger menu on small screens.
Furthermore, a vertical list of items is easier for the user to scan.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/app-layout/app-layout-drawer.ts[render, frame, tags=snippet, indent=0, group=TypeScript]
----
--

For applications that require multilevel or hierarchical navigation use the drawer to (at least) house the first level.
The secondary (and tertiary) navigation items can be placed in either the drawer or the navbar.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/app-layout/app-layout-secondary-navigation.ts[render, frame, tags=snippet, indent=0, group=TypeScript]
----
--

.Work in progress
[NOTE]
====
The usage examples for this component are in progress.
In the meantime, you can view the previous examples for the web component and the Java/Flow component.

[.buttons]
- https://vaadin.com/components/vaadin-app-layout/html-examples[Web Component Examples]
- https://vaadin.com/components/vaadin-app-layout/java-examples[Java Component Examples]
====
