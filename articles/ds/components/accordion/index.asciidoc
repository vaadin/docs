---
title: Accordion
layout: tabbed-page
tab-title: Usage
page-links: \
https://github.com/vaadin/vaadin-flow-components/releases/tag/{moduleMavenVersion:com.vaadin:vaadin-accordion-flow}\[Flow {moduleMavenVersion:com.vaadin:vaadin-accordion-flow}], \
https://github.com/vaadin/vaadin-accordion/releases/tag/v{moduleNpmVersion:vaadin-accordion}\[Web Component {moduleNpmVersion:vaadin-accordion}]
---

= Accordion

// tag::description[]
Accordion is a vertically stacked set of expandable panels.
It reduces clutter and helps maintain the user’s focus by showing only the relevant content at a time.
// end::description[]

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/accordion/accordion-basic.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source, java]
----
include::{root}/src/main/java/com/vaadin/demo/component/accordion/AccordionBasic.java[render,tags=snippet,indent=0,group=Java]
----
--

== Anatomy

Accordion consists of stacked panels, each composed of two parts: a summary and a content area.
Only one panel can be expanded at a time.
(The <<../details#,Details>> component can be used to allow multiple simultaneously expanded sections.)

=== Summary

The summary is the part that is always visible, and typically describes the contents, for example, with a title.
Clicking on the summary toggles the content area’s visibility.

The summary supports rich content and can contain any component.
This can be utilized, for example, to display the status of the corresponding content.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/accordion/accordion-summary.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source, java]
----
include::{root}/src/main/java/com/vaadin/demo/component/accordion/AccordionSummary.java[render,tags=snippet,indent=0,group=Java]
----
--

=== Content

This is the collapsible part of a panel.
It can contain any component.
When the content area is collapsed, the content is invisible and inaccessible by keyboard or screen reader.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/accordion/accordion-content.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source, java]
----
include::{root}/src/main/java/com/vaadin/demo/component/accordion/AccordionContent.java[render,tags=snippet,indent=0,group=Java]
----
--

== Theme Variants

Accordion has three theme variants: `filled`, `small` and `reverse`.
Set the theme attribute separately for each panel, not on Accordion itself.
Theme names can be combined with each other, for example, all three themes `filled`, `small`, and `reverse` can be applied to a panel.

// TODO example would be nice to have

=== Filled Panels

The `filled` theme variant makes the panel’s boundaries visible, which helps tie its content together visually and distinguishes it from the surrounding UI.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/accordion/accordion-filled-panels.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source, java]
----
include::{root}/src/main/java/com/vaadin/demo/component/accordion/AccordionFilledPanels.java[render,tags=snippet,indent=0,group=Java]
----
--

=== Small Panels

Use the `small` theme variant for compact UIs.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/accordion/accordion-small-panels.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source, java]
----
include::{root}/src/main/java/com/vaadin/demo/component/accordion/AccordionSmallPanels.java[render,tags=snippet,indent=0,group=Java]
----
--

=== Reverse Panels

The `reverse` theme variant places the toggle icon after the summary contents, which can be useful for visually aligning the summary with other content.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/accordion/accordion-reverse-panels.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source, java]
----
include::{root}/src/main/java/com/vaadin/demo/component/accordion/AccordionReversePanels.java[render,tags=snippet,indent=0,group=Java]
----
--

== Disabled Panels

Accordion panels can be disabled to prevent them from being expanded or collapsed.
Details can be disabled to prevent them from being expanded or collapsed.
Components inside a disabled expanded panel are automatically disabled as well.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/accordion/accordion-disabled-panels.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source, java]
----
include::{root}/src/main/java/com/vaadin/demo/component/accordion/AccordionDisabledPanels.java[render,tags=snippet,indent=0,group=Java]
----
--

== Best Practices
* Accordions are suitable when users need to focus on smaller pieces of content at a time.
However, when the whole content is relevant to the user to make a decision, Accordions should be avoided.
* Contents that are logically linked should be grouped together in one panel.
* Accordions are better suited for long labels compared to Tabs.
However, Accordions can feel “jumpy” as panels are toggled (if there are a lot of panels or the panel content is long).
* Details can be used instead of Accordion when there is a need to see content from multiple panels simultaneously.
* Accordions can be used to break a complex form into smaller step-by-step sections.


== Related Components

[cols="1,2"]
|===
|Component |Usage recommendations

|<<../details#,Details>>|Single collapsible panel.

|<<../tabs#,Tabs>>|Component for organizing and grouping content into navigable sections.
|===
