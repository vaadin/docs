---
title: Login
layout: tabbed-page
tab-title: Usage
page-links: \
https://github.com/vaadin/vaadin-flow-components/releases/tag/{moduleMavenVersion:com.vaadin:vaadin-login-flow}\[Flow {moduleMavenVersion:com.vaadin:vaadin-login-flow}], \
https://github.com/vaadin/vaadin-login/releases/tag/v{moduleNpmVersion:vaadin-login}\[Web Component {moduleNpmVersion:vaadin-login}]
section-nav: incomplete
---

= Login

// tag::description[]
Login is a component that contains a login form.
You can use it for authenticating the user with a username and password.
It is compatible with password managers, supports internationalization and works on all device sizes.
// end::description[]

.Work In Progress
[NOTE]
====
The usage examples for this component are currently in progress.
In the meantime, you can view the previous examples for the web component and the Java/Flow component.

[.buttons]
- https://vaadin.com/components/vaadin-login/html-examples[Web Component Examples]
- https://vaadin.com/components/vaadin-login/java-examples[Java Component Examples]
====

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/login/login-basic.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source, java]
----
include::{root}/src/main/java/com/vaadin/demo/component/login/LoginBasic.java[render,tags=snippet,indent=0,group=Java]
----
--

== Basic Login Component/Form

The basic Login component consists of a title (*Log in*), two input fields (*Username* and *Password*), and two buttons (*Log in* and *Forgot password*).

You can customize the form’s title and labels using internationalization.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/login/login-internationalization.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source, java]
----
include::{root}/src/main/java/com/vaadin/demo/component/login/LoginInternationalization.java[render,tags=snippet,indent=0,group=Java]
----
--

The basic Login component can be used to create login pages featuring rich content.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/login/login-rich-content.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source, java]
----
include::{root}/src/main/java/com/vaadin/demo/component/login/LoginRichContent.java[render,tags=snippet,indent=0,group=Java]
----
--

.Password managers
[NOTE]
Login is incompatible with password managers if placed inside another component’s footnote:[When added to a web component that uses shadow root, password managers are unable to find the input fields and thus not work.] shadow root.
This is not an issue when using Login’s modal overlay.

== Modal Overlay

Login features its own modal overlay.
Use it to create simple login pages (that are full screen on mobile devices) or to handle authentication without a dedicated login page.
You can also use it to handle re-authentication when the user’s session has expired.

The overlay can be opened programmatically or through user interaction, for example, by using a login button.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/login/login-modal-overlay.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source, java]
----
include::{root}/src/main/java/com/vaadin/demo/component/login/LoginModalOverlay.java[render,tags=snippet,indent=0,group=Java]
----
--

=== Header

The overlay has a header and the login form.
By default, the header contains placeholders for the application’s title and description.
Both properties are configurable.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/login/login-modal-overlay-header.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source, java]
----
include::{root}/src/main/java/com/vaadin/demo/component/login/LoginModalOverlayHeader.java[render,tags=snippet,indent=0,group=Java]
----
--

The header is fully customizable.
It supports rich content and can contain any component.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/login/login-modal-overlay-header-customisation.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source, java]
----
include::{root}/src/main/java/com/vaadin/demo/component/login/LoginModalOverlayHeaderCustomisation.java[render,tags=snippet,indent=0,group=Java]
----
--

== Validation

Login shows an error message when authentication fails.
The error message consists of a title and a message.
It is displayed directly underneath the form’s title.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/login/login-validation.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source, java]
----
include::{root}/src/main/java/com/vaadin/demo/component/login/LoginValidation.java[render,tags=snippet,indent=0,group=Java]
----
--

The error message is customizable using internationalization.
It should contain instructions on how to resolve the problem.

More information can also be provided to the user, for example, by linking to a page with helpful material or by displaying contact information.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/login/login-additional-information.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source, java]
----
include::{root}/src/main/java/com/vaadin/demo/component/login/LoginAdditionalInformation.java[render,tags=snippet,indent=0,group=Java]
----
--

== Internationalization (i18n)

Login’s titles, descriptions, labels, and messages are all customizable using internationalization.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/login/login-overlay-internationalization.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source, java]
----
include::{root}/src/main/java/com/vaadin/demo/component/login/LoginOverlayInternationalization.java[render,tags=snippet,indent=0,group=Java]
----
--

=== Header

The header is only shown for modal login forms.

|===
|Property |Default value

|Title
|_"App name"_

|Description
|_"Application description"_
|===

=== Form

Customize the form’s title, input field and button labels.

|===
|Property |Default value

|Title
|_"Log in"_

|Username
|_"Username"_

|Password
|_"Password"_

|Submit
|_"Log in"_

|Forgot password
|_"Forgot password"_
|===

=== Error Message

Login’s error message is shown when authentication fails.
It consists of a title and message.

|===
|Property |Default value

|Title
|_"Incorrect username or password"_

|Message
|_"Check that you have entered the correct username and password and try again."_
|===

pass:[<!-- vale Vaadin.TooWordy = NO -->]

=== Additional Information

This property is hidden unless its value is explicitly set.

|===
|Property |Default value

|Additional information
|_"In case you need to provide some additional info for the user."_

|===

pass:[<!-- vale Vaadin.TooWordy = YES -->]

== Technical

=== Handling Events

==== Login Event

You can add a listener to login events and/or define an action for which a POST request is fired.
From the event, you can prevent the POST request.

The login button is disabled when clicked to prevent multiple submissions.
To restore it, call `component.setEnabled(true)`.

==== Forgot Password

You can add an event listener so you can provide instructions for password recovery for your users.
