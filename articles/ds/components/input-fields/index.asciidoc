---
title: Input Fields
---

= Input Fields

The following features are available in all <<input-field-components,input field components>>.

== Label

An input field should generally have a label for identifying it.
Labels should be clear, concise, and written in sentence case.
Avoid unclear and verbose language.
Use <<helper,helper texts>> to provide more guidance.

[.example]
--
[source,html]
----
include::{root}/frontend/demo/component/inputfields/input-field-label.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/inputfields/InputFieldLabel.java[render,tags=snippet,indent=0,group=Java]
----
--

In situations where enough context is provided, such as grid filters and search fields, labels can be omitted; in these cases an aria-label attribute should be provided instead to identify the field, so that users of assistive technologies can interpret the input correctly.
Icons and placeholders can be used in addition to a label or aria-label to help convey a field’s purpose and usage:

[.example]
--
[source,html]
----
include::{root}/frontend/demo/component/inputfields/input-field-aria-label.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/inputfields/InputFieldAriaLabel.java[render,tags=snippet,indent=0,group=Java]
----
--

[role="since:com.vaadin:vaadin@V18"]
== Helper

Helpers provide information when needed so that end users can fill in a form or field without errors.
They are helpful, for example, when the field requires a specific format.
Helpers typically consist of plain text but HTML and other components are also supported.

[.example]
--
[source,html]
----
include::{root}/frontend/demo/component/inputfields/input-field-helper.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/inputfields/InputFieldHelper.java[render,tags=snippet,indent=0,group=Java]
----
--

Helpers are preferable to tooltips since the latter are not accessible by assistive technologies such as screen readers nor available for touch screen users.

=== Helper Position

The helper can be shown above the field.

[.example]
--
[source,html]
----
include::{root}/frontend/demo/component/inputfields/input-field-helper-position.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/inputfields/InputFieldHelperPosition.java[render,tags=snippet,indent=0,group=Java]
----
--

Showing the helper before the field can be a better choice.
It is more likely to be visible on small viewport sizes when the field is focused, and screen reader users can read the instructions before entering the field.

Use the same helper position across the entire application for consistency.

== Required

Input fields can either be optional or required.
Optional fields are typically left unmarked.
In the Vaadin's default theme, Lumo, required fields are marked with a bullet character.
It's recommended to provide hint text to inform users of how required fields are marked:

[.example]
--
[source,html]
----
include::{root}/frontend/demo/component/inputfields/input-field-required.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/inputfields/InputFieldRequired.java[render,tags=snippet,indent=0,group=Java]
----
--

The required indicator is only shown when the field is empty.

=== Marking Required & Optional Fields

If most of the fields in a form are optional, mark the required ones.
When a form has more required than optional fields, mark the optional ones by adding a “(optional)” suffix to their labels.

A consistent experience is key to providing a good user experience, so be careful not to mix but rather match whether optional or required fields are marked in different forms.

== Non-Editable Fields

In some cases, the user is not allowed to edit the value of certain fields.
Those fields can read-only or disabled.
Choose the suitable one depending on the situation.

=== Read-Only

[.example]
--
[source,html]
----
include::{root}/frontend/demo/component/inputfields/input-field-read-only.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/inputfields/InputFieldReadonly.java[render,tags=snippet,indent=0,group=Java]
----
--

Set a field as read-only when the content needs to be accessible but not editable.
Read-only elements cannot be edited, but they are in the tabbing order and can thus receive focus.
The contents of a read-only input can be selected and copied.

=== Disabled

[.example]
--
[source,html]
----
include::{root}/frontend/demo/component/inputfields/input-field-disabled.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/inputfields/InputFieldDisabled.java[render,tags=snippet,indent=0,group=Java]
----
--

Disable a field to mark it as unavailable.
The disabled state is used for fields that are not editable and do not need to be readable.
Disabled elements cannot be focused and may be inaccessible to assistive technologies like screen readers.

Disabling can be preferable to hiding an element to prevent changes in layout when the element’s visibility changes, and to make users aware of its existence even when currently unavailable.

If the user needs to be able to read (or copy) the value, use read-only instead.

== Focus

Focus styles are used to highlight the active element, which is useful for keyboard navigation.

[source,html, role=render-only]
----
include::{root}/frontend/demo/component/inputfields/input-field-focus.ts[render,tags=snippet,indent=0]
----

Please note that the focus style is different for keyboards and pointing devices:

[source,html, role=render-only]
----
include::{root}/frontend/demo/component/inputfields/input-field-focus-styles.ts[render,tags=snippet,indent=0]
----

== Input Field Components

Vaadin offers different components for different types of input:

[cols="1,2"]
|===
|Component |Usage recommendations

|<<../text-field#,Text Field>>
|Basic single-line text input.

|<<../text-area#,Text Area>>
|Multi-line text input, for values that can’t be expected to fit on a single line, or when manual line breaks need to be supported.

|<<../email-field#,Email Field>>
|For email addresses.

|<<../number-field#,Number Field>>
|Numeric-only input such as counts, measures, or monetary values.

|<<../password-field#,Password Field>>
|Optionally masked password entry.

|<<../date-picker#,Date Picker>>
|Date entry with keyboard or a calendar picker.

|<<../time-picker#,Time Picker>>
|Selecting a time of day; resolution range from hours to milliseconds.

|<<../date-time-picker#,Date Time Picker>>
|Combined date and time entry.

|<<../radio-button#,Radio Button>>
|Select a single option from a list. Optimal accessibility, as all options are visible without any user action.

|<<../select#,Select>>
|Select a value from an overlay. More compact than Radio Buttons.

|<<../combo-box#,Combo Box>>
|Select a value from a filterable overlay. Appropriate for large sets of options. Supports lazy loading and entry of custom values.

|<<../checkbox#,Checkbox>>
|For selecting multiple options from a list, or a single binary toggle.
|===
