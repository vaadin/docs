---
title: Select
page-links:
  - 'API: https://cdn.vaadin.com/vaadin-web-components/{moduleNpmVersion:vaadin-select}/#/elements/vaadin-select[TypeScript] / https://vaadin.com/api/platform/{moduleMavenVersion:com.vaadin:vaadin}/com/vaadin/flow/component/select/Select.html[Java]'
  - 'Source: https://github.com/vaadin/web-components/tree/v{moduleNpmVersion:vaadin-select}/packages/vaadin-select[TypeScript] / https://github.com/vaadin/flow-components/tree/{moduleMavenVersion:com.vaadin:vaadin}/vaadin-select-flow-parent[Java]'
---

= Select

// tag::description[]
Select allows users to choose a single value from a list of options presented in an overlay.
// end::description[]

[.example]
--
[source,typescript]
----
include::{root}/frontend/demo/component/select/select-basic.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/select/SelectBasic.java[render,tags=snippet,indent=0,group=Java]
----

--

The dropdown can be opened with a click, up/down arrow keys, or by typing the initial character for one of the options.

:component-name: Select
:text-field-features: true
include::../_shared.asciidoc[tag=field-features]

== Dividers

Dividers can be used to group related options.
Use dividers sparingly to avoid creating unnecessary visual clutter.

[.example]
--
[source,typescript]
----
include::{root}/frontend/demo/component/select/select-dividers.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/select/SelectDividers.java[render,tags=snippet,indent=0,group=Java]
----
--

.Use Combo Box for long lists
[NOTE]
Please note that for large data sets it is preferable to use Combo Box instead of Select, as it allows users to filter the list of options.

== Disabled Items

Items can be disabled.
This prevents users from selecting them, while still showing that these items would be available for selection under different circumstances.

[.example]
--
[source,typescript]
----
include::{root}/frontend/demo/component/select/select-disabled.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/select/SelectDisabled.java[render,tags=snippet,indent=0,group=Java]
----
--

.Accessibility
[CAUTION]
Some assistive technologies might not announce disabled options.

== Placeholder

Use the placeholder feature to provide an inline text prompt for the field. Do not create, or use, a separate item for this purpose.

[.example]
--
[source,typescript]
----
include::{root}/frontend/demo/component/select/select-placeholder.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/select/SelectPlaceholder.java[render,tags=snippet,indent=0,group=Java]
----
--

== Empty Selection Item (Flow Only)

An empty item can be set as the first option.
Use it in cases where you want to allow users to clear their selection.
The value of the empty item is represented as `null`.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/select/select-empty-selection.ts[preimport,hidden]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/select/SelectEmptySelection.java[render,tags=snippet,indent=0,group=Java]
----
--

=== Customizing Empty Selection Caption

The label for the empty item is customizable.

The caption set replaces the placeholder for the empty selection item.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/select/select-empty-selection-caption.ts[preimport,hidden]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/select/SelectEmptySelectionCaption.java[render,tags=snippet,indent=0,group=Java]
----
--

== Custom Item Label

When using complex values, a label can be set to represent the item value as plain text.

[.example]
--
[source,html]
----
include::{root}/frontend/demo/component/select/select-complex-value-label.ts[render,tags=snippet,indent=0,group=TypeScript]
----
[source,typescript]
----
include::{root}/frontend/generated/com/vaadin/demo/domain/Person.ts[group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/select/SelectComplexValueLabel.java[render,tags=snippet,indent=0,group=Java]
----
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/domain/Person.java[group=Java,tags=*,indent=0]
----
--

When using custom item renderers with rich content, a label can be set to represent the item value when it is selected.

[.example]
--
include::../_shared.asciidoc[tag=guard-directive-note]

[source,html]
----
include::{root}/frontend/demo/component/select/select-custom-renderer-label.ts[render,tags=snippet,indent=0,group=TypeScript]
----
[source,typescript]
----
include::{root}/frontend/generated/com/vaadin/demo/domain/Person.ts[group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/select/SelectCustomRendererLabel.java[render,tags=snippet,indent=0,group=Java]
----
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/domain/Person.java[group=Java,tags=*,indent=0]
----
--

.Flow-specific
[NOTE]
====
When using `setItemLabelGenerator` in combination with `setEmptySelectionAllowed`, ensure that the implementation is capable of handling null values, as the empty selection item has the value `null`.

[.example]
--
[source,java]
----
select.setEmptySelectionAllowed(true);
select.setItemLabelGenerator(person -> {
  if (person == null) {
      return "No assignee";
  }
  return person.getFullName();
});
----
--

The same applies when using a data source that may contain null values.
====

== Custom Item Presentation

Items can be rendered with rich content instead of plain text.
This can be useful to provide information in a more legible fashion than appending it to the item text.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/select/select-presentation.ts[render,tags=snippet,indent=0,group=TypeScript]

...

include::{root}/frontend/demo/component/select/select-presentation.ts[tags=renderer,indent=0]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/select/SelectPresentation.java[render,tags=snippet,indent=0,group=Java]
----
--

== Best Practices

=== Set a Default Value

When applicable, set the most common choice as the default value.

=== Do Not Use as a Menu

Select is an input field component, not a generic menu component.
Use <<../menu-bar#,Menu Bar>> to create overlays for actions.

== Related Components

[cols="1,2"]
|===
|Component |Usage recommendations

|<<../radio-button#,Radio Button>>|Better accessibility than Select, as all options are visible without user interaction.

|<<../combo-box#,Combo Box>>|Filterable list of options.
Appropriate for large sets of options.
Supports lazy loading entry of custom values.

|<<../list-box#,List Box>>|Scrollable inline list of options.
Supports single and multi-select.

|<<../menu-bar#,Menu Bar>>|Overlay menus for items that trigger actions.
|===
