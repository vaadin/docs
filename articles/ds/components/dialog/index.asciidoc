---
title: Dialog
page-links:
  - 'API: https://cdn.vaadin.com/vaadin-dialog/{moduleNpmVersion:vaadin-dialog}/#/elements/vaadin-dialog[Web Component] / https://vaadin.com/api/platform/{moduleMavenVersion:com.vaadin:vaadin}/com/vaadin/flow/component/dialog/Dialog.html[Java]'
  - 'Source: https://github.com/vaadin/vaadin-dialog[Web Component] / https://github.com/vaadin/flow-components/tree/{moduleMavenVersion:com.vaadin:vaadin}/vaadin-dialog-flow-parent[Java]'
---

= Dialog

// tag::description[]
Dialog is a small window that can be used to present information and user interface elements in an overlay.
// end::description[]


// Custom style additions for the examples, that combine two renders together
include::../_shared.asciidoc[tag=merge-examples]


[.example.render-only.merge]
--
[source,typescript]
----
include::{root}/frontend/demo/component/dialog/dialog-basic-preview.ts[render]
----
--

[.example]
--
[source,typescript]
----
include::{root}/frontend/demo/component/dialog/dialog-basic.ts[preimport,hidden]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/dialog/DialogBasic.java[render,tags=snippet,indent=0]
----
--

== Modality
A modal Dialog blocks the user from interacting with the rest of the user interface while the Dialog is open, as opposed to a non-modal Dialog which does not block interaction.

Dialogs are modal by default.

Use modal Dialogs for:

* Displaying important information, like system errors
* Requesting user input as part of a workflow, for example, an edit Dialog
* Confirmation of irreversible actions, such as deleting data (Confirm Dialog is a convenient alternative for these use cases)
* Breaking out sub-tasks into a separate user interface

Use non-modal Dialogs:

* When the user needs access to the content below the Dialog
* For less critical, optional, and/or support tasks

[.example]
--
[source,java]
----
Dialog dialog = new Dialog();
button.setModal(false);
----
--

Non-modal Dialogs should in most cases be draggable, so that the user can move them to access the user interface beneath.

== Draggable

Dialogs can be made draggable, enabling the user to move them around using a pointing device.

It is recommended to make non-modal Dialogs draggable so that the user can interact with content that might otherwise be obscured by the Dialog.
For example, a Dialog for taking notes, or adding widgets to a dashboard using drag and drop, can offer a better experience by allowing the user to move the Dialog around.

Modal Dialogs don't benefit from being draggable as their modality curtain (the dark overlay behind the dialog) obscures the underlying user interface.

[.example]
--
[source,typescript]
----
include::{root}/frontend/demo/component/dialog/dialog-draggable.ts[preimport,hidden]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/dialog/DialogDraggable.java[render,tags=snippet1,indent=0]

...

include::{root}/src/main/java/com/vaadin/demo/component/dialog/DialogDraggable.java[render,tags=snippet2,indent=0]
----
--

By default, the outer edges of a Dialog, as well as the space between its components, can be used to move the Dialog around.

Any component contained within a Dialog can be marked and used as a drag handle by applying the `draggable` class name to it.
You can choose whether or not to make the component's content draggable as well, or just the component itself.

== Resizable

A resizable Dialog allows the user to resize the Dialog by dragging from the edges of the Dialog with a pointing device.
Dialogs are not resizable by default.

Dialogs containing dynamic content and/or a lot of information, such as complex forms or Grids, can benefit from being resizable as it offers the user some flexibility as to how much data is visible at once.
It also gives the user control over which part of the underlying user interface is obscured.

Dialogs that contain very little or compact information do not need to be resizable.

[.example]
--
[source,typescript]
----
include::{root}/frontend/demo/component/dialog/dialog-resizable.ts[preimport,hidden]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/dialog/DialogResizable.java[render,tags=snippet,indent=0]
----
--

== Closing

Modal Dialogs are closable in three ways:

. Pressing the kbd:[Esc] key
. Clicking outside the Dialog
. Programmatically, for example through the click of a Button

Providing an explicit button for closing a Dialog is recommended.

[.example]
--
[source,typescript]
----
include::{root}/frontend/demo/component/dialog/dialog-closing.ts[preimport,hidden]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/dialog/DialogClosing.java[render,tags=snippet,indent=0]
----
--

== Layout and Scrolling
Dialogs automatically become scrollable when their content overflows.
Custom scrollable areas can be created using the <<../scroller#,Scroller>> component.

// TODO: restore after no-padding theme is available in 14.x
////
=== Removing the Padding
The Dialog's built-in padding can be removed by applying the `no-padding` theme variant, for example to create headers or footers that use the full width of the dialog.

[.example]
--
[source,typescript]
----
include::{root}/frontend/demo/component/dialog/dialog-no-padding.ts[preimport,hidden]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/dialog/DialogNoPadding.java[render,tags=snippet,indent=0]
----

[source,css]
----
include::{root}/frontend/themes/docs/dialog.css[tags=dialog-no-padding,indent=0]
----
--
////

== Best Practises

=== Use Sparingly

Dialogs are disruptive by nature and should be used sparingly.
Do not use them to communicate nonessential information, such as success messages like “Logged in”, “Copied”, and so on.
Instead, use <<../notification#,Notifications>> when appropriate.

=== Button Placement

See <<../button#buttons-in-dialogs, Buttons in Dialogs>>.

== Related Components

|===
|Component |Usage recommendations

|<<../confirm-dialog#,Confirm Dialog>>|Dialog for confirming user actions and decisions

|===
