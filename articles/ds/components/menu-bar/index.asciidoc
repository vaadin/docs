---
title: Menu Bar
page-links:
  - 'API: https://cdn.vaadin.com/vaadin-web-components/{moduleNpmVersion:vaadin-menu-bar}/#/elements/vaadin-menu-bar[TypeScript] / https://vaadin.com/api/platform/{moduleMavenVersion:com.vaadin:vaadin}/com/vaadin/flow/component/menubar/MenuBar.html[Java]'
  - 'Source: https://github.com/vaadin/web-components/tree/v{moduleNpmVersion:vaadin-menu-bar}/packages/vaadin-menu-bar[TypeScript] / https://github.com/vaadin/flow-components/tree/{moduleMavenVersion:com.vaadin:vaadin}/vaadin-menu-bar-flow-parent[Java]'
---

= Menu Bar

// tag::description[]
Menu Bar is a horizontal button bar with hierarchical drop-down menus.
// end::description[]
Menu items can either trigger an action, open a menu, or work as a toggle.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/menubar/menu-bar-basic.ts[render,tags=snippet;snippethtml,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/menubar/MenuBarBasic.java[render,tags=snippet,indent=0,group=Java]
----

--

== Styles

The following variants are available for adjusting the component’s appearance:

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/menubar/menu-bar-styles.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/menubar/MenuBarStyles.java[render,tags=snippet,indent=0,group=Java]
----

--

|===
|Variant |Usage recommendations

|Tertiary
|Corresponds to the <<../button#styles,tertiary button variant>>, omitting the background color.

|Primary
|Corresponds to the primary button variant.
As only one primary action should be presented in the same part of the UI, this should only be used for <<#drop-down-and-combo-buttons,drop-down button use cases>>.

|Small
|Compact variant.
Can be combined with Tertiary and Primary.
|===

.Default menu button styles can be customized
[TIP]
Note that the standard Menu Button styles can be adjusted using <<../../foundation/color#,theme features>>, so these variants should only be used to differentiate special instances of the component.

== Overflow

Items that don’t fit into the current width of the menu bar automatically collapse into an overflow menu at the end:

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/menubar/menu-bar-overflow.ts[render,tags=snippet;snippethtml,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/menubar/MenuBarOverflow.java[render,tags=snippet,indent=0,group=Java]
----

--

== Menu Item Features

=== Icons

Menu items can have icons in addition to, or instead of text.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/menubar/menu-bar-icons.ts[render,tags=snippet;snippethtml,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/menubar/MenuBarIcons.java[render,tags=snippet,indent=0,group=Java]

...

include::{root}/src/main/java/com/vaadin/demo/component/menubar/MenuBarIcons.java[render,tags=createIcon,indent=0,group=Java]
----

--

Usage recommendations:

* *Use icons sparingly*. Most actions are difficult to reliably represent with icons, and the benefit of icons in addition to text should be weighed against the additional visual noise this creates.
* Menu items in dropdown menus should always have text labels.
* *Icon-only* menu buttons should be primarily used for *extremely common recurring actions* with highly standardized, universally understood icons (for example, a cross for close).
* *Icon-only* menu buttons should provide a *textual alternative for screen readers* using the `aria-label` attribute.

Menu Bars with icon-only top-level items can use the *Tertiary Inline* style variant to reduce the horizontal padding around the icons.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/menubar/menu-bar-icon-only.ts[render,tags=snippet;snippethtml,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/menubar/MenuBarIconOnly.java[render,tags=snippet,indent=0,group=Java]

...

include::{root}/src/main/java/com/vaadin/demo/component/menubar/MenuBarIconOnly.java[render,tags=createIcon,indent=0,group=Java]
----
--

.Other components in menu items
[WARNING]
While it’s technically possible to put _any_ UI element in a menu item, this can be problematic in terms of accessibility, as they cannot be focused and may not be correctly interpreted by assistive technologies.

=== Disabled Items

Menu items can be disabled to indicate that they are currently unavailable.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/menubar/menu-bar-disabled.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/menubar/MenuBarDisabled.java[render,tags=snippet,indent=0,group=Java]
----

--

=== Checkable Menu Items

Menu items in drop-down menus can be configured as checkable, for toggling options on and off.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/menubar/menu-bar-checkable.ts[render,tags=snippet;snippethtml;snippetselected,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/menubar/MenuBarCheckable.java[render,tags=snippet,indent=0,group=Java]
----

--

.Not a replacement for radio buttons
[NOTE]
A Menu Bar with checkable items should not be used as a replacement for <<../radio-button#,radio buttons>> in a form.

== Dividers

You can use dividers to separate and group related content.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/menubar/menu-bar-dividers.ts[render,tags=snippet;snippethtml,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/menubar/MenuBarDividers.java[render,tags=snippet,indent=0,group=Java]
----

--

Use dividers sparingly to avoid creating unnecessary visual clutter.

.Content other than menu items not accessible
[WARNING]
While it’s technically possible to put any UI element in a drop-down menu, including interactive components, they will not be accessible by keyboard or assistive technologies.

== Open on Hover

The component can be configured to open drop-down menus on hover instead of on click.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/menubar/menu-bar-open-on-hover.ts[render,tags=snippet;snippethtml,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/menubar/MenuBarOpenOnHover.java[render,tags=snippet,indent=0,group=Java]
----

--

== Keyboard Usage

=== Top-Level Items

|===
|Interaction |Keyboard Shortcut

|Navigate between top-level items
|kbd:[left] and kbd:[right] arrow keys

|Open top-level menu
|kbd:[down] / kbd:[space] / kbd:[enter]

|Trigger top-level item with a menu
|kbd:[space] / kbd:[enter]
|===

=== Menu-Items

|===
|Interaction |Keyboard Shortcut

|Navigate between items in a dropdown menu
|kbd:[top] and kbd:[down] arrow keys

|Open sub-menu
|kbd:[right] / kbd:[space] / kbd:[enter]

|Trigger menu item without a sub-menu
|kbd:[space] / kbd:[enter]

|Return to previous menu
|kbd:[left]

|Close the drop-down menu
|kbd:[esc]
|===

== Drop-Down and "Combo" Buttons

A Menu Bar with a single top-level item is essentially a drop-down button.
This solution provides a better user experience and better accessibility than a regular <<../button#,Button>> paired with a <<../context-menu#,Context Menu>>.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/menubar/menu-bar-drop-down.ts[render,tags=snippet;snippethtml,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/menubar/MenuBarDropDown.java[render,tags=snippet,indent=0,group=Java]
----

--

So-called “combo buttons” can be created in a similar way, for example to provide a set of variations on an action.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/menubar/menu-bar-combo-buttons.ts[render,tags=snippet;snippethtml,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/menubar/MenuBarComboButtons.java[render,tags=snippet,indent=0,group=Java]
----

--

== Best Practices

* Menu Bar should not be used for navigation. Use <<../tabs#,tabs>> for switching between content, or anchor elements for regular navigation.
* Menu Bar is not an input field. Use <<../select#,Select>>, <<../combo-box#,Combo Box>>, or <<../radio-button#,Radio Button>> instead.

== Related Components

|===
|Component |Usage recommendations

|<<../button#,Button>>
|Regular Button component for individual actions.

|<<../select#,Select>>
|Drop-down input field.

|<<../tabs#,Tabs>>
|Tabs should be used to split content into sections that the user can switch between.

|<<../context-menu#,Context Menu>>
|A generic drop-down menu that can be triggered from any component.
|===
