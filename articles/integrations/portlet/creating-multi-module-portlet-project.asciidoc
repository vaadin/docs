---
title: Multi-Module Portlet Project
order: 5
description: How to create a multi-module Vaadin Portlet Maven project in which each portlet is in its own module, and front-end assets are in one module.
---


= Creating a Multi-Module Portlet Project

It's possible to configure a Vaadin Portlet project as a multi-module Maven project. This allows each portlet to be placed into its own module, allowing for greater separation between the portlets. This makes it easier to separate concerns and allow several people or teams to work simultaneously on the portlets.

The multi-module Vaadin Portlet project can contain non-Vaadin Portlets in their own modules. A module may contain multiple portlets, if it makes sense for the project.

Multi-module project is the recommended setup for Vaadin Portlet projects. This section shows what a multi-module project looks like for Vaadin Portlets, and how it can be set up.


== Project Structure

A project consists of _1+N_ modules, where _N_ is the number of portlets in the project. The _1_ stands for the Vaadin frontend asset module. All frontend assets used by the Vaadin Portlets are packaged into a single `WAR` by the frontend asset module. The asset `WAR` can be deployed on the same web server as each portlet `WAR`, or onto some other file provider. The following is a possible schema for a project structure:

.Potential Project Structure
----
project-base
+-- frontend-bundle
+-- vaadin-portlet-1
+-- vaadin-portlet-2
:
+-- vaadin-portlet-n
----

For an example of a multi-module Vaadin Portlet project, look at the https://github.com/vaadin/addressbook-portlet[addressbook-portlet] and the associated tutorial, <<demo-address-book.asciidoc#,Address Book Demonstration>>. That tutorial covers the project structure and how the different portlet components interact.

Constructing the above project structure requires some configuration in the [filename]`pom.xml` file of each module that's directly related to portlets. After that configuration is done, and everything has been built and deployed once, further portlet deployments require deploying only the `WAR` file for the module being edited, if there are no front-end changes. The next section shows how to configure a multi-module Vaadin Portlet project.


== Configuring a Project

Configuring a Vaadin Portlet multi-module project has two requirements: ensuring Portlet modules build each `WAR` without front-end resources; and using static asset module packages front-end resources from every portlet `WAR`.

Building a `WAR` for each Portlet module without front-end resources is achieved by not using `vaadin-maven-plugin` in the [filename]`pom.xml`. Normally, Vaadin 23+ projects would use `vaadin-maven-plugin` to enable packaging of front-end files into the `WAR`. Not using the plugin, though, leaves the `WAR` without front-end resources.

Using the front-end resources of static asset module packages for each portlet `WAR` requires a bit more configuration. The static assets module needs to depend on all Vaadin portlet modules. This means that each portlet module needs to build a `WAR` and a `JAR` package. Additionally, for the front-end resources to be available, the portlet modules need to be configured similarly to Vaadin add-on projects. Finally, the portlet modules need to be configured to fetch front-end resources from the deployed static front-end resource provider.


[role="since:com.vaadin:vaadin@V23.2"]
=== Enable webpack

Starting with Vaadin 23.2, Vite is the default tool for front-end builds. However, Vaadin Portlet requires webpack instead. All modules must enable it with the `webpackForFrontendBuild` feature flag, even if they don't package fronted files into the `WAR`.

.[filename]`src/main/resources/vaadin-featureflags.properties`
[source,properties]
----
com.vaadin.experimental.webpackForFrontendBuild=true
----

See <<{articles}/configuration/feature-flags#,Feature Flags>> for more information.


=== Building Two Assets

Building both a `WAR` and a `JAR` can be achieved by configuring the `maven-war-plugin` like this:

.Portlet Module [filename]`pom.xml`
[source,xml]
----
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-war-plugin</artifactId>
    <configuration>
        <attachClasses>true</attachClasses>
    </configuration>
</plugin>
----

Adding the `attachClasses` flag instructs Maven to build a `JAR` file with the `-classes` classifier. Use this `JAR` as a dependency in your static assets module:

.Add Module as a Dependency
[source,xml]
----
<dependency>
    <groupId>your.group</groupId>
    <artifactId>module-name</artifactId>
    <classifier>classes</classifier>
</dependency>
----

Replace the `groupId` and `artifactId` with your values. The portlet module is now used as a dependency for the static assets module.


=== Vaadin Add-On

The significant part of a project structure's add-ons is the `frontend` resource folder. The folder is normally located at the root of the module for Vaadin 23+ projects. In order for the front-end resources to be packaged into the `JAR` file, place the files under the `frontend` folder: `/src/main/resources/META-INF/frontend/`.


=== Retrieving Front-End Resources

Vaadin Portlet applications need to be told to retrieve the `WAR` build's static frontend assets from the `static-vaadin-assets` module. This is done by creating the file, [filename]`./src/main/resources/META-INF/VAADIN/config/flow-build-info.json`. 

Put the following content into that JSON file:

.flow-build-info.json
[source,json]
----
{
  "externalStatsUrl": "/vaadin-portlet-static/VAADIN/config/stats.json"
}
----

For portlets running in Liferay 7, the JSON file should contain an `o` segment:

.flow-build-info.json
[source,json]
----
{
"externalStatsUrl": "/o/vaadin-portlet-static/VAADIN/config/stats.json"
}
----

In the examples here, `vaadin-portlet-static` is the assumed name of the `WAR` build from the static module. If you rename the `WAR`, change the JSON file to match. If you need to place the static asset `WAR` in some other web location, use the full URL to do so -- keeping the `VAADIN...` sub-directory portion.

[NOTE]
The relative URL is mapped to port `8080`. Therefore, the above partial URL would map as `http://127.0.0.1:8080/vaadin-portlet-static/VAADIN/config/stats.json`. If your web server is mapped to a different port, provide the full URL instead of a relative URL.


== Deploying

The deployment of a multi-module Vaadin Portlet project is very similar to that of a single-module project: deploy all portlet `WAR` files and the static assets `WAR` file to your web server.

When editing a single portlet module, there are two different deployment patterns: First, if you only edit the Java code in the portlet and don't add front-end resources, you can rebuild the portlet `WAR` and only redeploy that `WAR` file. 

Second, if you add front-end resources to your portlet module, you need to rebuild and redeploy the static assets `WAR`, as well as the portlet `WAR`.


[discussion-id]`ADA1B3CB-4B3E-4C9D-95CC-412B56CDD2CD`
