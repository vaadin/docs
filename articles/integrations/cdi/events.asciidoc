---
title: Observable Vaadin Events
order: 40
---

= Observable Vaadin Events

The https://vaadin.com/directory/component/vaadin-cdi/[Vaadin CDI] add-on publishes many Vaadin events to CDI.

It isn't necessary to register a listener.
It's sufficient to handle these events using only an observer.

Events published to CDI include:

* `ServiceInitEvent` See <<../../advanced/service-init-listener#,VaadinServiceInitListener>>
for more.
* `PollEvent`.
* `BeforeEnterEvent`. See <<../../routing/lifecycle#,Navigation Lifecycle>> for more.
* `BeforeLeaveEvent`. See <<../../routing/lifecycle#,Navigation Lifecycle>> for more.
* `AfterNavigationEvent`. See <<../../routing/lifecycle#,Navigation Lifecycle>>
for more.
* `UIInitEvent`. See <<../../advanced/session-and-ui-init-listener#,Session and UI InitListener>> for more.
* `SessionInitEvent`. See <<../../advanced/application-lifecycle#handling-session-initialization-and-destruction,Handling Session Initialization and Destruction>> for more.
* `SessionDestroyEvent`. See <<../../advanced/application-lifecycle#handling-session-initialization-and-destruction,Handling Session Initialization and Destruction>> for more.
* `ServiceDestroyEvent`.

[WARNING]
`ServiceDestroyEvent` support during application shutdown depends on each specific implementation.

*Example*: Using the `@Observes` annotation to listen to `ServiceInitEvent`.

[source,java]
----
public class BootstrapCustomizer {

    private void onServiceInit(@Observes
            ServiceInitEvent serviceInitEvent) {
        serviceInitEvent.addIndexHtmlRequestListener(
                this::modifyBootstrapPage);
    }

    private void modifyBootstrapPage(
            IndexHtmlResponse response) {
        response.getDocument().body().append(
                "<p>By CDI add-on</p>");
    }
}
----


[discussion-id]`DD8861A6-C281-4A3D-977D-FA750E3BAB5E`
