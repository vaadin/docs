---
title: Working with Shadow DOM
description: Working with Shadow DOM, a powerful web platform feature that makes it easy to build fully encapsulated, reusable components.
order: 10
---

= Working With Shadow DOM

Hilla components and views are web components based on https://lit.dev[Lit].
By default, Lit encapsulates the content of components inside of a https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM[Shadow DOM], which prevents outside CSS from leaking in and component CSS from leaking out.
You can read more about Light and Shadow DOM in the <<{root}/application/lit/#shadow-and-light-dom,Component Basics>> section.

== Advantages and Disadvantages of Shadow DOM

Shadow DOM is a powerful web platform feature that makes it easy to build fully encapsulated, reusable components.
This strict level of encapsulation can be challenging when building applications, because it makes it more difficult to apply the theme consistently across views.
Shadow DOM can also interfere with some web crawlers and marketing tools.
Because of this, Hilla does not use Shadow DOM by default.

== Views and Layouts

Hilla provides two base classes for components: [classname]#View# and [classname]#Layout#.
You can import them from [filename]#./frontend/views/view.ts#.

Use [classname]#View# for all application views that are not meant to be reusable inside other views.
Use [classname]#Layout# for all components that are reusable across views or act as layouts by accepting child components through https://developer.mozilla.org/en-US/docs/Web/HTML/Element/slot[`<slot>`].

See <<./styling-with-css#,Styling With CSS>> to learn how to apply CSS to [classname]#View# and [classname]#Layout# components.
