---
title: Using API Helpers to Define Component Properties
order: 4
layout: page
---

= Using API Helpers to Define Component Properties

The [interfacename]`PropertyDescriptor` interface and associated [classname]`PropertyDescriptors` helper class simplify managing attributes and properties in a component.

You can use [classname]`PropertyDescriptors` to define a property name and default value in a single place, and then use the descriptor from the setter and getter methods.

*Example*: Using the [methodname]`PropertyDescriptors.propertyWithDefault()` method to define the default property value.

[source,java]
----
@Tag("input")
public class TextField extends Component {
    private static PropertyDescriptor<String, String>
        VALUE = PropertyDescriptors
                .propertyWithDefault("value", "");

    public String getValue() {
        return get(VALUE);
    }
    public void setValue(String value) {
        set(VALUE, value);
    }
}
----

Your component API must meet the following requirements in order to function correctly for a given property, such as the `value` of an input field:

* The getter and setter should use the same property or attribute.
* The default value should be handled appropriately.
* The getter return value should be either:
** the type used by the setter, for example [classname]`String` for an input `value`, or
** an optional version of the type used by the setter if the property is not mandatory; for example, [classname]`Optional<String>`.

[classname]`PropertyDescriptors` automatically take these requirements into consideration.

== PropertyDescriptor Interface

You create [interfacename]`PropertyDescriptor` instances using the helper methods that are available in the [classname]`PropertyDescriptors` class.

Different helper methods are available, depending on how you want your component to work:

* [methodname]`PropertyDescriptors.propertyWithDefault()` maps to an element property with a given default value.
* [methodname]`PropertyDescriptors.attributeWithDefault()` maps to an element attribute with a given default value.
* [methodname]`PropertyDescriptors.optionalAttributeWithDefault()` maps to an element attribute with a given default value, but returns an empty `Optional` when the default value is set.

*Example*: Using the [methodname]`PropertyDescriptors.optionalAttributeWithDefault()` method for a non-mandatory `placeholder` in a `TextField`.

[source,java]
----
@Tag("input")
public class TextField extends Component {
  private static PropertyDescriptor<String,
    Optional<String>> PLACEHOLDER = PropertyDescriptors
       .optionalAttributeWithDefault("placeholder", "");

  public Optional<String> getPlaceholder() {
    return get(PLACEHOLDER);
  }
  public void setPlaceholder(String placeholder) {
      set(PLACEHOLDER, placeholder);
  }
}
----

[NOTE]
The default value used in all [classname]`PropertyDescriptors` methods should match the value in the browser when the attribute or property is *not* set.
Otherwise, when the user sets the value to the default value, the value will not be correctly sent to the browser.
