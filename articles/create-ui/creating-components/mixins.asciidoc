---
title: Using Vaadin Mixin Interfaces
order: 10
description: This approach provides common APIs and default behavior for sets of functions in most Web Components.
---


= Using Vaadin Mixin Interfaces

A _mixin_ refers to a defined amount of functionality that can be added to a class. Previously, Java didn't support this kind of multiple inheritance. However, since Java 8 interfaces can also include default methods, which allows them to work as mixins.

Vaadin Flow uses the mixin concept to provide common APIs and default behavior for sets of functionalities found in most Web Components.

The most important predefined mixins are provided by the [interfacename]`HasSize`, [interfacename]`HasComponents`, and [interfacename]`HasStyle` interfaces. You can use these interfaces to add typical functions to your Java components.


== HasSize Interface

If your component implements the [interfacename]`HasSize` interface, you can set the size of the component using the [methodname]`setWidth(String)` and [methodname]`setHeight(String)` methods.

This interface extends [interfacename]`HasElement` mixin. https://vaadin.com/api/platform/{moduleMavenVersion:com.vaadin:vaadin}/com/vaadin/flow/component/HasSize.html#method-summary[Full method summary of the [interfacename]`HasSize` interface].

== HasComponents Interface

If your component implements the [interfacename]`HasComponents` interface, you can add and remove child components to and from it. This interface extends [interfacename]`HasElement` and [interfacename]`HasEnabled` mixins.

It should generally be implemented by layouts or components whose primary function is to host child components. It shouldn't be, for example, implemented by non-layout components such as fields.

https://vaadin.com/api/platform/{moduleMavenVersion:com.vaadin:vaadin}/com/vaadin/flow/component/HasComponents.html#method-summary[Full method summary of the [interfacename]`HasComponents` interface].


== HasStyle Interface

The [interfacename]`HasStyle` interface adds a class attribute and supports inline styles. It's implemented in [classname]`Component`, by default. It extends [interfacename]`HasElement` mixin.

https://vaadin.com/api/platform/{moduleMavenVersion:com.vaadin:vaadin}/com/vaadin/flow/component/HasStyle.html#method-summary[Full method summary of the [interfacename]`HasStyle` interface].


== Using Mixin Interfaces

Were you to create a custom `Tooltip` component, for example, that implements the [interfacename]`HasComponents` and [interfacename]`HasStyle` interfaces, you would do something like this:

.Tooltip.java
[source,java]
----
@Tag("sample-tooltip")
@JsModule("./sample-tooltip.ts")
public class Tooltip extends LitTemplate
        implements HasComponents, HasStyle {

}
----

.sample-tooltip.ts
[source,javascript]
----
import { html, LitElement } from 'lit';

class SampleTooltip extends LitTemplate {
  render() {
    return html`
      <div part="content" theme="dark">
        <slot></slot>
      </div>
    `;
  }
}

customElements.define('sample-tooltip', SampleTooltip);
----

A component that implements [interfacename]`HasComponents` needs to extend from a tag that supports having child components. The `slot` tag is used in Web Components to define where child components should be put.

When you implement the [interfacename]`HasComponents` interface, adding child components to the parent component is allowed automatically.

For example, adding new `H5` and `Paragraph` child components to the `Tooltip` parent component would look something like this:

[source,java]
----
Tooltip tooltip = new Tooltip();

tooltip.add(new H5("Tooltip"));
tooltip.add(new Paragraph("I am a paragraph"));
----


== Other Useful Mixin Interfaces

Vaadin Flow provides many additional useful mixin interfaces. [interfacename]`HasElement` is a low level API that is extended by most other mixins. [interfacename]`HasElement` is a marker interface for any class that's based on an [classname]`Element`.

The following list has mixins depending directly on a root element -- all of which extends [interfacename]`HasElement`:

- [interfacename]`HasArialLabel` is for components and other UI objects that may have an aria-label and an aria-labelledby DOM attributes to set the accessible name of the component.
- [interfacename]`HasEnabled` is for components and other UI objects that can be enabled or disabled.
- [interfacename]`HasHelper` is for field components that have helper text as property and slots for inserting components.
- [interfacename]`HasLabel` is for components that support label definition.
- [interfacename]`HasOrderedComponents` supports ordered child components, with an index for the layout.
- [interfacename]`HasText` is for components that support text content.
- [interfacename]`HasTheme` is for components that have a theme DOM attribute.
- [interfacename]`HasValueAndElement` is the same as [interfacename]`HasValue`. It also extends [interfacename]`HasElement` and [interfacename]`HasEnabled`.
- [interfacename]`Focusable<T>` provides methods to gain and lose focus.

The following mixins are for more generic use, without direct dependency to any root element:

- [interfacename]`HasItems` is for components that display a collection of items.
- [interfacename]`HasDataProvider<T>` is for listing components that use a data provider to display data. It also extends [interfacename]`HasItems`.
- [interfacename]`HasValidation` is for components that supports input validation.
- [interfacename]`HasValue` is for field components and other UI objects that have a user-editable value.


== Advantages of Mixin Interfaces

Using Vaadin mixins is a best practice because their code and functionality has been thoroughly checked and tested by Vaadin.

Mixins also keep your code clean and simple. For example, compare setting a component's width. Here's what you'd have to do without mixins: 

----
getElement().getStyle().set("width", "300px")
----

That's not too complicated. Here's what's required after implementing the [interfacename]`HasSize` interface: 

----
setWidth("300px")
-----

That's much simpler and easier to maintain.

[discussion-id]`7E2169AD-5503-46B1-B044-6043B5C8BB4B`
