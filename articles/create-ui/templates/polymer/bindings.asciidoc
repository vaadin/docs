---
title: Binding Model Data
order: 15
banner: Polymer support is deprecated. Use link:../[Lit templates] instead.
banner-id: polymer-templates
banner-style: caution
---

= [deprecated:com.vaadin:vaadin@V18]#Binding Model Data#

:admonition:
include::index.asciidoc[tag=deprecation-notice]

Template model and model data aren't supported for Lit templates. You may use directly, though, component API and properties via the [classname]`Element` API to achieve the same functionality.

The way in which model values are bound to different parts of the element tree -- defined by the template -- is at the core of the [classname]`PolymerTemplate` API.

The following three sections show how to bind <<binding-text-content,text content>>, <<binding-property-values,property values>>, and <<binding-attribute-values,attribute values>>. The JavaScript template examples in these sections all use the following Java template and model class.

The example here is a [classname]`PolymerBindingTemplate` template class:

[source,java]
----
@Tag("my-template")
@JsModule("./com/example/my-template.js")
public class PolymerBindingTemplate extends PolymerTemplate<BindingModel> {

    public PolymerBindingTemplate() {
        getModel().setHostProperty("Bound property");
    }
}
----

This example is a [interfacename]`BindingModel` model interface:

[source,java]
----
public interface BindingModel extends TemplateModel {
    void setHostProperty(String propertyValue);
    String getHostProperty();
}
----



== Binding Text Content

To bind text content in a JavaScript Polymer template, use the `\[[_propertyName_]]` syntax inside a tag. Double square brackets (i.e., `[[ ]]`) mark a one-way binding.

This example shows binding text content in a JavaScript Polymer template:

[source,javascript]
----
class MyTemplate extends PolymerElement {
  static get template() {
    return html`<div>[[hostProperty]]</div>`;
  }

  static get is() {
    return 'my-template';
  }
}

customElements.define(MyTemplate.is, MyTemplate);
----



== Binding Property Values

To set an element property value based on a model, use the property name in the attribute format. You would do this by using the dash-case format, sometimes referred to as _kebab case_; for example, `my-property-name` (not camel case, `myPropertyName`).

For example, setting an element property based on a model in a JavaScript Polymer template might look like this:

[source,javascript]
----
return html`<my-element my-property="[[hostProperty]]"></my-element>`;
----

This binds to the target property, [propertyname]`myProperty`, on `<my-element>`.

Using `name="\[[binding]]"` specifies that the element _property_ named `name` should get its value from the model property named [propertyname]`binding`. Whereas, `name="binding"` (i.e., without brackets) specifies that the element _attribute_ named `name` should have the value `binding`, regardless of any value in the model.

Polymer can't directly bind certain common native element properties because the binding causes issues on one or more browsers. In these cases, you can use instead attribute bindings. See the  https://www.polymer-project.org/3.0/docs/devguide/data-binding#native-binding[Polymer Project page] on Native properties that don't support property binding for more information.



== Binding Attribute Values

The binding `<div something="\[[hostProperty]]"></div>` is bound to the _property_ [propertyname]`something` because the property can typically be changed on the fly, while the attribute is typically used only for the initial value.

To explicitly bind to an attribute, use the attribute name followed by a dollar sign (i.e., `$`).

For example, binding to an attribute in a JavaScript Polymer template would be like this:

[source,javascript]
----
return html`<div something$="[[hostProperty]]"></div>`;
----

Or it might look like this:

[source,javascript]
----
return html`<a href$="[[hostProperty]]"></a>`;
----


[[server-side-sample]]
== Two-Way vs. One-Way Bindings

Text surrounded by double curly brackets (i.e., `{{ }}`) or double square brackets (i.e., `[[ ]]`) delimiters identifies the host data that's bound. Double curly brackets mark two-way bindings &ndash; both server-to-client and client-to-server data flow. Whereas, double square brackets mark one-way bindings &ndash; only server-to-client data flow.


[[two-way-binding]]
== Creating Two-Way Data Bindings

For two-way data binding, data flows in both directions &ndash; client-to-server and server-to-client.

To demonstrate, create a two-way binding model class with some fields. Create a Java template class that sets default values for the model, and adds listeners for `save` and `reset` events. Also, you'll need an associated JavaScript Polymer template.

In the example here, there's a [interfacename]`TwoWayBindingModel` with `name`, `accepted`, and `size` fields.

[source,java]
----
public interface TwoWayBindingModel extends TemplateModel {
    void setName(String name);
    String getName();

    void setAccepted(Boolean accepted);
    Boolean getAccepted();

    void setSize(String size);
    String getSize();
}
----

In this next example, there's a [classname]`PolymerTwoWayBindingTemplate` Java template class that defines `save` and `reset` event property change listeners, and sets default values for the `name`, `accepted` and `size` fields.

[source,java]
----
@Tag("two-way-template")
@JsModule("./com/example/two-way-template.js")
public class PolymerTwoWayBindingTemplate
        extends PolymerTemplate<TwoWayBindingModel> {

    public PolymerTwoWayBindingTemplate() {
        reset();
        getElement().addPropertyChangeListener("name", event -> System.out
                .println("Name is set to: " + getModel().getName()));
        getElement().addPropertyChangeListener("accepted",
                event -> System.out.println("isAccepted is set to: "
                        + getModel().getAccepted()));
        getElement().addPropertyChangeListener("size", event -> System.out
                .println("Size is set to: " + getModel().getSize()));
    }

    @EventHandler
    private void reset() {
        getModel().setName("John");
        getModel().setAccepted(false);
        getModel().setSize("medium");
    }
}
----

The [methodname]`Element::addPropertyChangeListener()` method gets immediate updates when the property values change. As an alternative, you could define an `@EventHandler` method on the server side and add appropriate event handlers in the template. On the client, the following methods are used to bind the model data. See the JavaScript template that follows it.

* `name` string is bound to an input using:
** native input element
** Polymer element `paper-input`

* `accepted` boolean is bound to a checkbox using:
** native checkbox input
** Polymer element `paper-checkbox`

* `size` string is bound to a select element using:
** native select
** Polymer elements `paper-radio-group` and `paper-radio-button`


[NOTE]
--
Native elements need to specify a custom-change event name in the annotation using the `_target-prop_="{{_hostProp_::_target-change-event_}}"` syntax. See https://www.polymer-project.org/3.0/docs/devguide/data-binding#two-way-native[Two-way binding to a non-Polymer element] in the Polymer 3 documentation for more.
--

This example shows a Polymer JavaScript template:

[source,javascript]
----

class TwoWayBinding extends PolymerElement {

  static get template() {
    return html`
      <table>
        <tr>
          <td>Paper name:</td>
          <td>
            <paper-input value="{{name}}"></paper-input>
          </td>
        </tr>
        <tr>
          <td>Input name:</td>
          <td>
            <input value="{{name::input}}">
          </td>
        </tr>
        <tr>
          <td>Change name:</td>
          <td>
            <input value="{{name::change}}">
          </td>
        </tr>
        <tr>
          <td>Input accepted:</td>
          <td>
            <input type="checkbox" checked="{{accepted::change}}">
          </td>
        </tr>
        <tr>
          <td>Polymer accepted:</td>
          <td>
            <paper-checkbox checked="{{accepted}}"></paper-checkbox>
          </td>
        </tr>
        <tr>
          <td>Size:</td>
          <td>
            <paper-radio-group selected="{{size}}">
              <paper-radio-button name="small">Small</paper-radio-button>
              <paper-radio-button name="medium">Medium</paper-radio-button>
              <paper-radio-button name="large">Large</paper-radio-button>
            </paper-radio-group>
          </td>
        </tr>
        <tr>
          <td>Size:</td>
          <td>
            <select value="{{size::change}}">
              <option value="small">Small</option>
              <option value="medium">Medium</option>
              <option value="large">Large</option>
            </select>
          </td>
        </tr>
      </table>
      <div>
        <button on-click="reset">Reset values</button>
      </div>
      <slot></slot>
    `;
  }

  static get is() {
    return 'two-way-template';
  }
}

customElements.define(TwoWayBinding.is, TwoWayBinding);
----

This uses two-way bindings for each element. Some elements bind to the same property. For example, when the value for `name` is changed in the `paper-input` element, the new value reflects in both `Input name` and `Change name`.

The two input bindings, `Input name` and `Change name`, work in slightly different ways: `Input name` binds using `{{name::input}}` and `Change name` binds using `{{name::change}}`. The given `target-change-event` lets Polymer know which event to listen to for change notifications. The functional difference is that `::input` updates during typing, and `::change` updates when the value of the field changes, for example, an `onBlur` event or `Enter` key press.

Here's the template representation in the browser:

image:images/two-way-binding-example.png[Template representation]

For information on the `<slot></slot>` element, see <<../components-in-slot#,Dynamically Adding Server-side Components to Templates>>.


[discussion-id]`9C215333-D417-4BB0-A29B-8DE04AADAF17`
