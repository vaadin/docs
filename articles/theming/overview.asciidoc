---
title: Overview
order: 10
layout: page
---

= Theming

Vaadin uses themes to separate the user interface’s appearance from its logic.
Themes make applications look and feel consistent to end users.
They offer a shared visual language which you can apply to your application-specific styling.


== Prerequisites

To style components and theme your application you should be comfortable writing CSS and willing to learn basic Java or JavaScript.

Themes and application-specific styles are implemented using https://developer.mozilla.org/en-US/docs/Web/CSS[Cascading Style Sheets] (CSS).
Style sheets are authored as `.css` files.
If you are including style sheets in client-side code they can also be authored as `.js` files (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules[JavaScript modules]).

The https://developer.mozilla.org/en-US/docs/Learn/CSS[CSS tutorials on MDN Web Docs] are a great way to learn the basics of CSS.
It is also important to understand <<style-scopes#,Style Scopes>> and <<css-custom-properties#,CSS Custom Properties and Variables>> are important topics to understand.


== Concepts

=== Theme

A theme is a collection of style sheets which are loaded when the application starts.
It defines global font styles and text and background colors, among other shared visual aspects.

A theme defines all component styles but can also affect component behavior.
For example, the position of the date picker’s overlay on small viewports is determined by the theme.

A theme is created in a separate folder under the `frontend/themes/`.
The `[classname]#@Theme#` annotation is used to configure what theme to be applied in the application.

A theme can also be in `src/main/resources/META-INF/resources/themes/` folder, which allows packaging it as a JAR file to reuse in multiple applications. A theme can extend and overwrite an existing "parent theme".

Learn more about <<creating-a-custom-theme#, Theme>>.

=== Theming

The term “theming” is used for styles that apply across all style scopes, and in general affect the shared visual aspects of an application.

For example, you could choose the primary color or font to be used for all components.
You could also apply a certain background color for all buttons across the application.


=== Styling

The term “styling” is used for styles that apply to particular views or instances of components.
For example, you could style an individual button in one view to have a different background color than all the other buttons in the app, or increase the cell padding of a data grid in one view.

The techniques used for theming and styling are mostly the same.
The main difference is how you scope the CSS: for all instances of a certain component, to certain theme variants, or only to specific component instances.

Learn more about <<styling-components#,Styling Components>> and <<styling-applications#,Styling Applications>>.


== Built-in Themes

Vaadin comes with two built-in themes you can use as-is or as the basis for your own customization.

=== Lumo

image:images/lumo-theme.png[Screenshot of an application using the Lumo theme]

All Vaadin components implement the Lumo theme by default, which gives your application a coherent and polished look out-of-the-box.
In addition to *light and dark modes* Lumo has a built-in *compact variant*.
It reduces the space between elements and is useful when you need to fit a lot of data onto one screen at the same time.

Learn more about <<theme-variants#,Theme Variants>>.

=== Material

image:images/material-theme.png[Screenshot of an application using the Material theme]

The Material theme is an implementation of Google’s https://material.io[Material Design] guidelines, and comes with both *light and dark modes* (color palette variants).
The guidelines are followed whenever possible.
However, some features aren’t in the guidelines and in those situations we take inspiration from Material Design and try to fit them in seamlessly.

WARNING: Material can't be customized by <<creating-a-custom-theme#, Custom Theme>>.

== Theme mechanism

There several ways to apply styles in a Vaadin application. The tree below explains their relation.
[source, filesystem]
----
no theme <1>
├── built-in themes <2>
│   ├── Lumo theme (default) <3>
│   │   └── theme <4>
│   └── Material theme (deprecated) <5>
├── @CssImport <6>
├── page.addStyleSheet <7>
├── @StyleSheet <8>

----

<1> Do not use any theme. See <<using-themes#no-theme,No Theme>>.
<2> Use Lumo or Material built-in theme. See <<#built-in-themes, Built-in Themes>>.
<3> Lumo theme is the default built-in theme which is applied without any specific configuration. See <<lumo/lumo-overview#,Lumo>>.
<4> A theme is the recommended way to style a Vaadin application. A theme can extend another one. Themes are based on Lumo built-in theme. See <<creating-a-custom-theme#, Theme>>.
<5> Material theme is a deprecated built-in theme. See <<material/material-overview#,Material>>.
<6> Import an external CSS file using `@CssImport`. See <<importing-style-sheets#, Importing Style Sheets>>.
<7> Load external CSS file by `addStyleSheet` method. See <<../flow/importing-dependencies/tutorial-ways-of-importin#advanced-configuration-of-css-javascript-and-html-imports,Advanced configuration of CSS>>.
<8> Import an external CSS file using `@StyleSheet`. See <<importing-style-sheets#, Importing Style Sheets>>.

If multiple style sheets define styles for an element (for example, imported with `@CssImport`, `@StyleSheet`, and by a theme), the styles are applied in a specific order. See <<css-loading-order#, CSS Loading Order>> for details.
