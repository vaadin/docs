---
title: Application Theme
order: 25
layout: page
---

= Application Theme

[role="since:com.vaadin:vaadin@V19"]
--
Application Theme is the standard way to organize themes in a Vaadin application, making it easier to switch between themes and allow packaging a theme to reuse in other Vaadin applications.
--

== Define Application Themes

The following describes a sample file system structure for "my-theme".

.A sample application theme "my-theme"
[source, filesystem]
----
themes/ <1>
└── my-theme/ <2>
    ├── components <3>
    │   ├── vaadin-button.css <4>
    │   └── vaadin-text-field.css <4>
    ├── images <5>
    ├── webfonts <5>
    ├── document.css <6>
    ├── styles.css <7>
    ├── my-theme.generated.js <8>
    └── theme.json <9>
----
<1> Contains all application themes
<2> Contains files for 'my-theme'
<3> Contains component specific themes
<4> Component theme file, name needs to be the same as the component tag name
<5> Static resource folder
<6> CSS that is always applied to the root of the page (for <<Theming Embedded Web Components,embedded web component>>)
<7> Styles file for the theme that can import other css files, may be applied outside page root
<8> Generated configuration file
<9> configuration for assets to be used from node_modules and <<Extending an existing application theme,parent theme>>

.Create the theme folder manually
[NOTE]
The theme folder will not be autogenerated and must be created by the developer.

=== Application Theme Folder
Application themes are placed under the `frontend/themes/` folder of a Vaadin project's root location.

The `themes` folder location is not configurable.

Each theme is created in a separate folder, the folder name is also the theme name that is used for `@Theme`.

For example:

 * `@Theme("alpaca")`: the files should be in `frontend/themes/alpaca/`
 * `@Theme("frost-bite")`: the files should be `in frontend/themes/frost-bite/`

=== Global Styles

Application-specific styling across application views and application-specific components are defined in `styles.css` located in the theme folder.
`styles.css` may contain css `@import` statements to import other css files from the theme folder.

For example, <<css-custom-properties#,CSS Custom Properties>> or `@font-face` can be defined in the `styles.css` file.
See <<styling-applications#, Styling Applications>>.

NOTE: Global styles can override <<theme-variants#global-variants, global variants>> styles.
For example, `Lumo.DARK` variant defines a `--lumo-base-color` which can be overridden in `css` files.

=== Component Styles

Component-specific style sheets are placed under the `components` folder.
The file name must match the tag name of the component that you want to style.
See <<styling-components#, Styling Components>>.

NOTE: Component styles can override <<theme-variants#component-variants, component variants>> styles.
For example, styles in `vaadin-button.css` file can override styles from `ButtonVariant.LUMO_ERROR` variant of a Vaadin Button component.

=== Static Resources

You can create folders for static resources, such as images or fonts.
When using in a style sheet, the resource location is relative to the CSS file location.

For example, in Figure 1, `styles.css` file can have `background: url('./images/bg.jpg');`

NOTE: The static resource must be available from the application theme folder for it to be handled, else it should be available with the given URL.

=== Theme Configuration

==== Import CSS Files From npm Packages

CSS files from npm dependencies can be imported and used as <<#global-styles>> by adding `importCss` array in `theme.json`.

[source, JSON]
----
"importCss": [
  "@fortawesome/fontawesome-free/css/regular.css",
  "@fortawesome/fontawesome-free/css/solid.css"
]
----

==== Assets

Assets like fonts and images from an npm dependency can be used in a theme after mapping them from the dependency to local URIs by adding an `assets` block in `theme.json`.

[source, JSON]
----
"assets": {
  "@fortawesome/fontawesome-free": {
    "svgs/regular/**": "fortawesome/icons"
  }
}
----

A style sheet in the theme can use the assets by adding `themes/my-theme/` to the local URIs defined in `theme.json`.

[source, CSS]
----
background-image: url('themes/my-theme/fortawesome/icons/snowflake.svg');
----

== Use application themes

In server-side views (Java), use the [classname]#@Theme# annotation to apply an application theme.
You must set the annotation on an https://vaadin.com/api/platform/com/vaadin/flow/component/page/AppShellConfigurator.html[AppShellConfigurator] class, or an error "Found app shell configuration annotations in non `AppShellConfigurator` classes." is thrown.

[source, Java]
----
include::src/main/java/com/vaadin/flow/tutorial/theme/UsingComponentThemes.java[tags=apptheme, indent=0, group=Java]
----

A theme variant can also be applied.

[source, Java]
----
include::src/main/java/com/vaadin/flow/tutorial/theme/UsingComponentThemes.java[tags=lumo-dark, indent=0, group=Java]
----
See <<theme-variants#global-variants>>.

NOTE: Any changes to theme folder contents (add/remove files, file modifications) are automatically picked up by webpack.
If a running app has live reload available, you can wait for it to reload the changes, otherwise, you can manually refresh the browser.

NOTE: If you notice the following kind of webpack error after removing any files/folders from theme folder `Error: ENOENT: no such file or directory, open '.../themes/my-theme/styles.css'`, please manually refresh the browser.

=== Extending an existing application theme

The application theme can extend an existing application theme, usually called parent theme, that is either located in
the project themes folder or as an <<Creating a Reusable Application Theme,reusable>> theme dependency jar.

Project themes folder places are `frontend/themes`, `src/main/resources/static` and `src/main/resources/META-INF/resources/themes`.

To use the available parent theme add the theme name to the `theme.json` with the key `parent`.

.Sample parent theme declaration in theme.json
[source, JSON]
----
{
  "parent": "acme-base"
}
----

== Creating a Reusable Application Theme

Application theme can be packaged and reused in multiple applications.
A reusable theme is a jar file containing only the theme files and an optional `dependency.java` file with `NpmPackage`
declarations for npm packages required by the theme.

=== Creating the theme jar

. Create a new maven project with
`mvn archetype:generate -DgroupId=com.example -DartifactId=reusable -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=1.4 -DinteractiveMode=false`

. Remove `src/test` as well as `App.java` from `src/main/java/`.

. Update the pom.xml
- add the vaadin version property
+
```
<vaadin.version>19.0.0</vaadin.version>
```
- add dependency management:
+
[source, pom]
----
<dependencyManagement>
  <dependencies>
    <dependency>
      <groupId>com.vaadin</groupId>
      <artifactId>vaadin-bom</artifactId>
      <version>${vaadin.version}</version>
      <type>pom</type>
      <scope>import</scope>
    </dependency>
  </dependencies>
</dependencyManagement>
----
- update dependencies to contain only the dependency
+
[source, pom]
----
<dependency>
  <groupId>com.vaadin</groupId>
  <artifactId>vaadin</artifactId>
  <scope>provided</scope>
</dependency>
----

. Create the folders `src/main/resources/META-INF/resources/themes/` and the reusable theme folder

. Add the theme assets to the theme folder.

. If the theme uses npm assets, add `Dependencies.java` with `@NpmPackage` annotations.

. Execute `mvn install` to create the theme jar.

=== Using the Theme in Application Projects

. Add the theme JAR as a dependency in a Vaadin app project
. Apply the theme with the `@Theme` annotation

== Theming Embedded Web Components

To set a theme for an embedded component the `@Theme` annotation should be set on the class implementing `WebComponentExporter` for the web component.
The exporter class is also the recommended place to place the `@NpmPackage` annotations if any are needed.

As a general note any `@font-face` declarations should be put into a file `document.css` in the theme folder or
use the `documentCss` key in `theme.json` for npm imports.

.documentCss sample usage
[source, JSON]
----
{
  "documentCss": ["@fortawesome/fontawesome-free/css/all.css"]
}
----

Both of these will be put into the head element also for the embedded components that otherwise inject styles to the
shadow root of the embedded component.

All other styles are only available inside the web component shadow root and do not reach the outlying context.

.Sample theme annotation
[source, Java]
----
include::src/main/java/com/vaadin/flow/tutorial/theme/ThemedComponentExporter.java[tags=embeddedTheme, indent=0, group=Java]
----
