---
title: Application Theme
order: 25
layout: page
---

= Application Theme

[role="since:com.vaadin:vaadin@V19"]
--
Application Theme is the standard way to organize themes in a Vaadin application, making it easier to switch between themes and allow packaging a theme to reuse in other Vaadin applications.
--

== Limitations
--
The followings options are not currently available:
--
<1> Activating multiple application themes at the same time.
<2> Switching between application themes at runtime.
<3> Extending from multiple parent themes.

== Define Application Themes

The following describes a sample file system structure for "my-theme":

.Figure 1: A sample application theme called "my-theme"
[source, filesystem]
----
frontend/
└── themes/ <1>
    └── my-theme/ <2>
        ├── components <3>
        │   ├── vaadin-button.css <4>
        │   └── vaadin-text-field.css <4>
        ├── some-images <5>
        ├── some-fonts <5>
        ├── document.css <6>
        ├── styles.css <7>
        └── theme.json <8>
----
<1> Contains all application themes. This should always be named as `themes` to be considered as themes folder.
<2> Contains all files for 'my-theme'. Can be named anything as far as it does not contain spaces.
<3> Contains component-specific themes. This should always be named as `components` to be considered as component-specific styles folder.
<4> Component-specific theme file, name should be an exact match for the component's `tag` name.
<5> Optional static resource folder. Can be named anything as far as it doesn't contain spaces.
<6> CSS that is always applied to the root of the page (for <<Theming Embedded Web Components,embedded web component>>). It should be named as `document.css`.
<7> Automatically loaded master stylesheet. Other non-component-specific stylesheets need to be imported through this file. It should be named as `styles.css`.
<8> Theme configurations (e.g. assets from `node_modules` or <<Extending an existing application theme,parent theme>> properties) are defined in this file. It should name as `theme.json`.

.Create the theme folder manually
[NOTE]
The theme folder will not be autogenerated and must be created by the developer.

=== Application Theme Folder
Application themes should be placed under the `frontend/themes/` folder of a Vaadin project's root location.

The `themes` folder location is not configurable.

Each theme should be created in a separate folder, the folder name is also the theme name that is used for `@Theme`.

For example:

* `@Theme("alpaca")`: the files should be in `frontend/themes/alpaca/`
* `@Theme("frost-bite")`: the files should be `in frontend/themes/frost-bite/`

=== Global Styles

Application-wide styles which are used across multiple views shall be defined in `styles.css`. Since this is an automatically loaded CSS file it should be named as `styles.css`, located directly under theme folder's root.

`style.css` is being treated as the starting point for loading other non-component-specific stylesheets. This means, it may contain CSS `@import` statements to import other css files from the theme folders.

For example, <<css-custom-properties#,CSS Custom Properties>> or `@font-face` can be defined in the `styles.css` file.
See <<styling-applications#, Styling Applications>>.

NOTE: Global styles can override <<theme-variants#global-variants, global variants>> styles.
For example, `Lumo.DARK` variant defines a `--lumo-base-color` which can be overridden in `css` files.

=== Component Styles

Component-specific style sheets should be placed under the `components` folder.
The file name must match the tag name of the component you want to style.
See <<styling-components#, Styling Components>>.

NOTE: Component styles can override <<theme-variants#component-variants, component variants>> styles.
For example, styles in `vaadin-button.css` file can override styles from `ButtonVariant.LUMO_ERROR` variant of a Vaadin Button component.

=== Static Resources

You can create folders to organize static resources, such as images or fonts.
When using in a style sheet, the resource location is relative to the CSS file location.

For example, in Figure 1, `styles.css` file can have `background: url('./images/bg.jpg');`

NOTE: The static resource must be available from the application theme folder for it to be handled, else it should be available with the given URL.

=== Theme Configuration

==== Import CSS Files From npm Packages

As CSS files can have `@import` statements to include other CSS files, it is also available in the application theme to import CSS files from NPM dependencies, to be used as <<#global-styles>> by adding `importCss` array in `theme.json`.

For Example:

[source, JSON]
----
"importCss": [
  "@fortawesome/fontawesome-free/css/regular.css",
  "@fortawesome/fontawesome-free/css/all.min.css"
]
----

Now, style classes from those css files can be used.

In Html:

[source, html]
----
<i class="fab fa-vaadin"></i>
----

In java code:

[source, java]
----
Label label = new Label();
label.addClassNames("fab", "fa-vaadin");
----

NOTE: Defining an `importCss` block which references an NPM package, does not install it. Consider installing the referenced package by adding `@NpmPackage` on any desired class in the application.


==== Assets

Assets like fonts and images from an NPM dependency can be used in a theme after mapping them from the dependency to local URIs by adding `assets` block in the `theme.json`.

An `assets` block definition should look like this:
[source, JSON]
----
"assets": {
  "npm-package-name-goes-here": {
    "path-expression-to-refer-assets-of-a-package": "local/path/which/assets/are/copied/to"
  }
}
----

For example, to use SVG icons from `@fortawesome/fontawesome-free` NPM package, we should map the assets to some local path like this:

[source, JSON]
----
"assets": {
  "@fortawesome/fontawesome-free": {
    "svgs/regular/**": "fortawesome/icons"
  }
}
----

Now, assuming the theme folder named as "my-theme", we can refer to the assets by adding `themes/my-theme/` to the local URIs defined in `theme.json`:

In stylesheet:

[source, CSS]
----
background-image: url('themes/my-theme/fortawesome/icons/snowflake.svg');
----

In java code:

[source, java]
----
Image snowImg = new Image("themes/my-theme/fortawesome/icons/snowflake.svg", "snow");
----

NOTE: `assets` block is not accepting array of mappings. For defining each mapping, a separate `assets` block should be defined.

NOTE: Defining an `assets` block which references an NPM package, does not install it. Consider installing the referenced package by adding `@NpmPackage` on any desired class in the application.

== Use application themes

In server-side views (Java), use the [classname]#@Theme# annotation to apply an application theme.
You must set the annotation on an https://vaadin.com/api/platform/com/vaadin/flow/component/page/AppShellConfigurator.html[AppShellConfigurator] class, or an error "Found app shell configuration annotations in non `AppShellConfigurator` classes." is thrown.

[source, Java]
----
include::src/main/java/com/vaadin/flow/tutorial/theme/UsingComponentThemes.java[tags=apptheme, indent=0, group=Java]
----

A theme variant can also be applied.

[source, Java]
----
include::src/main/java/com/vaadin/flow/tutorial/theme/UsingComponentThemes.java[tags=lumo-dark, indent=0, group=Java]
----
See <<theme-variants#global-variants,Theme Variants>>.

NOTE: Any changes to theme folder contents (add/remove files, file modifications) are automatically picked up by webpack.
If a running app has live reload available, you can wait for it to reload the changes, otherwise, you can manually refresh the browser.

NOTE: If you notice the following kind of webpack error after removing any files/folders from theme folder `Error: ENOENT: no such file or directory, open '.../themes/my-theme/styles.css'`, please manually refresh the browser.

== Extending an existing application theme

The application theme can extend an existing application theme, usually called **parent theme**, that is either located in
the project themes folder or as a <<Creating a Reusable Application Theme,reusable>> theme dependency jar.

Project themes folder places are `frontend/themes`, `src/main/resources/static` and `src/main/resources/META-INF/resources/themes`.

Process of extending from a parent theme is similar to having a theme folder except for the fact of adding "parent" key to the `theme.json`, so:

. Create a theme folder in your application with a different name from the parent theme's name, under `frontend/themes/`.
. Use the new theme folder's name in `@Theme("...")`.
. In the `theme.json` add the parent theme's name, with the key `parent`:
[source, JSON]
----
{
  "parent": "acme-base"
}
----

Now besides to overriding parent theme's styles, new styles can be added also through the local theme folder and its configurations.

== Creating a Reusable Application Theme

Application theme can be packaged and reused in other applications.
A reusable theme is a jar file containing only the theme files, and an optional java class (e.g. `Dependency.java`) with `NpmPackage`
declarations for npm packages required by the theme.

=== Creating the theme jar

The easiest way to create a reusable theme jar is to create a maven project with the following structure:

.Figure 2: Folder structure of a maven project needed for creating a theme jar
[source, filesystem]
----
[project-root]
├── src
│   └── main
│       ├── java
│       │   └── com
│       │       └── example
│       │           └── Dependencies.java (optional, add this only if it has NPM dependencies)
│       └── resources
│           └── META-INF
│               └── resources
│                   └── themes
│                       └── my-theme
│                           ├── components/
│                           ├── ...
│                           ├── ...
│                           ├── styles.css
│                           └── theme.json
└── pom.xml
----

The detailed steps are as follows:

. Create a new maven project using either IDE or Maven. Example maven command:
`mvn archetype:generate -DgroupId=com.example -DartifactId=reusable -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=1.4 -DinteractiveMode=false`

. Remove `src/test` as well as `App.java` from `src/main/java/`. (Optional)

. Update the pom.xml
- add the vaadin version property:
+
[source, pom]
----
<vaadin.version>19.0.0</vaadin.version>
----

- add dependency management:
+
[source, pom]
----
<dependencyManagement>
  <dependencies>
    <dependency>
      <groupId>com.vaadin</groupId>
      <artifactId>vaadin-bom</artifactId>
      <version>${vaadin.version}</version>
      <type>pom</type>
      <scope>import</scope>
    </dependency>
  </dependencies>
</dependencyManagement>
----

- update dependencies to only contain the following dependency:
+
[source, pom]
----
<dependency>
  <groupId>com.vaadin</groupId>
  <artifactId>vaadin</artifactId>
  <scope>provided</scope>
</dependency>
----

. Create the folders `src/main/resources/META-INF/resources/themes/` and the reusable theme folder.

. Add the theme assets to the theme folder.

. If the theme uses npm assets, add `Dependencies.java` with `@NpmPackage` annotations.

. Execute `mvn install` to create the theme jar.

NOTE: If the reusable theme jar is going to be used in Vaadin SpringBoot applications, consider using `com.vaadin.flow.component`, `com.vaadin.flow.theme` or `com.vaadin.shrinkwrap`
as the package of `Dependency.java` that are always being scanned. Otherwise, see <<flow/spring/tutorial-spring-configuration.html#special-configuration-parameters,Vaadin's spring package scanning>> documentation for using other custom packages.

=== Using the Theme in other Projects

. Add the theme JAR as a dependency in another Vaadin app project.
. Apply the theme with the `@Theme` annotation.

== Theming Embedded Web Components

To set a theme for an embedded component the `@Theme` annotation should be set on the class implementing `WebComponentExporter` for the web component.
The exporter class is also the recommended place to place the `@NpmPackage` annotations if any are needed.

As a general note any `@font-face` declarations should be put into a file `document.css` in the theme folder or
use the `documentCss` key in `theme.json` for npm imports.

.documentCss sample usage
[source, JSON]
----
{
  "documentCss": ["@fortawesome/fontawesome-free/css/all.css"]
}
----

Both of these will be put into the head element also for the embedded components that otherwise inject styles to the
shadow root of the embedded component.

All other styles are only available inside the web component shadow root and do not reach the outlying context.

.Sample theme annotation
[source, Java]
----
include::src/main/java/com/vaadin/flow/tutorial/theme/ThemedComponentExporter.java[tags=embeddedTheme, indent=0, group=Java]
----
