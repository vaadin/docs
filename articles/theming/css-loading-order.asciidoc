---
title: CSS Loading Order
order: 110
---

= CSS Loading Order

A theme is the recommended way to organize styles in a Vaadin application.
However, the other ways to import styles, namely the CSSImport and StyleSheet annotations, are still supported.
Styles applied with different approaches have different loading order.
That is, the priority they are computed in the browser and possibly override each other.

.For server-side views only
[NOTE]
This article considers only server-side views (Flow/Java).
Client-side views (Fusion/TypeScript) are not covered.

To keep the application theming and styles consistent and well-formed, it's important to consider the loading order of the following CSS sources:

. `Lumo` theme
. Application-specific bundled CSS added via <<importing-style-sheets#, @CssImport>> (_if used_)
. Styles added on Java side via <<ways-of-importing#, Page::addStylesheet>> (_if used_)
. Application-specific unbundled CSS added via <<importing-style-sheets#, @Stylesheet>> (_if used_)
. Parent theme (_if used_)
. Current theme

[NOTE]
`Lumo` theme won't be loaded and applied if another theme class is provided, namely the `@Theme(themeClass = MyCustomTheme.class)`, or if `@NoTheme` found.

The <<application-theme#extending-an-existing-application-theme, parent theme>> is an existing theme, whose styles and variables are inherited by the current theme.

"Current theme" is the theme used in your application.
It can be a theme created locally (as described in <<application-theme#, Application Theme>> chapter), <<application-theme#creating-a-reusable-applicationtheme, Reusable Theme>> packed as a `jar` dependency, or a <<creating-a-custom-theme#, Custom Theme>>.

Styles with a bigger loading order have a bigger precedence.
For example, the following style, if placed in `global.css` within the theme folder `frontend/themes/my-theme`, overrides the default `Lumo` font size `1rem` with `0.875rem`:

[source,CSS]
----
html {
    --lumo-font-size-m: 0.875rem;
}
----
