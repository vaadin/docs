---
title: Error Handling
description: Implementing error handling on the client side of a Hilla application.
order: 70
layout: page
---

= Error Handling

This article covers error handling on the client side of a Hilla application.
A robust client implementation should be able to deal with the most common cases.
This includes invalid endpoint calls, errors on the server side, and network outages.

== Endpoint Errors

Hilla determines the success of an endpoint call by inspecting the HTTP status code.
The server returns the https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/200[200 OK] code when it is able to process the request successfully, deserialize the method body, find and execute the particular method in the endpoint, and serialize its return value into a response.
If the status code of the response is not `200 OK`, Hilla throws an error on the client side.
The available parameters in the error and the specific class of the thrown error depend on the failure mode.
The most common ones are described below.

=== Missing Endpoint

If the request addresses an endpoint or a method name not present on the backend, the server responds with https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404[404 Not Found] and Hilla raises an error of type `EndpointError`.

=== Parameter Validation Error

If the method called in the request exists on the backend, but the parameter count and types do not match the endpoint method (see <<../advanced/type-conversion#,Type conversion between JavaScript and Java>> for more details about the type conversion rules), the server responds with https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/400[400 Bad Request] and Hilla raises an error of type [classname]#EndpointValidationException#.
The error instance contains a field `validationErrorData` holding validation error information for each invalid parameter.

For example, given the following endpoint expecting a `java.time.LocalDate` parameter:

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/fusion/errorhandling/DateEndpoint.java[]
----

A call with an illegal data parameter raises an [classname]#EndpointValidationException# with information about which parameters failed validation:

[source,typescript]
----
include::{root}/frontend/demo/fusion/errorhandling/catch-invalid-args.ts[]
----

Note that when using <<../data-binding/binder-validation#,server-side form validation>>, validation exceptions from the server are handled automatically by the form binder.

=== Server Side Errors

If the endpoint exists and its parameters could be passed, but its execution raises a Java runtime exception, the server responds with
https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500[500 Internal Server Error] and Hilla raises an error of type [classname]#EndpointError#.
As a special case, if the server-side exception is an instance of [classname]#dev.hilla.exception.EndpointException# or a subclass, the server instead responds with https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/400[400 Bad Request] and the exception type and message passed to the [classname]#EndpointException# in Java are available in the [classname]#EndpointError# instance via the `type` and `message` attributes.
For example, given the following endpoint implementation:

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/pwa/offline/DataEndpoint.java[]
----

The following client-side call to the endpoint method logs the error message and exception type:

[source,typescript]
----
include::{root}/frontend/demo/fusion/errorhandling/catch-error.ts[]
----

== Network Errors

When the server is not reachable due to outage or network disruption, an endpoint call results in a low-level network error, different from [classname]#EndpointError#.
Applications that support offline mode can wrap endpoint calls with exception-handling code returning a fallback value, by distinguishing between the error classes as follows:

[source,typescript]
----
include::{root}/frontend/demo/pwa/offline/ts-view-with-endpoint.ts[]
----

Also see <<../pwa/cache-client-side-data#,this article>> on caching endpoint data in local storage using a generic wrapper.

== Unexpected Response Contents

If the server replies with a response other than `200 OK`, and the string contained in the response is not valid JSON, an [classname]#EndpointResponseError# is raised.
The exception contains the response text as message and the https://developer.mozilla.org/en-US/docs/Web/API/Response[Response] object in the `response` field.

[role="since:com.vaadin:vaadin@V1.2"]
== Cancelled Requests

When a request is cancelled programmatically, the endpoint call promise will resolve with an `AbortError`.
This happens only when you explicitly cancel a request, as explained in <<../advanced/cancelling-endpoint-requests#,this article>>.
