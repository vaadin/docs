---
title: Handling Events
description: |
  Flow passes user interaction back to the server side as component events.
  The application can handle these events in Java code using an event handler.
order: 13
layout: page
---

[[application.events]]
= Handling Events

To handle user interaction, Vaadin Flow uses _event-driven programming_.
A user's interaction with the UI in the browser causes events.
Flow passes the events from the browser to the server side, where your application code can handle them.
You need to implement an _event listener_ for each component that the user can interact with.

You can implement event listeners with regular classes, anonymous classes, lambda expressions, or method references.

== Implementing an Event Handler

The traditional and verbose way to handle events is to implement an interface for the event type.

Each type of user interaction fires a different event type.
For example, clicking a button fires a [classname]`ClickEvent<Button>` event.
Such events can be handled by implementing a [interfacename]`ComponentEventListener` for the event type.
The events are handled in the [methodname]`onComponentEvent()` method.

An event listener needs to be added to the component with an event-type-specific method [methodname]`add*Listener()`, such as  [methodname]`addClickListener()`.
Many components also allow you to pass the listener in the constructor.

The following example shows how to implement a click listener as a local class:

[.example.show-code]
--
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/flow/application/events/EventsBasic.java[render,tags=snippet,indent=0]
----

[source,typescript]
----
include::{root}/frontend/demo/flow/application/events/events-basic.ts[hidden]
----
--

As shown in the example, you can access the originating component with [methodname]`getSource()` from the event.

== Lambda Expressions

Lambda expressions are the easy way in Java to implement interfaces that only have a single method to implement, which is the case with event listeners.

For example, a lambda expression can be used to handle button click events, as follows:

[.example.show-code]
--

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/flow/application/events/EventsLambda.java[render,tags=snippet,indent=0]
----

--

Most components, like Button above, allow you to pass a listener to the constructor.
For others, you need to use an [methodname]`add*Listener()` method, such as [methodname]`addClickListener()`, as in the other, earlier example.


[[application.events.anonymous]]
== Using Anonymous Classes

Anonymous classes are another shorthand way to implement handlers.
They are more explicit than lambda expressions with the parameter type, and so can make the code clearer.
They can also have a state, like normal classes.

The following example defines an anonymous class that inherits the [interfacename]`Button.ClickListener` interface.


[.example.show-code]
--

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/flow/application/events/EventsAnon.java[render,tags=snippet,indent=0]
----

--

Most components, such as Button, allow you to pass a listener to the constructor.
For others, you need to use an [methodname]`add*Listener()` method, such as [methodname]`addClickListener()`.

Note that to be able to access the component from the anonymous listener class, you can have a reference to the component that is declared before the constructor is executed.
This could be, for example, as a member variable in the outer class.
You can also get a reference to the component from the event object, as in the previous example.

== Handler Methods

You can also direct events to methods with method references:

[.example.show-code]
--

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/flow/application/events/EventsMethod.java[render,tags=snippet,indent=0]
----

[source,typescript]
----
include::{root}/frontend/demo/flow/application/events/events-basic.ts[hidden]
----

--
