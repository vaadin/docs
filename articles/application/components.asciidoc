---
title: Using Components
description: Using Vaadin components and/or third-party web components in your Hilla views.
order: 55
layout: page
---
= Using Components in Hilla

This article describes using Vaadin components and/or third-party web components in your Hilla views.

The examples assume a running Hilla application.
For information on setting up a Hilla project and defining a basic view, see the <<../tutorials/quickstart#, Quick Start Guide>>.
For a full list of components and detailed API documentation, see the Design System https://vaadin.com/docs/latest/components[Components section].

== Using Components From Hilla

When bootstrapping a Hilla project with the CLI, all the Vaadin components frontend packages are automatically installed.
To use a component in your own view, it is enough to import it into the view [filename]#.ts# file.
For example:

[source,typescript]
----
import '@vaadin/text-field';
----

You can then use the https://vaadin.com/docs/latest/components/text-field[Text Field] component (the `<vaadin-text-field>` element) in your view's [methodname]#render()# method:

[source,typescript]
----
render() {
  return html`
    <vaadin-text-field id="firstname" label="First name"></vaadin-text-field>
    <vaadin-text-field id="lastname" label="Last name"></vaadin-text-field>
  `;
}
----

== Component Class

The class name of a `<vaadin-_component-name_>` element follows the pattern `__ComponentName__`.
Importing the class gives type-safe access to the component's API.
For example:

[source,typescript, role=show-code]
----
include::{root}/frontend/demo/fusion/components/greeting-view.ts[render]
----

In the preceding example, the https://vaadin.com/docs/latest/components/combo-box[Combo Box] and https://vaadin.com/docs/latest/components/checkbox[Checkbox] components with the IDs `greeting` and `custom` respectively are mapped to typed class variables of the same names via the `@query` decorator.
The Checkbox event listener toggles the `allowCustomValue` property of the Combo Box, which defines whether the user can enter custom values into the field or is constrained to the alternatives in the items overlay.
Having strongly typed class variables helps to catch errors at compile time and allows code completion in the IDE.

== HTML Attributes

The following HTML attributes work as expected with most Vaadin components:
[cols="1,2", opts=header]
|===
|Property | Description

|`disabled`
|Whether the component is enabled; a disabled component cannot be interacted with.
|`title`
|Additional label associated with the component, shown as a tooltip.
|`hidden`
|Visibility; set this attribute to to hide the element.
|===

See the https://vaadin.com/docs/latest/components[Components section] for component-specific attributes and methods.
The https://vaadin.com/docs/latest/styling/custom-theme/styling-components[Styling Components] section describes how to customize the look and feel of the components.

== Using a Third-Party Component

You can also install and use other components in Hilla views.
To do this, you first need to install the component `npm` package from the https://npmjs.com[npm package registry] using the `pnpm` package manager.
For example, this command installs the latest version of the `vanilla-colorful` color picker and records the dependency in [filename]#package.json#:

`npx pnpm add vanilla-colorful`

After installation, the component is now ready to be imported and used in the Hilla view.

[NOTE]
If your project is configured to use the `npm` package manager instead of `pnpm`, use the command `npm install vanilla-colorful --save`.

The following example shows the hex triplet of the selected color in a https://vaadin.com/docs/latest/components/text-field[Text Field]:

[source,typescript, role=show-code]
----
include::{root}/frontend/demo/fusion/components/color-picker-view.ts[render]
----
