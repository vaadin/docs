---
title: Installing
layout: tabbed-page
tab-title: Overview
order: 10
---

= Installing

[.lead]
So, you want to develop applications using Vaadin? Awesome! Letâ€™s get you started.
First, you need to install the development tools.

Follow the development tools installation instructions for your operating system.

[.cards.quiet.large.hide-title]
== Instructions

[.card]
=== Windows
image::_images/windows.svg[32, 32, opts=inline, role=icon]
<<windows#,Install development tools in Windows>>

[.card]
=== macOS
image::_images/macos.svg[32, 32, opts=inline, role=icon]
<<macos#,Install development tools in macOS>>

[.card]
=== Linux
image::_images/linux.svg[32, 32, opts=inline, role=icon]
<<linux#,Install development tools in Linux>>

=== Next Step
If you already have the tools installed, you can start a new Vaadin project.

xref:../start#[Start a Project, role="button small"]



== Additional Tools

In addition to the tools you are required to install, some additional tools are used during development that are either optional or installed automatically for you.

=== Local Development Server

Vaadin applications are run by deploying them to a Java Servlet Container (a server application). All Vaadin starter projects come with an embedded servlet container that can be used during development.
You can also use an external servlet container, such as Tomcat, WildFly, or WebLogic.
IDEs include integration with external containers and one can make debugging easier, and more compatible if you use the same one for production.

=== Dependency Management

Managing Vaadin and other Java libraries can get tedious to do manually, so using a build system that manages dependencies automatically is recommended.
Vaadin is distributed in the Maven central repository, and can be used with any build or dependency management system that can access Maven repositories, such as Ivy or Gradle, and Maven.

The npm package manager is used for managing Vaadin frontend JavaScript dependencies.


=== Node.js, npm, and pnpm

Vaadin automatically downloads and installs (via its Maven plugin) supported versions of Node.js and npm into the `~/.vaadin` directory in the user's home directory, unless it detects that these tools are already installed globally.
If installed globally, Vaadin validates that the installed tools are of valid versions.

Other frontend tooling used by Vaadin, such as webpack and pnpm, are installed locally into each project by npm.
pnpm is a caching package manager that reduces the download time across multiple projects.

Node.js can be downloaded from https://nodejs.org/en/download/[https://nodejs.org/en/download/] and installing it automatically installs npm as well.

==== Proxy Settings for Downloading Frontend Toolchain
If you are behind a proxy server you should configure your proxy settings so Vaadin can use them to download the frontend toolchain.
Vaadin reads proxy settings from four places.
You can set your proxy data in:

. system properties
. [foldername]`{project directory}/.npmrc` file
. [foldername]`{user home directory}/.npmrc` file
. environment variables

The settings are read from the list above in order.
For example, if you set your proxy in system properties, other sources will be ignored.
The keys that you should use to define your proxy settings are as follows:

[cols=3,options=header,grid=rows,frame=none]
|===
|In System Properties and Environment Variables
|In .npmrc files
|Description

|HTTP_PROXY
|proxy
|A proxy to use for outgoing HTTP requests

|HTTPS_PROXY
|https-proxy
|A proxy to use for outgoing HTTPS requests

|NOPROXY
|noproxy
|A comma-separated string of domain extensions that a proxy should not be used for
|===

The `.npmrc` file structure is INI (like Java properties files).
It includes pairs of key-values separated by `=`.
Here is an example of the content of such a file with proxy settings:
```
proxy=http://myusername:s3cr3tpassw0rd@proxyserver1:8085"
https-proxy=http://myusername:s3cr3tpassw0rd@proxyserver1:8086"
noproxy=192.168.1.1,vaadin.com,mycompany.com
```

See the https://docs.npmjs.com/configuring-npm/npmrc[official npmrc documentation] to learn more.

++++
<style>
.icon {
  margin-top: 0 !important;
}
</style>
++++
