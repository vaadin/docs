---
title: Live Reload with HotswapAgent
order: 4
layout: page
---

= Live Reload with HotswapAgent

Live Reload works seamlessly in development mode using HotswapAgent for runtime class and resource redefinition.
We suggest running your Vaadin project with https://github.com/TravaOpenJDK/trava-jdk-11-dcevm/releases[TravaOpenJDK DCEVM], version 11.0.7+2 or later, which includes HotswapAgent with full Live Reload support.
Setup is in most cases as easy as downloading the JDK and configuring your IDE to use it.
If you want to know more about the features of HotswapAgent, the documentation in the http://hotswapagent.org/[HotswapAgent webpage] is a good resource.

== Step-by-step guide

. Download and unpack the latest version of https://github.com/TravaOpenJDK/trava-jdk-11-dcevm/releases[DCEVM JDK], add the JDK to your IDE, and set your project / run configuration to use it.
  Alternatively set `JAVA_HOME` to its location.
. In DCEVM 11.0.9 and later, HotswapAgent is disabled by default and needs the JVM parameter `-XX:HotswapAgent=fatjar` to work with Vaadin.
  Depending on your project technology stack, you may also want to apply <<configuration, additional configuration>>.
. Using your IDE's debug command, start the Vaadin application in development mode.
. Navigate to a view in your application, edit any Java file in the project, recompile, and the browser will automatically reload the page with the changes.

== [#configuration]#Additional configuration#

* HotswapAgent by default swaps in code changes automatically in Java debug mode.
  To hot swap code in run mode, add the line `autoHotswap=true` to `hotswap-agent.properties` (in Spring Boot projects), or add the following JVM parameter: `-javaagent:__<JAVA_HOME>__/lib/hotswap-agent.jar=autoHotswap=true` where `JAVA_HOME` is the Java home of the Trava JDK installation.
  Explicitly enabling automatic hotswapping may also be required with some older IDEs (e.g., NetBeans), or when running a Spring Boot application with Maven in forked mode.
* When using the Jetty Maven plugin together with HotswapAgent, ensure automatic restart is disabled (omit or set `<scanIntervalSeconds>` to a value of  `0` or less).
* The Live Reload quiet time (milliseconds since last Java change before refreshing the browser) can be adjusted by the parameter `vaadin.liveReloadQuietTime` in `hotswap-agent.properties`.
  The default is 1000 ms. Increase this value if you notice the browser refreshing before modified Java files have been fully compiled.
* Intellij IDEA: avoid using the `Build project automatically` and `compiler.automake.allow.when.app.running` options simultaneously, since this may trigger automatic reload before classes are hotswapped properly.

== Current limitations

* Since the server does not restart, modifications to startup listeners and code that connects front-end and backend components, such as adding a new `LitTemplate` class, are not reflected.
Modifications to routes are, however, picked up.
* With <<{articles}/flow/advanced/preserving-state-on-refresh#,`@PreserveOnRefresh`>>, view instances are reused when reloaded in the browser; hence, hotpatched changes to the view constructor will not be reflected until the view is opened in another browser window or tab.
* The Vaadin plugin included in the bundled HotswapAgent (1.4.1) does not work with servers that use application classloaders, for instance Wildfly, TomEE or Payara.
This bug is fixed in a https://github.com/HotswapProjects/HotswapAgent/releases/tag/1.4.2-SNAPSHOT[prerelease version of HotswapAgent].
To use it, download the JAR and pass the following JVM parameters to replace the bundled HotswapAgent with the corrected version: `-XX:+DisableHotswapAgent -javaagent:__<path/to/hotswap-agent.jar>__`
