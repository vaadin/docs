---
title: Run on Server in Eclipse
order: 8
layout: page
---

= Run on Server in Eclipse

You can run and debug your Vaadin application in Eclipse on the server of your choice (such as Tomcat or Wildfly).
You just need to install the corresponding application server plugin via the Eclipse Marketplace, then follow the plugin's instructions for setting up a development server and deploying your projects.
After successful installation and configuration, the configured server will be visible in the "Servers" pane.
Via this pane you start/stop the server and deploy/remove workspace modules.

The `prepare-frontend` goal of the Vaadin Maven plugin should be run in the project directory and is responsible for generating a token file including among other things the path to the project directory when running in development mode (required for Webpack and npm/pnpm).
This file is called  `flow-build-info.json` file and must be included in the WAR file before deployment.
In normal cases when using `m2e` (Eclipse Maven Integration), this happens automatically on project configure / deploy as the Vaadin Maven plugin embeds the following lifecycle control metadata:

```xml
<lifecycleMappingMetadata>
  <pluginExecutions>
    <pluginExecution>
      <pluginExecutionFilter>
        <goals>
          <goal>prepare-frontend</goal>
        </goals>
      </pluginExecutionFilter>
      <action>
        <execute>
          <runOnIncremental>false</runOnIncremental>
          <runOnConfiguration>true</runOnConfiguration>
        </execute>
      </action>
    </pluginExecution>
  </pluginExecutions>
</lifecycleMappingMetadata>
```

== Running `prepare-frontend` manually
If for some reason `prepare-frontend` is not triggered automatically, the WAR may be created without `flow-build-info.json` and Vaadin will default to the current working directory for the frontend build.
For server deployments the cwd may be different from the project directory, so if it cannot be identified as a Maven or Gradle project directory `DevModeInitializer` will raise an exception during server startup. For example:

```
java.lang.IllegalStateException: Failed to determine project directory for dev mode. Directory '/opt/wildfly-19.1.0.Final/bin' does not look like a Maven or Gradle project. Ensure that you have run the prepare-frontend Maven goal, which generates 'flow-build-info.json', prior to deploying your application
```

You may then tell Eclipse to run `prepare-frontend` by creating a Maven Run Configuration (*Run*/*Run Configurations...*) with the target `vaadin:prepare-frontend` and running it manually.
You will also need to rebuild the WAR and publish it again to the server.
