---
title: Run on Server in IntelliJ IDEA Ultimate
order: 7
layout: page
---

= Run on Server in IntelliJ IDEA Ultimate

You can run and debug your Vaadin application in IntelliJ IDEA Ultimate Edition on the server of your choice (such as Tomcat).
ifdef::web[]
You just need to enable the corresponding application server plugin as explained on Jetbrains' documents https://www.jetbrains.com/help/idea/enabling-application-server-integration-plugins.html[here].
endif::[]
ifndef::web[]
You just need to enable the corresponding application server plugin in the Plugins section in IntelliJ Settings/Preferences.
endif::[]

First of all, you should create a *Run/Debug Configuration* for the server you want.
ifdef::web[]
See https://mkyong.com/intellij/intellij-idea-run-debug-web-application-on-tomcat/[IntelliJ IDEA – Run / debug web application on Tomcat] for detailed instructions.
The https://www.jetbrains.com/help/idea/creating-and-editing-run-debug-configurations.html[Jetbrains' documents] on this topic may also be helpful.
endif::[]
Note that run on server is not available in IntelliJ IDEA Community Edition.
Then, you should make sure that the `prepare-frontend` goal of `vaadin-maven-plugin` is called before the build.
So, you need to have the plugin added to your `pom.xml`, for example as follows:

```xml
<build>
    <plugins>
        <plugin>
            <groupId>com.vaadin</groupId>
            <artifactId>vaadin-maven-plugin</artifactId>
            <version>${vaadin.version}</version>
            <executions>
                <execution>
                    <goals>
                        <goal>prepare-frontend</goal>
                    </goals>
                </execution>
            </executions>
        </plugin>
    </plugins>
</build>
```

The `prepare-frontend` goal is automatically called when you run your application with a Maven plugin, such as with `mvn jetty:run`.
When you want to run your application on a server that you installed separately, IntelliJ builds the war file and does not use Maven to build it.
So, we should tell IntelliJ to run `prepare-frontend` before building the war.
In the following, we explain two ways to do that.

== Add `prepare-frontend` to Run/Debug Configuration

You need to do the following steps:

1. In the *Run/Debug Configuration* dialog, go to menu:Server[Before launch].
2. Press Add (btn:[+]) button and select Run Maven Goal.
+
image:images/tomcat9-run-config.png[Tomcat Run/Debug Configuration]
3. In the opened dialog enter `vaadin:prepare-frontend` as the *Command line* and click btn:[OK].
4. Move the new item to the top of *Before launch* list by clicking btn:[▲] as many times as needed.
+
image:images/before-launch-list.png[Before launch]
5. Click btn:[OK].

Now, you can run/debug your application.

== Execute `prepare-frontend` Before Build

You can make IntelliJ to run `prepare-frontend` before each build.
To do so open Maven window with menu:View[Tool Windows > Maven].
Then, open `vaadin` under the Plugins section, right-click on `prepare-frontend`, and select *Execute Before Build*.

image:images/execute-before-build.png[Execute Before Build, width=75%]

[NOTE]
Some application servers, like Weblogic, cache jar files of applications in temp folders.
When you are upgrading the Vaadin version of your application, you may have to clear those folder to make sure that the new jar files are picked up and no conflict occurs.
