---
title: Core Concepts
order: 2
layout: page
---
= Core Concepts

In this article, we go through some concepts and features central to Vaadin development.
While you do not necessarily need to know about all of them, they are good background knowledge about how Vaadin works.

== Key Technologies

Vaadin is based on the following key technologies:

Java::
Java is the leading server-side programming language for large web applications.
With object-oriented programming and strong typing, it provides compile-time type safety, which makes applications more robust and easier to develop when they get large.
The rich ecosystem around Java makes it ideal for many kinds of modern applications.
+
Vaadin uses Java for server-side applications and views built with Flow, as well as for server-side Java endpoints in Fusion TypeScript applications.
+
See the https://docs.oracle.com/javase/tutorial/java/index.html[Java Tutorials] (Oracle) for more information about the Java language.

TypeScript::
TypeScript is a statically typed extension of JavaScript, the native language in all modern browsers.
It is compiled into plain JavaScript.
+
Vaadin Fusion is a framework for developing web applications in TypeScript for the front end and Java for the back end.
+
See https://www.typescriptlang.org/[TypeScript.org] for more information about the TypeScript language.

Web Components::
Web Components are a component model based in several technologies: _custom HTML elements_, _shadow DOM_ that enables encapsulation, and _HTML templates_.
All Vaadin components are web components, which can be used both from server-side Java with Vaadin Flow and in TypeScript applications with Vaadin Fusion.
You can also use them with plain JavaScript.
+
See https://www.webcomponents.org/[webcomponents.org] for more information about Web Components.

Cascading Stylesheets (CSS)::
  Vaadin applications are styled using cascading style sheets (CSS).
  Styling begins with a built-in _theme_, which can be modified and refined with application-specific style sheets.
+
See <<{articles}/theming/overview#, Theming>> on how you can style Vaadin applications with CSS.

Java Servlets::
Vaadin server-side applications run as Java servlets.
A Java Servlet is a class that is executed in a Java web server (a __Servlet
container__) to extend the capabilities of the server.
In practice, it is normally a part of a __web application__, which can contain HTML pages to provide static content, and JavaServer Pages (JSP) and Java Servlets to provide dynamic content.

npm::
The Node.js Package Manager (npm) is used for managing JavaScript dependencies.
Once all the JavaScript dependencies are collected, they are used for building the frontend bundle, together with CSS style sheets.

== Rapid Web Application Development

At Vaadin, we pride ourselves on developer productivity.
We feel that developers should be able to forget the framework they run on, so that they can concentrate on developing the best application they can.

For rapid application development, Vaadin offers:

* Customizable project templates in link:https://vaadin.com/start/latest[Get Started with Vaadin]
* link:https://vaadin.com/start/latest[Downloadable application examples]
* Maven archetypes
* https://vaadin.com/eclipse[Eclipse plugin] for rapid project creation
* https://vaadin.com/designer[Vaadin Designer] for interactive UI designing

== Everything is a Component

Vaadin uses a component-based programming model to build UIs.
Reusable components are the cornerstone of Vaadin.
Everything in the UI is a component.
To have a button, you create a <<{articles}/ds/components/button#, Button>> component.
To have a text input field, you create a <<{articles}/ds/components/text-field#, Text Field>> component.
You can build your own components and views by combining existing components and layouts, or by creating a new web component.

In Fusion, you can use web components directly like any HTML elements, and define you own by extending LitElement.
In Flow, each server-side component is connected to web components and HTML elements on the client-side.

The following is a small but complete Vaadin Flow application written in Java:

[[figure.introduction.concepts.component]]
image:images/concepts-component.png[width=80%]

In the example, the application view itself is a UI component that extends one of Vaadin’s basic layouts – [classname]#VerticalLayout#.
In the constructor, we add a [classname]#H1# component (which corresponds to a [elementname]#h1# HTML tag) to the layout to say hello to the entire world.

////
To make it an application, we map the view to an empty route with the `@Route("")` annotation, so when this application is deployed to a local server, the view is available on your machine at `http://localhost:8080/`.
////

== Event-Driven Programming

To make the applications interactive, Vaadin provides an event-driven programming model.
User interaction causes events, which are handled by event listeners.

[.example.show-code]
--

In Java code, you handle button clicks by adding a click listener with [methodname]#addClickListener()#, typically as a lambda expression:

[source, Java]
----
include::{root}/src/main/java/com/vaadin/demo/component/button/ButtonBasic.java[render,tags=snippet,indent=0,group=Java]
----

In TypeScript, you add an event listener to the element:

[source, TypeScript]
----
include::{root}/frontend/demo/component/button/button-basic.ts[render,tags=snippet,indent=0,group=TypeScript]
----

--

== Routing and Navigation

Routing maps URL addresses to views and other resources.
It is closely connected with navigation from one view to another.

Routing is handled in different but compatible ways in Flow and Fusion.
In Flow, you annotate each Java class that implements an application view with the `@Route` annotation:
In Fusion, you define the routes in the `index.ts` entry point.

[.example]
--

[source, Java]
----
@Route(value = "company")
public class CompanyView extends Div {
    ...
}
----

[source, TypeScript]
----
export const router = new Router(document.querySelector('#outlet'));
router.setRoutes([
  // A single route here
  {
    path: 'company',            // The route
  	component: 'company-view',  // The component handling the route
  	action: async () => { await import ('./views/users/users-view'); },
  },
  ...serverSideRoutes
]);
----

--

You can mix TypeScript and server-side Java views; the `serverSideRoutes` variable in the example above includes the Java views.

See in <<{articles}/flow/routing/tutorial-routing-annotation#,Routing and Navigation in Flow>> and <<{articles}/fusion/routing/defining#, Routing and Navigation in Fusion>> for more information.
