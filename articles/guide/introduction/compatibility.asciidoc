---
title: Compatibility and Versioning
order: 3
layout: page
---
= Compatibility and Versioning

== Compatibility

Vaadin is designed to be a one-stop solution to create web UIs, but you can also use some of its parts in isolation.

For the best effect, we recommend that you combine Vaadin with a well-documented Java back-end framework such as Spring or JavaEE/CDI.
With these combinations, Vaadin can provide everything you need for fully featured web applications.

[cols="1,2",options=header]
|===
|Category|Products
|JDK|Java 8 or later; OpenJDK, Amazon Corretto, Oracle JDK
|Programming Languages|Java, Groovy, Kotlin, etc.
|Java Frameworks|Spring, JavaEE/CDI, etc.
|IDEs|Eclipse IDE, NetBeans IDE, IntelliJ IDEA, VS Code, etc.
|Servlet Containers|Apache Tomcat, Apache TomEE, Wildfly, Glassfish, JBoss, Jetty, etc.
|Server-Side Build Management|Maven (3 or newer), Ivy, Gradle (5.6)
|Client-Side Build Management|Node (10 or newer) / npm (5.6 or newer)
|Browsers|Firefox, Chrome, Safari, IE11, Edge, etc. (See release notes)
|===

Please see the release notes for the particular Vaadin version you are using for a more complete list of requirements and compatibility.

On the client-side, any Vaadin component can be used independently without the full framework.
Dependencies are managed through npm.
In addition, Vaadin Router works well on its own, and can be used in lightweight client-side applications.

== Versioning

Most Vaadin users only need to worry about the platform version (such as 14.0.10).
The platform versioning follows a standard major-minor-maintenance pattern.
Maintenance versions are released typically every second week.

Since version 10, the platform is following a release train cadence, where majors are released according to a specified, faster schedule.
Some versions are labeled with Long Term Support (LTS).
This allows us to quickly release new features to the public, while providing stable upgrade points for our users.
You can learn more about the release cycle here: https://vaadin.com/roadmap

The platform is built from a number of separate parts, each a product itself.
For instance, each component is a separate product with its own version, as are the communication modules, etc.
A platform release is made from a collection of the latest stable versions of each part, tested to work together without issues.
The Maven BOMs control which version of each JAR file is downloaded.
Developers are free to override the version of any dependency, e.g. use a newer release of a specific component before that version is included in the platform.
