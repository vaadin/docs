---
title: Loading pass:[&] Saving Form Data
description: Loading data to Binder and submitting it for saving.
order: 2
layout: page
---

= Loading & Saving Form Data

Once your bindings are set up, you are ready to fill the bound UI components with data from your business objects.

== Loading Data to Binder

You can use the [methodname]`read()` method in the binder to read values from a business object instance into the UI components.

[source,typescript]
----

this.binder.read(person);
----

Using [methodname]`reset()` resets to the previous value, which is initially empty.

[source,typescript]
----
this.binder.reset();
----

There is also a [methodname]`clear()` method, which sets the form to empty.
[source,typescript]
----
this.binder.clear();
----

== Saving Data

You can use [methodname]`submitTo()` to submit a value to a callback.
The [methodname]`submitTo()` method is an asynchronous function, so you can use `await` to wait for the result.

The benefits of using [methodname]`submitTo()` are:

* The binder can track the submission progress, such as to disable a save button when a submission is ongoing.

* Submission failures are handled automatically, so there is no need to do an explicit `try-catch`.

For example, you can use [methodname]`submitTo()` to submit to an endpoint method, as follows:

[source,typescript]
----
await this.binder.submitTo(viewEndpoint.savePerson);
----

Alternatively, you can set up an [methodname]`onSubmit()` callback in a configuration object when creating [classname]`Binder`.
Then, when submitting, you can just call the [methodname]`binder.submit()` method.
[source,typescript]
----
private binder = new Binder(this, PersonModel, {
  onSubmit: viewEndpoint.savePerson
});

binder.submit();
----
