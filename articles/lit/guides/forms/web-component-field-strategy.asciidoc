---
title: Binding Data to Custom Components
description: How to create a form with a custom web component.
order: 100
layout: page
---

= Binding Data to Custom Components

While Vaadin components are supported out-of-the-box, the client-side <<binder#,Form binder>> can be configured to support any web component. This article explains how to create a form with a custom `<my-text-field>` web component.

Using a custom web component in a form requires two steps:

. Create a _field strategy_ that tells the form binder how to get and set the component `value` and other properties, such as `required` and `errorMessage`; and
. Create a custom _binder_ subclass that associates the new custom field strategy with the custom web component tag.


== Example of a web component

Consider the following LitElement component for use in form binding. It doesn't expose properties such as `required`, `invalid` and `errorMessage`. This is why the default field strategy that works for all Vaadin components would not work here.

.Custom field web component
[source,typescript]
----
include::{root}/frontend/demo/fusion/forms/field-strategy/my-text-field.ts[tags=snippet]
----

== Defining a field strategy

The first step towards using a web component as a field is to define a field strategy. You need to implement the [interfacename]`FieldStrategy` interface, as in the following example:

.Example field strategy
[source,typescript]
----
include::{root}/frontend/demo/fusion/forms/field-strategy/my-text-field-strategy.ts[tags=snippet]
----

== Using the field strategy

The second step in using a custom web component is to make the Binder class a subclass and override the [methodname]`getFieldStrategy(element)` method to use a custom field strategy for any `my-text-field` components it finds in a form. This method receives as arguments the element which is mapped to the component and the model, which can in turn affect the binding strategy. For example, the `Combo Box` component has specialized support for objects and arrays.

.Using a custom field strategy in the binder
[source,typescript]
----
include::{root}/frontend/demo/fusion/forms/field-strategy/my-binder.ts[]
----

You can now use `my-text-field` components in a form, provided that you use the extended [classname]`MyBinder` class to handle data binding in that form.

.Using a field web component in a form
[source,typescript]
----
include::{root}/frontend/demo/fusion/forms/field-strategy/my-form.ts[]
----
