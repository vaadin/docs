---
title: Production Build
description: How to create a production ready package of an application, which can then be deployed.
order: 10
---

= Production Build

By default, Hilla applications are configured to run in development mode. This requires a bit more memory and CPU power, but it makes for easier debugging. When deploying your application to users, you should instead create a production build.


== Production Configuration

The [filename]`pom.xml` file in a Hilla project has the following built-in Maven configuration to create a production build:

.pom.xml
[source,xml]
----
<profile>
    <!-- Production mode is activated using -Pproduction -->
    <id>production</id>
    <build>
        <plugins>
            <plugin>
                <groupId>dev.hilla</groupId>
                <artifactId>hilla-maven-plugin</artifactId>
                <version>${hilla.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>build-frontend</goal>
                        </goals>
                        <phase>compile</phase>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</profile>
----

The actual content of the profile depends on the environment in which your application is running. However, all of the variants call the Maven goal `hilla:build-frontend`.


== Creating a Production Build

To create a production build, you can execute `mvn clean package -Pproduction`. This builds a `JAR` or `WAR` file with all of the dependencies and front-end resources compiled and ready to be deployed. The file is created in the `target` folder after the build completes.

If you don't have the production Maven profile in your `POM` file, the easiest way to get it is to create a project base using the CLI, and then copy the production profile from the downloaded `POM` file.

Having a production build as a separate Maven profile is recommended so that you don't get any unexpected problems due to production settings during development.

.Building for 64-Bit
[NOTE]
If your operating system is 64-bit, make sure to use a 64-bit JDK installation, as well.


== Excluding Development Server Module

The `Vite` server integration and live-reload features, which are available only during development, are contained in the module `com.vaadin:vaadin-dev-server`. It's recommended that you exclude this module from production builds. You can do that by adding the following dependency exclusion to the `<dependencies>` section in the `production` profile:

.pom.xml
[source,xml]
----
<profiles>
    <profile>
        <id>production</id>

        <!-- above production build configuration -->

        <dependencies>
            <dependency>
                <groupId>com.vaadin</groupId>
                <artifactId>vaadin-core</artifactId>
                <exclusions>
                    <exclusion>
                        <groupId>com.vaadin</groupId>
                        <artifactId>vaadin-dev</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>
        </dependencies>
    </profile>
</profiles>
----

This results in less code and fewer dependency libraries being bundled in the production application.


== Transpilation & Bundling

Transpilation in Hilla means converting all ES6 JavaScript to ES5 JavaScript format for older browsers. All Vaadin components are written using ES6, and consist of several JavaScript and CSS files. Transpilation makes sure the newer JavaScript code also works in browsers which don't support all of the latest JavaScript features.

During the build, minimization is carried out to make the files smaller. When minifying code, it's often obfuscated, which makes it harder to read. Hence, this isn't done during development.

Bundling is an optimization in which multiple files are merged to a single collection. This is so that the browser doesn't need to request so many files from the server. As a result, it helps the application to load faster.

//// Must be massively updated

== Maven Plugin Goals & Goal Parameters

=== `prepare-frontend`

The `prepare-frontend` goal validates whether the `node` and `npm` tools are installed and aren't too old (i.e., `node` version 10 or later; `npm` version 5.6 or later). It also installs them automatically, if they're missing, to the `.vaadin` folder in the user's home directory. If they're installed globally, but too old, there's an error message suggesting that you install newer versions. `Node.js` is needed to run `npm` to install front-end dependencies and `Vite`, which bundles the front-end files served to the client.

Additionally, it visits all resources used by the application and copies them to the `node_modules` folder. This is so that they're available when `Vite` builds the frontend. It also creates or updates the [filename]`package.json`, [filename]`tsconfig.json` and [filename]`vite.generated.json` files.

pass:[<!-- vale Vaadin.ThereIs = NO -->] 

There are a few parameters for this goal:

*includes* (default: `&#42;&#42;/&#42;.js,&#42;&#42;/&#42;.css`)::
    Comma-separated wildcards for files and directories that should be copied. The default is only [filename]`.js` and [filename]`.css` files.

*npmFolder* (default: `${project.basedir}`)::
    The folder where the [filename]`package.json` file is located. The default is the project root folder.

*webpackTemplate* (default: `webpack.config.js`)::
    Copy [filename]`webapp.config.js` from the specified URL if it's missing. The default is the template provided by this plugin. Set it to an empty string to disable the feature.

*webpackGeneratedTemplate* (default: `webpack.generated.js`)::
    Copy [filename]`webapp.config.js` from the specified URL if it's missing. The default is the template provided by this plugin. Set it to an empty string to disable the feature.

*generatedFolder* (default: `${project.build.directory}/frontend/`)::
    The folder where Flow puts generated files that'll be used by `webpack`.

*require.home.node* (default: `false`)::
   If set to `true`, always prefer `Node.js` automatically downloaded and installed into the `.vaadin` directory in the user's home directory.


=== `build-frontend`

This goal builds the front-end bundle. It's a complex process involving several steps:

- Update [filename]`package.json` with all the `@NpmPackage` annotation values found in the classpath and automatically install these dependencies.
- Update the JavaScript files containing code to import everything used in the application. These files are generated in the `target/frontend` folder, and are used as the entry point of the application.
- Create [filename]`webpack.config.js`, if it's not found, or update it if some project parameters have changed.
- Generate JavaScript bundles, chunks and transpile to ES5 using the `webpack` server. The target folder for `WAR` packaging is `target/${artifactId}-${version}/build`; for `JAR` packaging, it's `target/classes/META-INF/resources/build`.

There are also a few parameters for this goal:

pass:[<!-- vale Vaadin.ThereIs = YES -->]

*npmFolder* (default: `${project.basedir}`::
    The folder where the [filename]`package.json` file is located. The default is the project root folder.

*generatedFolder* (default: `${project.build.directory}/frontend/`)::
    The folder where Flow puts generated files that'll be used by `webpack`.

*frontendDirectory* (default: `${project.basedir}/frontend`)::
    The directory with the project's front-end source files.

*generateBundle* (default: `true`)::
    Whether to generate a bundle from the project front-end sources.

*runNpmInstall* (default: `true`)::
    Whether to run `pnpm install` -- or `npm install`, depending on the *pnpmEnable* parameter value -- after updating dependencies.

*generateEmbeddableWebComponents* (default: `true`)::
    Whether to generate embedded web components from [classname]`WebComponentExporter` inheritors.

*optimizeBundle* (default: `true`)::
    Whether to include only front-end resources used from application entry points -- the default -- or to include all resources found on the class path. It should normally be left to the default, but a value of `false` can be useful for faster production builds or debugging discrepancies between development and production builds.

*pnpmEnable* (default: `false`)::
    Whether to use the `pnpm` or `npm` tool to handle front-end resources. The default is `npm`.

*useGlobalPnpm* (default: `false`)::
    Whether to use a globally installed `pnpm` tool instead of the default supported version of `pnpm`.

pass:[<!-- vale Vaadin.Terms-FrontendBackend = NO -->]


=== `clean-frontend`

This goal cleans frontend files that may cause inconsistencies when changing versions. It's suggested that you don't add the goal as a default to [filename]`pom.xml`, but instead to use it with `mvn vaadin:clean-frontend` when necessary.

pass:[<!-- vale Vaadin.Terms-FrontendBackend = YES -->]

Executing the `clean-frontend` goal removes a few things:

- the package lock file;
- the generated frontend folder which is by default `frontend/generated`; and
- the `node_modules` folder, but this might need manual deletion.

The goal also cleans all dependencies that are managed by the framework, and any dependencies that target the build folder from the [filename]`package.json` file.

The `clean-frontend` goal supports the same parameters as `prepare-frontend`.
////
