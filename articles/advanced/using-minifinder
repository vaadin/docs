---
title: Using the Minifinder tool for Eclipse
order: 41
---

= Minifinder for Eclipse 
:toclevels: 2

pass:[<!-- vale Vaadin.ProductName = NO -->]

Minifinder for Eclipse is a tool built by Vaadin to help Vaadin 8 developers understand how well their applications can be transformed by Vaadin’s semi-automated modernization service called https://vaadin.com/vaadin-8-upgrade-automation-service[V8 Upgrade Automation]. 

Minifinder works by parsing the Java code of your projects, resolving as many of your application’s references to Vaadin libraries as it can, and outputting the high-level results in the Console of your Eclipse IDE. You can copy the report and share with your colleagues or your Vaadin experts in order to discuss the benefits and make an informed decision on how to move forward.


=== Limitations
To make this application as easy as possible to be used at companies with strict security policies regarding installing tools in their network, the application is limited in what it can do:
- Minifinder runs completely locally and will not connect to the Internet
- It will not change your code
- Minifinder will write all output to the console and not write to disk


=== Instructions for use
To use Minifinder for Eclipse, follow these steps:
1. Ensure your Eclipse is ready to use the plugin
2. Ensure your application projects are ready to be analyzed
3. Run the analyzer, and
4. Interpret the results.


==== Ensure your Eclipse is ready to use the plugin
Minifinder is distributed as a single-file Eclipse plugin “jar” that you can copy into the Eclipse /plugins or /dropins folder from which you will open your Vaadin 8 project. You may need to restart Eclipse after copying the file. If you have installed it correctly, you will see a button with a Vaadin logo appear in your toolbar:

Always make sure that you have the most up to date version of Minifinder because it will contain the latest set of transformation rules that are available with the V8 Upgrade Automation.

==== Ensure your application projects are ready to be analyzed
Minifinder depends on the Eclipse environment to resolve all names in your code with their corresponding types and packages in which they are declared. Eclipse is very robust and can resolve names in sources that contain errors, so Minifinder may work even if your project has hundreds of Maven errors or Java errors. Having said that, the fewer errors you have the better so we would encourage you to ensure your project is free of red lines before launching Minifinder.

One thing you might consider is to close any project in your workspace of which you know that it does not contain any Vaadin 8 references. This will prevent Minifinder from analyzing any code of which you know that it is not relevant to Vaadin 8 and you might shave off a few minutes from the analysis.


==== Running the analyzer
Click the button in the toolbar that appeared when you installed the plugin. The tool is set up with the defaults that work with over 97% of all Vaadin 8 applications so pressing the [OK] button should be all you need to do.

A progress bar should appear that shows the progress of the analysis.

==== Interpreting the results
When the progress bar reaches 100% and disappears, the analysis will be ready and you can view the output. Minifinder for Eclipse puts the output in the Eclipse Console. 

Window > Show View > Console

The report is a text-only formatted output with some summarized stats on the references in the project code to Vaadin 8. The emphasis of the report is on method invocations (invocations that appear in the project code of methods that are declared in classes from Vaadin 8) and constructor invocations (“new” keywords matched with constructors that are declared in classes from Vaadin 8). 

Note both of these invocations are included in the stats if the method or constructor invoked is declared in a Vaadin class. This means that invocations on custom subclasses of Vaadin components in your own project will be included in the statistics if the method is inherited from its Vaadin super class. It also means that invocations on custom subclasses in your project will not be included in the stats if the methods invoked are declared in your own custom subclass. 

The stats for method and constructor invocations include an indication of “coverage.” In general, the higher the coverage rate, the better. Coverage refers to a situation that is known and is dealt with with high confidence that no further developer work will be needed. Said otherwise:
- The transformation has been established for this declaration and the transformation tool contains a rule that handles it, and
- The transformation requires no change, or
- The transformation requires a change and this change is made by the tool with no manual effort required

Coverage assumes that the modernized application will use Vaadin 24 Classic Components and a handful of utility methods that help bridge the gap in behavior between Vaadin 8 and Vaadin 24. 






