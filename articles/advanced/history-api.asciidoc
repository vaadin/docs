---
title: History API
description: Using the History API to access and modify the browser history from the server side.
order: 120
layout: page
---


= History API
:toc:

The [classname]`History` API allows you to access the browser navigation history from the server side.
It also allows you to modify the navigation history by adding a new entry to it or changing the current entry.
For example, you can change the current URL shown in the browser address bar without invoking any navigation.
The history is always bound to the current browser window / frame, so you can access it through the [classname]`Page` object (available through the [classname]`UI`).

[source,java]
----
History history = UI.getCurrent().getPage().getHistory();
----

== Traversing the History

With the methods [methodname]`forward()`, [methodname]`back()` and [methodname]`go(int)`, you can programmatically traverse the browser's history entries.
The methods correspond to the user actions on the browser's back and forward buttons.

[source,java]
----
history.back(); // navigates back to the previous entry

history.forward(); // navigates forward to the next entry

history.go(-2); // navigates back two entries
history.go(1); // equal to history.forward();
history.go(0); // will reload the current page
----
[NOTE]
Triggering the [methodname]`forward()`, [methodname]`back()` and [methodname]`go()` methods will asynchronously trigger a [classname]`HistoryStateChangeEvent` if the history entries are for the same document; for example, if the entries share the
https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy[same origin].

== Handling User Navigation

If you want to manually handle navigation events, you can replace it by setting a handler for navigation events using [methodname]`history.setHistoryStateChangeHandler(HistoryStateChangeHandler)`.
It will be notified when:

* the user navigates back or forward using the browser buttons;
* the navigation was done programmatically from server-side Java code or
client-side JavaScript;
* the user clicks a link marked with the `router-link` attribute.

[source,java]
----
history.setHistoryStateChangeHandler(this::onHistoryStateChange);

private void onHistoryStateChange(HistoryStateChangeEvent event) {
    // site base url is www.abc.com/
    // user navigates back from abc.com/dashboard to abc.com/home
    event.getLocation().getPath(); // returns "home"
}
----
[NOTE]
The server-side history state change event is not fired if only the https://developer.mozilla.org/en-US/docs/Web/Events/hashchange[hash] has changed.
Hash is always stripped from the location sent to server.
Hash is a browser feature not intended for use on the server side.

== Changing History

You can update the history by either pushing new entries to the history, or by
replacing the current entry.
You may optionally provide a JSON value as the _state_ parameter.
This state value will be available via [methodname]`LocationChangeEvent:getState()` when the entry next visited.
[source,java]
----
// adds a new history entry for location "home", no state
history.pushState(null, "home");

// replaces the current entry with location "about" and a state object
JsonValue state = Json.create("preview-mode");
history.replaceState(state, "about");
----

[NOTE]
The URL used with [methodname]`pushState()` and [methodname]`replaceState()` must be for the https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy[same origin] as the current URL.
Otherwise, browser will throw an exception and the history will not be updated.

[NOTE]
If you use either [methodname]`pushState()` or [methodname]`replaceState()`, the framework internal scroll position restoration on navigation will not work, since it stores data in the `history.state` to keep track of the scroll position.
