---
title: Multi-Module Engine
description: Using a Hilla Engine â€” a pluggable set of Java bytecode parser & TypeScript AST generator.
order: 110
layout: page
---

= Using a Multi-Module Engine

Hilla Engine binds application client side to a server side.
For it, Engine generates TypeScript representation of Java endpoints and all types endpoints use, and takes control over the communication between the server and the client.

== Architecture

Hilla Engine consists of three parts:

- *Java Bytecode Parser*.
It reads the Java bytecode and generates an OpenAPI scheme.
- *TypeScript AST generator*.
It reads the OpenAPI scheme and generates TypeScript endpoints that could be used in the further frontend development.
- *Runtime Controller*.
It provides the runtime communication between the server and the client.

The Engine is designed to be flexible, so all parts of the Engine are pluggable.
It means that using the provided primitives you could alter the default behavior or add a new one.

== Features

- *Bytecode-based*.
Engine could consume any language based on the Java bytecode, e.g. Kotlin or Scala.
- *TypeScript AST based*.
Engine uses the original TypeScript compiler which makes it support the latest changes in the language.
- *Flexible*.
Thanks to the pluggability, the Engine behavior (including the default one) is flexible.
E.g., if you use the custom `Nonnull` annotation, you could set the Nonnull plugin to work with it instead of defaults (or along with defaults).


== Configuration

To configure


