---
title: Topic API
order: 5
layout: page
---

[[ce.topic-tutorial]]
= Getting Started with the Topic API

This tutorial shows how to use the low-level Collaboration Engine APIs,
by updating and subscribing to a topic.

To be more productive in creating collaborative applications, it's recommended
to use the high-level APIs as described in the <<tutorial#, Getting Started Tutorial>>.

[[ce.topic-tutorial.setup]]
== Prepare the Application

Follow the preparation steps in the
<<tutorial#ce.tutorial.setup, Getting Started Tutorial>>.

[[ce.topic-tutorial.add-collaboration-features]]
== Add Collaboration Features
This tutorial will build a view with a checkbox where the user can choose whether they are in a Friday mood.

=== Create a Simple View

First, create the view with a checkbox but not yet any collaborative functionality.

[source, Java]
----
include::{root}/src/main/java/com/vaadin/demo/ce/TopicView.java[render,tags=topic-view;add-components;!*,indent=0,group=Java]
----

=== Define Topic Connection

Sharing data between multiple users happens through a `TopicConnection` instance.
By default, the connection is deactivated until its related component is attached to the UI.

Open a connection to the `tutorial` topic and define the activation callback
which will be triggered when the current `TopicView` component (i.e. `this`) is attached.
The user who is related to the topic connection must be defined.

[source, Java]
----
include::{root}/src/main/java/com/vaadin/demo/ce/TopicView.java[render,tags=user-info;open-topic;!*,indent=0,group=Java]
----

The activation callback should return a registration that is run when the connection is deactivated.
Since we are not yet registering any own listeners that need cleanup, we can just return `null`.

=== Define a category in the Topic
The topic stores collaborative data in named maps. In the activation callback, get a map by its name:

[source, Java]
----
include::{root}/src/main/java/com/vaadin/demo/ce/TopicView.java[render,tags=open-topic;get-map;!*,indent=0,group=Java]
----

=== Pass Values to the Topic

The first actual step to making the application collaborative is to update the topic whenever the checkbox value changes.
`isFriday` is the key associated with the value of the checkbox.
Add a value change listener that updates the related topic map.

[source, Java]
----
include::{root}/src/main/java/com/vaadin/demo/ce/TopicView.java[render,tags=open-topic;get-map;registration;!*,indent=0,group=Java]
----

The topic's structure now looks like:

----
Topic maps
|_ fieldValues
  |_ isFriday: true/false
----


=== Subscribe to Topic Changes

The final part of the code is to subscribe to updates to the topic map and update the checkbox if the related map is changed.
This is also done in the activation callback so that the subscription is opened only when the view is actually used.

It's also necessary to return the registration of the listener so
it can be removed when the component is detached to avoid leaking memory.

[source, Java]
----
include::{root}/src/main/java/com/vaadin/demo/ce/TopicView.java[render,tags=open-topic,indent=0,group=Java]
----

TIP: In case there are many registrations, they can be combined by `Registration.combine(registration1, registration2);`.

[[ce.topic-tutorial.run]]
== Run the Application
* Follow instructions in the application's `README.md` file to start the application.
* Open http://localhost:8080/ in multiple browser tabs to see how a change made in one tab is automatically shown in the other tabs.
