---
title: Connection Context
order: 8
layout: page
---

[[ce.external]]
= Connection Context

A connection context makes it possible for a connection to become deactivated when it is no longer needed and active again if the status of the context changes.
The context also handles synchronization of date change notifications delivered to application code.

To use a connection context, pass it to the collaboration manager's constructor or to [methodname]#openTopicConnection()# as follows:

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/ce/ConnectionContextExample.java[tags=pass-a-connection-context,indent=0]
----

Connection contexts are defined with the [classname]#ConnectionContext# interface.
The available implementations are [classname]#ComponentConnectionContext# and [classname]#SystemConnectionContext#.

== Component Connection Context

[classname]#ComponentConnectionContext# implements a connection context based on the attached state of a set of component instances.
It activates the topic connection whenever the target component is attached and deactivates it when the component is detached.
All attached components must belong to the same UI instance, and this UI instance is used to dispatch actions using the [methodname]#access()# method in the [classname]#UI# class.

[classname]#ComponentConnectionContext# is used internally by all high-level components such as [classname]#CollaborationAvatarGroup# and by shorthand methods and constructors that take a component instance as the context.

The following example illustrates how to create a Collaboration Manager and how to open a connection to a topic inside a component.
In this case, the component (`this`) is passed as the first parameter.
Internally, a [classname]#ComponentConnectionContext# is created in each call, so the connection becomes active when the component is attached and is deactivated when it is detached.

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/ce/ConnectionContextExample.java[tags=component,indent=0]
----

== System Connection Context

[classname]#SystemConnectionContext# is a connection context that is always active.
The context is intended to be used in situations that are not directly associated with a UI, such as from a background thread or when integrating with external services.

An instance can be acquired using [methodname]#getInstance()# in any situation where [methodname]#CollaborationEngine.getInstance()# is available.
In other situations, you can use [methodname]#CollaborationEngine.getSystemContext()# or create a new context instance using the constructor.

In the following example, an asynchronous job uses a [classname]#SystemConnectionContext# to send a system message:

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/ce/ConnectionContextExample.java[tags=async-task,indent=0]
----
<1> The asynchronous function uses Spring's [classname]#@Async# annotation.
It receives the [classname]#CollaborationEngine# as a parameter, as [methodname]#CollaborationEngine.getInstance()# throws an exception when running in a background thread.
<2> The [classname]#SystemConnectionContext# is acquired through [methodname]#CollaborationEngine.getSystemContext()#.
<3> It is then used to create a [classname]#MessageManager# that is activated immediately.
<4> The message is sent and the [classname]#MessageManager# is immediately closed.