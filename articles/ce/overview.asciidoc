---
title: Overview
order: 1
layout: page
---

[[ce.overview]]
= Overview

Collaboration Engine is a library for creating collaborative features in web apps,
allowing end-users to collaborate together to increase productivity
and achieve better results.

== Central concepts

=== Topics
Collaboration between users is managed by collecting data into "topic" instances that are shared between all users interacting with the same part of the application.
A topic can be compared to a chat room - it has an identifier (topic id) that is unique in the context of the application and participating members will receive all updates made to any topic that they're participating in.
Topic ids are freeform strings that the developer may choose, like "app" or "contract-126-address".
When building a topic for a work item, it is a good convention to have the name of the entity, and the identifier for the entity in the topic id.
For example, if you are making a form for editing a `Person` entity, and the `Person` has the id 120, a good topic name would be "person/120".

=== Helpers for specific use cases
There is a high level API for the specific use case of editing a form together.
`CollaborationBinder` enhances the regular Vaadin `Binder` to share the current value of each field with all other users configured to use the same topic.
There is also a `CollaborationAvatarGroup` component that shows the avatar of each user who is present in a given topic, e.g. all the users currently looking at or editing the same item.

=== Low level API
The low level Topic API allows synchronizing arbitrary data between users.
It is used internally by `CollaborationBinder` and `CollaborationAvatarGroup` but can also be used separately to create custom collaborative user experiences.
The entry point to using the Topic API is by opening a `TopicConnection` through `CollaborationEngine.getInstance()`.
A topic has multiple named maps which are shared across connections. Each map contains many <String-key, value> pairs.
It is strongly recommended that shared values are immutable instances since subscribers are notified only when the shared value is replaced with another instance but not when the contents of an existing value is updated.
For complex values, a conditional replace operation is available to prevent overwriting concurrent modifications to other parts of the shared data.

== Limitations
This is an early iteration of Collaboration Engine with several limitations that will be addressed in the future.
The most noticeable limitations include:

* Missing support for complex data structures with nested arrays and maps.
* Topic data is not persisted between server restarts.
  Applications can manually persist topic data and repopulate after a restart if necessary.
* There is no support for collaboration between multiple nodes or pods in a cluster of application servers.
  A future version will enable running Collaboration Engine as a standalone server or a cloud deployment that can be used from multiple application servers.
* There is only support for Vaadin views implemented using Java.
  Support for TypeScript views will be added later.
