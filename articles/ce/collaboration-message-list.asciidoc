---
title: CollaborationMessageList
order: 8
layout: page
---

[[ce.collaboration-message-list]]
= Real-Time Chat and Commenting Components

You can add a real-time chat to your application by using the
`CollaborationMessageList` and `CollaborationMessageInput` components.
They enhance the regular `MessageList` and `MessageInput` components
by automatically synchronizing the messages for all users connected to the same topic.
The message list only renders the submitted messages, while the message input provides
controls for submitting new messages.
Here's an example of setting them up:

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/ce/MessageListDocumentation.java[tags=message-list-and-input,indent=0]
----
Note that `User` and `UserService` are application-specific example classes,
and not part of the Collaboration Engine API.

The `CollaborationMessageList` constructor takes two arguments: the information about
the end user associated with this session, and a topic id.
The user info is used to render the user name and avatar in the messages submitted by this user.
Refer to the <<collaboration-avatar-group#ce.configuring-avatars, `CollaborationAvatarGroup` documentation>>
for more details on how the avatars are rendered, or how to load images from a backend with the `setImageProvider` method.

The topic id works in the same way as for other Collaboration Engine features.
The data in Collaboration Engine is shared among those users who are connected to the same topic.
With these components, you can consider the topic as a chat room.
In the example above, the topic id is hard-coded as "general", which means that every
user in this view sees each others' messages.
You can dynamically change the topic with the `setTopic` method,
for example when the user makes a selection in the UI.

`CollaborationMessageInput` takes the message list component as its constructor argument.
It hooks up with the list, to submit messages to its current topic.
When the list component has `null` topic id, no messages are displayed, and the connected
message input will be automatically disabled.

After constructing the components, the last required step is to place them somewhere in your view.
Here's an example of placing the message list and input on top of each other in a layout with a defined size:

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/ce/MessageListDocumentation.java[tags=message-list-layout,indent=0]
----

== Using Custom Input Components

Instead of using the provided `CollaborationMessageInput` component, you can also
configure your own component to submit messages. The component can be registered with the `CollaborationMessageList::setSubmitter` method.
Here's an example of submitting messages with `TextField` and `Button` components:

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/ce/MessageListDocumentation.java[tags=message-list-submitter,indent=0]
----

The `setSubmitter` method takes a callback that is run when a new topic connection is established
(topic id is set to a non-null value).
This callback should be used to set up any listeners for submitting new messages to `CollaborationMessageList`
through the provided `ActivationContext`.
The callback should return another callback for clean-up when the topic connection is deactivated (topic id is changed).
Note how the submit button is enabled only when there's an active topic connection.
