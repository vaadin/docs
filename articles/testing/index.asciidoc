---
title: Testing
order: 170
section-nav: commercial
---

= Testing

:commercial-feature: TestBench
include::{articles}/_commercial-banner.asciidoc[opts=optional]

Vaadin-based applications are most easily tested using TestBench.
Testing using TestBench can be approached in two ways:

- browser-less testing, using the [classname]`UIUnitTest` class
- browser-based testing, using the [classname]`TestBenchTestCase` class

Each has its benefits and its issues, discussed in the following sections.

[since:com.vaadin:vaadin@V23.2]
== UI Unit Testing

UI unit testing using [classname]`UIUnitTest` removes the necessity to run both the browser and the servlet container, to test your Vaadin-based applications faster.

UI unit testing is *browser-less*, so you look up components straight from [methodname]`UI.getCurrent()`, bypassing the browser and the JavaScript -> server bridge.
You call methods directly on your server-side view classes and on the server-side Java Vaadin components.

UI unit testing is also *container-less*, so you do not need to launch the servlet container.
In this way, testing creates the Vaadin session, the UI and other necessary Vaadin classes straight in the JVM that runs your JUnit tests.

=== Topics
section_outline::testing/browserless[]

== End-to-end Testing

You can use TestBench to create and run *browser-based* end-to-end tests for your Vaadin application, using the [classname]`TestBenchTestCase`.
TestBench simulates a user of your application, performs the tasks specified using Java code, and verifies that the expected actions take place in the application.

TestBench can also visually inspect your application and detect unintentionally introduced changes, and verify that the application is visually OK in all the browsers you are testing with.
TestBench also includes special support for other Vaadin products, making testing easy and robust compared to generic web testing solutions, such as Selenium.

=== Topics
section_outline::testing/browser-based[]
