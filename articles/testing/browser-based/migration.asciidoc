---
title: Migrating to Vaadin 10
order: 150
layout: page
---

[[testbench.migration]]
= Migrating to Vaadin 10

[[testbench.migration.introduction]]
== Introduction

TestBench is part of Vaadin and is intended to be used primarily to test applications created using the same platform version.

Although the features are generally the same as in TestBench 5 for Vaadin 8 and TestBench 4 for Vaadin 7, the API has been tuned a bit to better match the Flow component API and features.

[[testbench.migration.api-changes]]
== ElementQuery Changes

The ElementQuery method [methodname]`caption(String)` has been removed, as there is no generic `caption` concept across all web components.
The method [methodname]`state(String,String)` was also tied to the Vaadin "shared state" feature and has been removed.
A more generic finder method [methodname]`attribute(String name, String value)` has been added instead.
This can be used to find an element with any given attribute value.
The old [methodname]`caption("OK")` can in some cases be replaced by [methodname]`attribute("label","OK")`, and [methodname]`state("something","value")` can also be replaced by [methodname]`attribute("something", "value")`, depending on the component being used.

The query methods [methodname]`in()`, [methodname]`child()` and [methodname]`$$()` were rarely used and have been removed to simplify the query language.

== Element API Changes

The Element API has been made consistent with the API provided by the element (web component) itself.
The feature set is largely the same as in older versions but the exact method naming differs in some cases.

[[testbench.migration.mixing-old-and-new]]
== Applications Using Both Vaadin 7/8 and Vaadin 10+

If you have an application which uses both Vaadin 7/8 and a later version, you should keep the tests for each version in a separate module in the project.
This allows you to use an older TestBench version for Vaadin 7/8 tests and a new version for Vaadin 10+ tests.

== Selenium Version

The Selenium version has been upgraded to the latest available version.
Although it is mostly compatible, some small API changes might require your attention.

== PhantomJS

It is no longer recommended to use PhantomJS for headless testing.
PhantomJS lags behind the latest browser versions in features and will in many cases just not work with Vaadin 10+.
You should instead run using headless Chrome (using `--headless --disable-gpu`), or headless Firefox (using `-headless`).


[.discussion-id]
2F1815E6-3F4D-4534-9A86-6A01F3FFD50C
