pnpm reduces the download time across multiple projects by caching the downloaded packages.

You do not need to install pnpm separately.

[role="since:com.vaadin:vaadin@V22"]
= Local and Global Installation

Vaadin uses npx, the node package runner to download and use a compatible version of pnpm.
It specifies the version using a version specifier, such as `pnpm@5.18.10`.

If you have installed pnpm globally (with `npm install -g pnpm`) and set up the configuration parameter `vaadin.pnpm.global=true`, the installed version is used unless it is determined to be too old.
Note that Vaadin requires pnpm 5 or newer.

= Install a Custom Package

To install a custom frontend package into your project with pnpm, install Node.js globally and run pnpm using npx.
For example, to add the `mobx` package as a dependency in `package.json` as well as install it into `node_modules`, run the following command in the project directory:

[source,terminal]
----
npx pnpm add mobx
----

If you have installed pnpm globally, you can alternatively call it directly:

[source,terminal]
----
pnpm add mobx
----

If you have already installed an older version of pnpm globally, the above command runs the old version.
In such case, either upgrade the globally installed pnpm or pass a version specifier to npx, for example, `pnpm@5.18.10`, instead of `pnpm`.
See the https://pnpm.js.org/[pnpm website] for more information about available commands and flags.

[NOTE]
Vaadin expects transitive platform dependencies to be available directly under `node_modules`.
In Vaadin versions earlier than 19 that use pnpm, the `--shamefully-hoist` flag must be explicitly given to pnpm during package installation: `pnpm i --shamefully-hoist mobx`.

= Custom Packages That Need Post Install Scripts


[role="since:com.vaadin:vaadin@V23"]#No `postinstall` scripts for npm/pnpm packages are run by default#.
There are known incidents of new package versions containing malware which have abused `postinstall` scripts.
Not running them removes that security risk.

Some legitimate packages still use `postinstall` scripts and rely on them to work properly.
For internal dependencies, Vaadin runs the `postinstall` scripts automatically.

You can allow custom packages to run `postinstall` scripts if needed.
For development mode, add the packages as a comma-separated list to the `vaadin.npm.postinstallPackages` system property.

For production builds, add the `<postinstallPackages>` Maven/Gradle configuration property.

