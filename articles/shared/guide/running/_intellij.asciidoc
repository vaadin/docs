= Running a Project in IntelliJ IDEA

:experimental:

[[spring-boot]]
== Running a Spring Boot Project

If you are developing a Spring Boot project, Spring Boot makes it easier to run a Java web application, because it takes care of starting and configuring the server.

To run your application, all you need to do is to run the [classname]`Application` class that contains the [methodname]`main()` method that starts Spring Boot.
IntelliJ automatically detects that you have an [classname]`Application` class with a [methodname]`main()` method and displays it in the run configurations dropdown.

To start the application, either:

* Click the "play" button next to the "run configurations" dropdown.
* Open `Application.java` and click the "play" button next to the code line containing the [methodname]`main()` method.

image:_images/intellij/run-app.png[Run button locations]

The first time you start a Vaadin application, it downloads front-end dependencies and builds a JavaScript bundle.
This can take several minutes, depending on your computer and internet speed.

You will know that your application has started when you see the following output in the console:

----
Tomcat started on port(s): 8080 (http) with context path ''
Started Application in 80.189 seconds (JVM running for 83.42)
----

You should now be able to open the web application at http://localhost:8080/[localhost:8080].


[[getting-started.intellij.maven]]
== Running Maven Goals

You can use Maven to compile and run a Vaadin application.
IntelliJ IDEA has an excellent integration with Maven.
You can run common commands such as `mvn install` without having to leave the IDE.

You can run the application in a development server with Maven goals such as `jetty:run` (plain Java), `tomee:run` (Java EE and CDI), or `spring-boot:run` (Spring Boot).
Notice that, with Spring Boot, you can simply run the [classname]`Application` class, as described in <<spring-boot>>.

. Open the *Maven* view by clicking the vertical tab on the right side of the IntelliJ IDEA window:
+
.Maven projects view
image::_images/intellij/maven-projects-view.png[Maven projects view]
+
This view shows all the available Maven projects and their https://vaadin.com/learn/tutorials/learning-maven-concepts[build phases and build goals].

. Let us say you want to run `mvn install`.
To do this, expand the project tree in the *Maven* view to show the corresponding https://vaadin.com/learn/tutorials/learning-maven-concepts#_what_is_a_build_phase[lifecycle phase].
+
image::_images/intellij/lifecycle.png[Lifecycle phases, 313, 331]

. Double-click *install*.

You will see how IntelliJ idea executes the `install` build phase.
First, it executes all the previous phases in Maven's default lifecycle.
Finally, in the `install` phase, it downloads dependencies and copies the generated artifacts into your local Maven repository, among other things.

You can use a similar approach to run any Maven goal.
For example, you can double-click the `jetty:run` goal in the *Plugins* sub-tree to deploy and run the web application implemented in the project you imported.
Similarly, if you are using https://vaadin.com/spring[Spring Boot], you can double-click `spring-boot:run` to run the application.

ifdef::web[]
To learn more about the topics covered here:

* The key concepts in Maven, see https://vaadin.com/learn/tutorials/learning-maven-concepts[Learning Maven Concepts].
endif::web[]

=== Creating a Running Configuration

Since using a goal to run the application could be a frequent task during the development, you may want to create a _running configuration_ for it.

A _running configuration_ is a shortcut to run a specific task from within the IDE.
In the following, we create a running configuration for the `jetty:run` Maven goal to make it simpler to run the web application.

. Open the *Maven* view.
. Right-click the `jetty:run`, `tomee:run`, or `spring-boot:run` item under the appropriate folder.
+
[cols=3*,options=header]
|===
| Technology Stack | Embedded Server | Goal to Run
| Spring Boot | â€“ | `spring-boot:run`
| CDI / Java EE | Apache TomEE | `tomee:run`
| Plain Java | Jetty | `jetty:run`
|===

. Select *Create 'webapp [jetty:run]'* (or `tomee:run` or `spring-boot:run`):
+
image:_images/intellij/create-running-config.png[Create running configuration option]

. For simplicity, change the name of the configuration to *Run on Jetty* (or *TomEE* or *Spring Boot*)
+
image:_images/intellij/run-on-jetty.png[Run on Jetty]

. Click [guibutton]#OK#:

You should see the new option in the top-right corner of IntelliJ IDEA:

image:_images/intellij/config-created.png[Running configuration created]

Now you can deploy and run the web application by clicking the "run" (or  "debug") icon in the toolbar:

image::_images/intellij/run-icon.png[Run icon]

== Redeploying During Development

If you edit and save any of the source files, they will be compiled automatically, but you can only see the changes by restarting the server.
In the *Run* panel, click the "rerun" icon, or press kbd:[Ctrl+5] in the editor.
You can then refresh the page to use the updated version.

You can also enable <<{articles}/flow/configuration/live-reload#, Live Reload>> to have the page refreshed automatically.
