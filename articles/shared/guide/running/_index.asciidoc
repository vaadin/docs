= Running an Application

[.lead]
After you have imported an application into your IDE, you are ready to run it.
Applications created with <<{articles}/flow/guide/start#, Vaadin Start>> are Spring Boot applications, which you can run like ordinary Java applications.
Non-Spring Boot applications can be run with Maven.

With a Spring Boot application like the ones created with *Vaadin Start*, you simply need to run the [classname]`Application` class in the project.
This launches an embedded server to run the application.

See how to do this in your IDE: <<eclipse#, Eclipse>>, <<intellij#, IntelliJ>>, or <<netbeans#, NetBeans>>.

Many IDEs also support debugging Java applications.
Debugging is similar to running an application normally, but it takes place in debug mode in the IDE.

== Running With Maven

During development, you can run a Vaadin application in an embedded web server by executing one of the Maven goals:

[cols=3*,options=header]
|===
| Technology Stack | Embedded Server | Goal to Run
| Spring Boot | â€“ | `spring-boot:run`
| CDI / Java EE | Apache TomEE | `tomee:run`
| Plain Java | Jetty | `jetty:run`
|===

== Redeploying During Development

When you save a source file, the IDE automatically compiles it.
The web server tracks the compiled files and automatically redeploys the application when it notices a change.
You can then refresh the page to use the updated version.

You can also enable _live reload_ to have the page refreshed automatically, as described in <<{articles}/flow/configuration/live-reload#, Live Reload>>.

== Debugging

Many IDEs also support debugging Java applications.
Debugging is similar to running an application normally, but it takes place in debug mode in the IDE.

.Debugging Spring Boot applications
[NOTE]
You can debug Spring Boot applications by running them as Java applications.
However, this is not possible with Maven using `spring-boot:run`.
The Maven goal starts the application in a separate process, so you cannot debug it.
