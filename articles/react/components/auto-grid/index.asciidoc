---
title: Auto Grid
order: 10
---

:experimental:

:react:

= [since:dev.hilla:hilla@v2.3]#Auto Grid#

// tag::description[]
Auto Grid is a component for displaying tabular data based on a Java backend service.
// end::description[]


== Basic Usage

Auto Grid requires a Java service that implements the `CrudService<T>` interface. In this example, the `ProductService` class extends `CrudRepositoryService<T, ID>`, which in turn implements the `CrudService<T>`.

[.example]
--
[source,java]
.ProductService.java
----
include::{root}/src/main/java/com/vaadin/demo/fusion/crud/ProductService.java[tags=snippet,indent=0]
----
[source,java]
.Product.java
----
include::{root}/src/main/java/com/vaadin/demo/fusion/crud/Product.java[tags=snippet,indent=0]
----
[source,java]
.ProductRepository.java
----
include::{root}/src/main/java/com/vaadin/demo/fusion/crud/ProductRepository.java[tags=snippet,indent=0]
----
--

Hilla automatically generates TypeScript objects for each `@BrowserCallable` service implementing the `CrudService<T, ID>` interface. These TypeScript objects have callable methods that execute the corresponding Java service methods, enabling CRUD operations on the data.

For the `ProductService` example, you can import the generated TypeScript object in your React view, and use it as a value for the `<AutoGrid service={}/>` property to display the data in a lazy-loaded sortable grid with columns for all properties of the `Product` entity.

[source,typescript]
----
include::{root}/frontend/demo/component/auto-grid/react/auto-grid-basic.tsx[tags=snippet,indent=0,group=React]
----

The Auto Grid component will render a grid with columns for all properties of the `Product` entity, loading the data lazily from the backend by calling the `CrudService<T, ID>.list(Pageable pageable, @Nullable Filter filter)` method.

This is what the rendered grid looks like:

[source,typescript]
----
include::{root}/frontend/demo/component/auto-grid/react/auto-grid-basic.tsx[render,tags=snippet,indent=0,group=React]
----


== Customizing Columns

To choose which of the data properties should be displayed as columns in Auto Grid, and to specify the column order, set the property names to the `visibleColumns` property.

The following example uses only the `category`, `name`, and `price` properties, in this order:

[source,typescript]
.Auto Grid with chosen columns
----
include::{root}/frontend/demo/component/auto-grid/react/auto-grid-visible-columns.tsx[render,tags=snippet,indent=0,group=React]
----


== Filtering

You can toggle built-in column filters by setting the `headerFilters` flag.

[source,typescript]
.Auto Grid using `headerFilters={true}`
----
include::{root}/frontend/demo/component/auto-grid/react/auto-grid-header-filters.tsx[render,tags=snippet,indent=0,group=React]
----

Auto Grid supports filtering by using the criteria specified by the `filter` property.

In the example below, the data in Auto Grid is filtered using the contains matcher for the `name` property:

[source,typescript]
.Auto Grid with a Filter
----
include::{root}/frontend/demo/component/auto-grid/react/auto-grid-filtering.tsx[render,tags=snippet,indent=0,group=React]
----

Note that you can combine several filtering criteria by using the `OrFilter` or `AndFilter` composite filter types.


== Grid Properties

You can also customize the underlying Grid component properties in Auto Grid.

The example below enables single-row selection in the Auto Grid by using a combination of the `onActiveItemChanged` event listener with the `selectedItems` property. Both are supported by the Grid component that Auto Grid uses internally.

[source,typescript]
.Auto Grid with a Filter
----
include::{root}/frontend/demo/component/auto-grid/react/auto-grid-selection.tsx[render,tags=snippet,indent=0,group=React]
----

Read more on the properties and use cases supported in the <<../grid#,Grid component>> documentation page.
