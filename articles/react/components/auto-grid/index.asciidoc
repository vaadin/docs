---
title: Auto Grid
order: 10
---

:experimental:

:react:

= [since:dev.hilla:hilla@v2.3]#Auto Grid#

// tag::description[]
Auto Grid is a component for displaying tabular data based on a Java backend service.
// end::description[]


== Basic Usage

Auto Grid requires a Java service that implements the `ListService<T>` interface. In this example, the `ProductService` class extends `ListRepositoryService<T, ID, R>`, which in turn implements the `ListService<T>`:

[.example]
--
[source,java]
.ProductService.java
----
include::{root}/src/main/java/com/vaadin/demo/fusion/crud/ProductService.java[tags=snippet,indent=0]
----
[source,java]
.Product.java
----
include::{root}/src/main/java/com/vaadin/demo/fusion/crud/Product.java[tags=snippet,indent=0]
----
[source,java]
.ProductRepository.java
----
include::{root}/src/main/java/com/vaadin/demo/fusion/crud/ProductRepository.java[tags=snippet,indent=0]
----
--

Hilla generates TypeScript objects for each `@BrowserCallable` service implementing the `ListService<T>` interface. These TypeScript objects have callable methods that execute the corresponding Java service methods, enabling lazy data loading with sorting and filtering.

For the `ProductService` example, you can import the generated TypeScript object in your React view, and use it as a value for the `<AutoGrid service={}/>` property to display the data.

[source,tsx]
----
include::{root}/frontend/demo/component/auto-grid/react/auto-grid-basic.tsx[tags=snippet,indent=0,group=React]
----

The Auto Grid component renders a grid with columns for all properties of the `Product` entity with sorting and filtering, loading the data lazily from the backend by calling the `ListService<T>.list(Pageable pageable, @Nullable Filter filter)` method.

Here's what the rendered grid looks like:

[source,tsx]
----
include::{root}/frontend/demo/component/auto-grid/react/auto-grid-basic.tsx[render,tags=snippet,indent=0,group=React]
----


== Customizing Columns

To choose which of the data properties should be displayed as columns in Auto Grid, and to specify the column order, set the property names to the `visibleColumns` property.

The following example uses only the `category`, `name`, and `price` properties, in this order:

[source,tsx]
.Auto Grid with Chosen Columns
----
include::{root}/frontend/demo/component/auto-grid/react/auto-grid-visible-columns.tsx[render,tags=snippet,indent=0,group=React]
----

.Don't Expose Sensitive Data on Client-Side
[CAUTION]
When using Auto Grid, it's important to check that you don't expose sensitive data to the client-side. For example, if you have a `password` property in your entity, hiding it using the `visibleColumns` property won't prevent the data from being sent to the client-side. Make sure your service implementation doesn't expose sensitive data to the client-side. You could do this, for example, by using a `@JsonIgnore` annotation on the property.

Individual columns can be customized using the `columnOptions` property. This takes an object in which each key is the name of a data property, and the value is a property's object that is passed when rendering the column for that property.

The following example uses column options to define a custom renderer for the price column that highlights prices in different colors, depending on their value:

[source,tsx]
.Auto Grid with Customized Prize Column
----
include::{root}/frontend/demo/component/auto-grid/react/auto-grid-column-options.tsx[render,tags=snippet,indent=0,group=React]
----

You can pass the same options as when rendering a column in a regular grid. See the <<../grid/#,Grid>> documentation page for more information and examples.


== Filtering

Auto Grid has column-based filtering enabled by default. You can disable the built-in column filters by setting the `noHeaderFilters` flag.

[source,tsx]
.Auto Grid using `noHeaderFilters={true}`
----
include::{root}/frontend/demo/component/auto-grid/react/auto-grid-no-header-filters.tsx[render,tags=snippet,indent=0,group=React]
----

Auto Grid supports external filtering by using the criteria specified by the `experimentalFilter` property.

[WARNING]
.Experimental Feature
External Auto Grid filtering is an experimental feature. The `experimentalFilter` property API may be changed or removed in future releases.

In the example below, the data in Auto Grid is filtered using the contains matcher for the `name` property, combined with the equals matcher for `category` when a specific category is selected:

[source,tsx]
.Auto Grid with a Filter
----
include::{root}/frontend/demo/component/auto-grid/react/auto-grid-filtering.tsx[render,tags=snippet,indent=0,group=React]
----

You can combine several filtering criteria by using the `{t: 'and' | 'or', children: []}` composite filter type.


== Grid Properties

You can also customize the underlying Grid component properties in Auto Grid.

The example here enables single-row selection in the Auto Grid by using a combination of the `onActiveItemChanged` event listener with the `selectedItems` property. Both are supported by the Grid component that Auto Grid uses internally.

[source,tsx]
.Auto Grid with a Filter
----
include::{root}/frontend/demo/component/auto-grid/react/auto-grid-selection.tsx[render,tags=snippet,indent=0,group=React]
----

You can read more on the properties, and use cases supported, on the <<../grid#,Grid component>> documentation page.
