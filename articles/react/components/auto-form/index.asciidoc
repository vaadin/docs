---
title: Auto Form
order: 10
description: Used for auto populating form fields and actions based on a Java backend service.
---

:experimental:

:react:

= [since:dev.hilla:hilla@v2.4]#Auto Form#

// tag::description[]
Auto Form is a component for populating form fields and actions based on a Java backend service.
// end::description[]

== Basic Usage

Auto Form requires a Java service that implements the `CrudService<T, ID>` interface. In the example here, the `EmployeeService` class extends `CrudRepositoryService<T, ID, R>`, which in turn implements the `CrudService<T, ID>`:

[.example]
--
[source,java]
.ProductService.java
----
include::{root}/src/main/java/com/vaadin/demo/fusion/crud/form/EmployeeService.java[tags=snippet,indent=0]
----
[source,java]
.Product.java
----
include::{root}/src/main/java/com/vaadin/demo/fusion/crud/form/Employee.java[tags=snippet,indent=0]
----
[source,java]
.ProductRepository.java
----
include::{root}/src/main/java/com/vaadin/demo/fusion/crud/form/EmployeeRepository.java[tags=snippet,indent=0]
----
--

Hilla generates TypeScript objects for each `@BrowserCallable` service implementing the `CrudService<T, ID>` interface. These TypeScript objects have callable methods that execute the corresponding Java service methods, enabling the Add, Update, and Delete operations as well as lazy data loading with sorting and filtering.

For the `EmployeeService` example, you can import the generated TypeScript object in your React view, and use it as a value for the `<AutoForm service={}/>` property to display the data.

[source,tsx]
----
include::{root}/frontend/demo/component/auto-form/react/auto-form-basic.tsx[tags=snippet,indent=0,group=React]
----

The Auto Form component renders a form with editor components for all properties of the `Employee` entity along with a Save button that associates with the respective `save` method of the `CrudService<T, ID>`, and a Discard button that calls the form binder's `reset` operation, and it is only visible when the form has some changes.

Here's what the rendered grid looks like:

[source,tsx]
----
include::{root}/frontend/demo/component/auto-form/react/auto-form-basic.tsx[render,tags=snippet,indent=0,group=React]
----

== Customizing the Form's Layout

As you can see in the example above, the Auto Form component by default renders the fields in a FormLayout with a two-column layout. You can customize the layout by using the `customLayoutRenderer` property, in either of the following ways:

=== Defining a Template

There are two ways to define a template for arranging the fields in the form layout:

- Defining the template as `string[][]`:
[source,tsx]
----
include::{root}/frontend/demo/component/auto-form/react/auto-form-template-string.tsx[tags=snippet,indent=0,group=React]
----

The number of columns for the FormLayout is calculated based on the number of fields in each row of the template. Thus, this will create a six column FormLayout and renders the fields in five rows according to the order of their appearance in the template:

[source,tsx]
----
include::{root}/frontend/demo/component/auto-form/react/auto-form-template-string.tsx[render,tags=snippet,indent=0,group=React]
----

As you can see in the above example, each row's space is divided equally between the fields. You can define the `colSpan` for each field to control how the space is divided between the fields:

- Defining the template as `{ property: string, colSpan: number }[][]`:

[source,tsx]
----
include::{root}/frontend/demo/component/auto-form/react/auto-form-template-fieldcolspan.tsx[tags=snippet,indent=0,group=React]
----

Again, this will create a six column FormLayout and renders the fields in five rows according to the order of their appearance in the template, but this time the `colSpan` property is used to define how the space is divided between the fields:

[source,tsx]
----
include::{root}/frontend/demo/component/auto-form/react/auto-form-template-fieldcolspan.tsx[render,tags=snippet,indent=0,group=React]
----

The number of columns for the FormLayout is always calculated based on the number of fields in each row of the template, unless you explicitly define the `responsiveSteps` property:

[source,tsx]
----
include::{root}/frontend/demo/component/auto-form/react/auto-form-template-fieldcolspan-responsive.tsx[tags=snippet,indent=0,group=React]
----

This will create a three column FormLayout and renders the fields in five rows according to the order of their appearance in the template and the respective `colSpan` property of each field:

[source,tsx]
----
include::{root}/frontend/demo/component/auto-form/react/auto-form-template-fieldcolspan-responsive.tsx[render,tags=snippet,indent=0,group=React]
----

As you can see in the above example, the `responsiveSteps` property is used to define the number of columns for the FormLayout, and the `colSpan` property for each field is aligned accordingly.

.Defining the `responsiveSteps` Property and `string[][]` Template Together
[NOTE]
You can use the `responsiveSteps` property when defining the template as `string[][]` as well. In this case, make sure the number of fields in the template rows are logically aligned with the total number of columns defined via `responsiveSteps`.

=== Using Custom Renderer

While customizing the Auto Form's layout using either of the template options mentioned in the above enables you to cover a wide range of use cases, you can also use a custom renderer to define any arbitrary layout. This is useful when you need to define a layout that is not possible to achieve using the template options.

To use a custom renderer, define a function that takes the `AutoFormLayoutRendererProps` as a parameter and returns any React element. The `AutoFormLayoutRendererProps` contains the following properties:

- children: the readonly list of bound fields
- form: the form binder instance

[source,tsx]
----
include::{root}/frontend/demo/component/auto-form/react/auto-form-custom-renderer.tsx[tags=snippet,indent=0,group=React]
----

The above example uses a custom renderer to render the fields in a Vertical Layout:

[source,tsx]
----
include::{root}/frontend/demo/component/auto-form/react/auto-form-custom-renderer.tsx[render,tags=snippet,indent=0,group=React]
----

== Customizing Field's Properties

You can customize the properties of the fields rendered by Auto Form by using the `fieldOptions` property.

=== Customizing Visibility & Order

To choose which of the data properties should be displayed as fields in Auto Form, or to specify the order of appearance in the Auto Form, use the `customLayoutRenderer` property and specify the name of desired properties in the `template`.

When Auto Form is used without any template defined for `customLayoutRenderer` property, it will render all the properties of the entity except those that are annotated with `@Id` or `@Version` annotations. You can make them visible by adding their names to the `customLayoutRenderer`'s template:

[source,tsx]
----
include::{root}/frontend/demo/component/auto-form/react/auto-form-template-id-version.tsx[tags=snippet,indent=0,group=React]
----

The above example uses a template to hide `team` and `manager` properties, and to display the `id` and `version` properties in the desired order and placement:

[source,tsx]
----
include::{root}/frontend/demo/component/auto-form/react/auto-form-template-id-version.tsx[render,tags=snippet,indent=0,group=React]
----

.Use Dot Notation to Access Nested Properties
[NOTE]
When trying to access nested properties, use the Dot Notation, as shown in the example above. To access the `supplierName` of the `supplier` property, for example, you might use `supplier.supplierName`.

.Don't Expose Sensitive Data on Client-Side
[CAUTION]
When using Auto Form, it's important to check that you don't expose sensitive data to the client-side. For example, if you have a `password` property in your entity, hiding it using the `visibleColumns` property won't prevent the data from being sent to the client-side. Make sure your service implementation doesn't expose sensitive data to the client-side. You could do this, for example, by using a `@JsonIgnore` annotation on the property.


=== Customizing Field's Options



=== Adding Custom Fields

In the <<#using-custom-renderer,Using Custom Renderer>> section, we saw how to use a custom renderer to define any arbitrary layout. You can also use a custom renderer to add custom fields to the form. As the `form` property of the `AutoFormLayoutRendererProps` is a `FormBinder`, you can use the `field` directive to bind any custom field to the form as well.
