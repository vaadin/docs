---
title: Auto Form
order: 15
description: Used for auto populating form fields and actions based on a Java backend service.
---

:experimental:

= [since:dev.hilla:hilla@v2.4]#Auto Form#

// tag::description[]
Auto Form is a component for automatically populating form fields and actions based on a Java backend service.
// end::description[]

include::{articles}/react/components/_shared.asciidoc[tag=scaled-examples]
include::{articles}/react/components/_shared.asciidoc[tag=scaled-examples-responsive]

== Basic Usage

Auto Form requires a Java service that implements the `CrudService<T, ID>` interface. In the example here, the `EmployeeService` class extends `CrudRepositoryService<T, ID, R>`, which in turn implements the `CrudService<T, ID>`:

[.example]
--
[source,java]
.EmployeeService.java
----
include::{root}/src/main/java/com/vaadin/demo/fusion/crud/EmployeeService.java[tags=snippet,indent=0]
----
[source,java]
.Employee.java
----
include::{root}/src/main/java/com/vaadin/demo/fusion/crud/Employee.java[tags=snippet,indent=0]
----
[source,java]
.EmployeeRepository.java
----
include::{root}/src/main/java/com/vaadin/demo/fusion/crud/EmployeeRepository.java[tags=snippet,indent=0]
----
--

Hilla generates TypeScript objects for each `@BrowserCallable` service implementing the `CrudService<T, ID>` interface.These TypeScript objects have callable methods that execute the corresponding Java service methods, enabling the Add, Update, and Delete operations as well as lazy data loading with sorting and filtering.

For the `EmployeeService` example, you can import the generated TypeScript object in your React view, and use it as a value for the `<AutoForm service={EmployeeService} />` property to display the fields.

Here's what the rendered form looks like:

[.example.desktop]
--
[source,tsx]
----
include::{root}/frontend/demo/component/auto-form/react/auto-form-basic.tsx[render,frame,tags=snippet,indent=0]
----
--

As you can see in the above example, Auto Form component renders a form with input components for all properties of the `Employee` entity along with a Save button that associates with the respective `save` method of the `CrudService<T, ID>`, and an initially hidden Discard button that calls the form binder's `reset` operation, and it is only visible when the form has some changes.

.Default Responsive Breakpoints
[NOTE]
Auto Form uses the <<../form-layout#,Form Layout component>>'s  default responsive breakpoints. To customize them, see the <<customizing-form-layout,Customizing Form Layout>> section.

== Customizing Visibility & Order

Auto Form by default renders input fields for all properties of the entity in a Form Layout with a two-column layout, except for the properties annotated by `@Id` and `@Version`. You can customize the visibility and order of fields using `visibleFields` property:

[.example.desktop]
--
[source,tsx]
----
include::{root}/frontend/demo/component/auto-form/react/auto-form-field-visibility.tsx[render,frame,tags=snippet,indent=0]
----
--

As you can see in the above example, the `visibleFields` property is used to define the fields that should be displayed in the form as well as their order of appearance.

.Don't Expose Sensitive Data on Client-Side
[CAUTION]
When using Auto Form, it's important to check that you don't expose sensitive data to the client-side. For example, if you have a `password` property in your entity, hiding it using either of the `template` versions won't prevent the data from being sent to the client-side. Make sure your service implementation doesn't expose sensitive data to the client-side. You could do this, for example, by using a `@JsonIgnore` annotation on the property.

== Customizing Field's Properties

You can customize the properties of the fields rendered by Auto Form by using the `fieldOptions` property.

=== Overriding Field's Options

You can customize some options of the automatically rendered fields by Auto Form by using the `fieldOptions` property.

==== Customizing Field's Label

To customize the label of a field, use the `label` property of the `fieldOptions` property as follows:

[.example.desktop]
--
[source,tsx]
----
include::{root}/frontend/demo/component/auto-form/react/auto-form-field-custom-label.tsx[render,frame,tags=snippet,indent=0]
----
--

The above example shows how to customize the label of the `firstName` and `lastName` fields.

==== Customizing Field's ColSpan

As Auto Form component uses the Form Layout component as the layout, you can customize the `colspan` property of the fields rendered by Auto Form by using the `fieldOptions` property as follows:

[.example.desktop]
--
[source,tsx]
----
include::{root}/frontend/demo/component/auto-form/react/auto-form-field-colspan.tsx[render,frame,tags=snippet,indent=0]
----
--

==== Customizing Input Component

You can use the `renderer` property of the `fieldOptions` to override the rendered field by Auto Form:

[.example.desktop]
--
[source,tsx]
----
include::{root}/frontend/demo/component/auto-form/react/auto-form-field-custom-renderer.tsx[render,frame,tags=snippet,indent=0]
----
--

The above example shows how to render a Text Area component for the description field.

== Customizing Form Layout

You can customize the Form Layout component used by Auto Form by using the `formLayoutProps` property. For example, you can set the `responsiveSteps` property to customize the responsive breakpoints of the Form Layout component:

[.example.desktop]
--
[source,tsx]
----
include::{root}/frontend/demo/component/auto-form/react/auto-form-responsive-steps.tsx[render,frame,tags=snippet,indent=0]
----
--

== Using Custom Renderer

In case you want to render field in completely different layout, You can use a custom renderer to define any arbitrary layout using the `layoutRenderer` property.

To use a custom renderer, define a function that takes the `AutoFormLayoutRendererProps` as a parameter and returns any React element. The `AutoFormLayoutRendererProps` contains the following properties:

- `children`: the read-only list of bound fields
- `form`: the form binder instance

As the children property is a read-only list of bound fields, you can use them right away in your custom renderer. The following example shows how to use the `children` property to render the fields in a two-column layout:

[.example.desktop]
--
[source,tsx]
----
include::{root}/frontend/demo/component/auto-form/react/auto-form-custom-renderer-alt.tsx[render,frame,tags=snippet,indent=0]
----
--

Alternatively, you can create input fields manually, and use the `form` instance to connect them to the form. 

The following example shows how to render fields manually:

[.example.desktop]
--
[source,tsx]
----
include::{root}/frontend/demo/component/auto-form/react/auto-form-custom-renderer.tsx[render,frame,tags=snippet,indent=0]
----
--
