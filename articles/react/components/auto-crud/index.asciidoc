---
title: Auto Crud
order: 10
description: Used for auto populating CRUD views and actions based on a Java backend service.
---

:experimental:

= [since:dev.hilla:hilla@v2.4]#Auto Crud#

// tag::description[]
Auto Crud is a component for automatically populating needed UI components and actions to ultimately enable the end user to perform the four basic operations of listing, adding, editing, and deleting of the records. To fulfill this, Auto Crud includes a sortable, filterable, lazy loaded grid, besides to a form with editor components for all properties of the targeted entity provided by the Java backend service.
// end::description[]

include::{articles}/react/components/_shared.asciidoc[tag=scaled-examples]
include::{articles}/react/components/_shared.asciidoc[tag=scaled-examples-responsive]

== Basic Usage

Auto Crud requires a Java service that implements the `CrudService<T, ID>` interface. In the example here, the `EmployeeService` class extends `CrudRepositoryService<T, ID, R>`, which in turn implements the `CrudService<T, ID>`:

[.example]
--
[source,java]
.EmployeeService.java
----
include::{root}/src/main/java/com/vaadin/demo/fusion/crud/EmployeeService.java[tags=snippet,indent=0]
----
[source,java]
.Employee.java
----
include::{root}/src/main/java/com/vaadin/demo/fusion/crud/Employee.java[tags=snippet,indent=0]
----
[source,java]
.EmployeeRepository.java
----
include::{root}/src/main/java/com/vaadin/demo/fusion/crud/EmployeeRepository.java[tags=snippet,indent=0]
----
--

Hilla generates TypeScript objects for each `@BrowserCallable` service implementing the `CrudService<T, ID>` interface. These TypeScript objects have callable methods that execute the corresponding Java service methods, enabling the Add, Update, and Delete operations as well as lazy data loading with sorting and filtering.

For the `EmployeeService` example, you can import the generated TypeScript object in your React view, and use it as a value for the `<AutoCrud service={}/>` property to auto-populate grid columns and form fields:

[source,tsx]
----
include::{root}/frontend/demo/component/auto-crud/react/auto-crud-basic.tsx[tags=snippet,indent=0]
----

The Auto Crud component renders a sortable, filterable, lazy loaded grid, besides to a form with editor components for all properties of the `Employee` entity along with the needed action buttons on grid and the form to achieve the basic CRUD operations. a Save button that associates with the respective `save` method of the `CrudService<T, ID>`, and an initially hidden Discard button that calls the form binder's `reset` operation, and it is only visible when the form has some changes.

Here's what the rendered form looks like:

[.example.desktop]
--
[source,tsx]
----
include::{root}/frontend/demo/component/auto-crud/react/auto-crud-basic.tsx[render,frame,tags=snippet,indent=0]
----
--

== Component Composition

Auto Crud component is a higher level component and composed of the following components:

- <<../auto-grid/index.asciidoc#,Auto Grid>>
- <<../auto-form/index.asciidoc#,Auto Form>>

Each of the above components offer some customization options, which are described in the following sections.

== Customizing the Grid

As you can see in the example above, the Auto Crud component by default renders the grid with all the properties of the entity. You can customize the grid by using the `gridProps` property.

The underlying Auto Grid component offers several properties for customizing the grid and its columns. To avoid repeating all the examples in <<../auto-grid/index.asciidoc#,Auto Grid>> documentation, the first couple of examples below show the way of passing Auto Grid's properties through the `gridProps`. However, the rest of the properties are just listed with a brief description. For more detailed information and full examples about each property, see the <<../auto-grid/index.asciidoc#,Auto Grid>> documentation.

- `visibleColumns`: an array of strings that specifies the names and also order of appearance for the properties to be displayed as columns in the grid. The following example shows how to provide only `firstName`, `lastName`, `active`, `team`, `manager` as the value of `visibleColumns` property to the `gridProps` to set the visibility and order of the columns:

[.example.desktop]
--
[source,tsx]
----
include::{root}/frontend/demo/component/auto-crud/react/auto-crud-visible-columns.tsx[render,frame,tags=snippet,indent=0]
----
--

.Don't Expose Sensitive Data on Client-Side
[CAUTION]
When using Auto Crud, it's important to check that you don't expose sensitive data to the client-side. For example, if you have a `password` property in your entity, hiding it using the `visibleColumns` property won't prevent the data from being sent to the client-side. Make sure your service implementation doesn't expose sensitive data to the client-side. You could do this, for example, by using a `@JsonIgnore` annotation on the property.

- `columnOptions`: an object that specifies the options for each column. The following example shows how to provide the `columnOptions` property to the `gridProps` to change the default header title of `firstName` column, and to provide a custom renderer for the `active` column:

[.example.desktop]
--
[source,tsx]
----
include::{root}/frontend/demo/component/auto-crud/react/auto-crud-column-options.tsx[render,frame,tags=snippet,indent=0]
----
--

- `customColumns`: an array of objects that specifies the custom columns to be added to the grid. Use cases of adding custom columns can be endless, but the example in <<../auto-grid/index.asciidoc#adding-custom-columns,Adding Custom Columns>> shows how to concatenate the value of two data properties and render them in one column. The following code snippet demonstrates how the `customColumns` property can be used in the `gridProps`:

.Adding Custom Columns
[source,tsx]
----
<AutoCrud
  service={EmployeeService}
  model={EmployeeModel}
  gridProps={{
    customColumns: [
      <GridColumn
        key={'full-name-column'}
        autoWidth
        renderer={({ item }: { item: Employee }) => (
          <span>
            {item?.firstName} {item?.lastName}
          </span>
        )}
        header="Full Name"
      />,
    ],
  }}
/>
----

- `noHeaderFilters`: Auto Grid has column-based filtering enabled by default. You can disable the built-in column filters by setting the `noHeaderFilters` flag. The following example shows how to provide the `noHeaderFilters` property to the `gridProps` to disable the built-in column filters:

.Hiding the Built-in Column Filters
[source,tsx]
----
<AutoCrud
  service={EmployeeService}
  model={EmployeeModel}
  gridProps={{ noHeaderFilters: true }}
/>
----

=== Grid Properties

As the Auto Crud component is composed of the Auto Grid component, and it is using the <<../grid#,Grid component>> under the hood, you can use all the properties of the Grid component to customize the grid. The way to pass the properties to the Auto Crud component is by using the `gridProps` property. The following example shows how to provide the `gridProps` property to the Auto Crud component to set the `columnReorderingAllowed` property of the underlying Grid component:

.Customizing the Grid Properties
[source,tsx]
----
<AutoCrud
  service={EmployeeService}
  model={EmployeeModel}
  gridProps={{ columnReorderingAllowed: true }}
/>
----

== Customizing the Form

You can customize the grid rendered by Auto Crud by using the `formProps` property.

As you can see in the example above, the Auto Form component by default renders the fields in a Form Layout with a two-column layout. You can customize the layout by using the `customLayoutRenderer` property, in either of the following ways:

=== Defining a Template

You can define a template for arranging the fields in the form's layout in two ways:

==== Defining the Template as `string[][]`:

[source,tsx]
----
include::{root}/frontend/demo/component/auto-form/react/auto-form-template-string.tsx[tags=snippet,indent=0]
----

The number of columns for the Form Layout is calculated based on the number of fields in each row of the template. Thus, this creates a six column Form Layout and renders the fields in five rows according to the order of their appearance in the template:

[.example.desktop]
--
[source,tsx]
----
include::{root}/frontend/demo/component/auto-form/react/auto-form-template-string.tsx[render,frame,tags=snippet,indent=0]
----
--

As you can see in the above example, each row's space is divided equally between the fields.

.Default Responsive Breakpoints
[NOTE]
When the Auto Form component is rendered based on `string[][]` template similar to the example above, it uses the following responsive breakpoints:
`[
    { minWidth: '0', columns: 1 },
    { minWidth: '800px', columns: minNeededColumns },
]`
where `minNeededColumns` is calculated based on the _Least Common Multiple_ for the number of fields listed in each row of the template. You can override this default behavior by using the `responsiveSteps` property, but make sure the number of fields in the template rows are logically aligned with the total number of columns defined via `responsiveSteps`.


You can define the `colSpan` for each field to control how the space is divided between the fields:

==== Defining the Template as `{ property: string, colSpan: number }[][]`:

[source,tsx]
----
include::{root}/frontend/demo/component/auto-form/react/auto-form-template-fieldcolspan.tsx[tags=snippet,indent=0]
----

Again, this creates a six column Form Layout and renders the fields in five rows according to the order of their appearance in the template, but this time the `colSpan` property is used to define how the space is divided between the fields:

[.example.desktop]
--
[source,tsx]
----
include::{root}/frontend/demo/component/auto-form/react/auto-form-template-fieldcolspan.tsx[render,frame,tags=snippet,indent=0]
----
--

The number of columns for the Form Layout is always calculated based on the number of fields in each row of the template, unless you explicitly define the `responsiveSteps` property:

[source,tsx]
----
include::{root}/frontend/demo/component/auto-form/react/auto-form-template-fieldcolspan-responsive.tsx[tags=snippet,indent=0]
----

This creates a three column Form Layout and renders the fields in five rows according to the order of their appearance in the template and the respective `colSpan` property of each field:

[.example.desktop]
--
[source,tsx]
----
include::{root}/frontend/demo/component/auto-form/react/auto-form-template-fieldcolspan-responsive.tsx[render,frame,tags=snippet,indent=0]
----
--

As you can see in the above example, the `responsiveSteps` property is used to define the number of columns for the Form Layout, and the `colSpan` property for each field is aligned accordingly.

.Defining the `responsiveSteps` Property and `string[][]` Template Together
[NOTE]
You can use the `responsiveSteps` property when defining the template as `string[][]` as well. In this case, make sure the number of fields in the template rows are logically aligned with the total number of columns defined via `responsiveSteps`.

=== Using Custom Renderer

While customizing the Auto Form's layout using either of the template options mentioned in the above enables you to cover a wide range of use cases, you can also use a custom renderer to define any arbitrary layout. This is useful when you need to define a layout that is not possible to achieve using the template options.

To use a custom renderer, define a function that takes the `AutoFormLayoutRendererProps` as a parameter and returns any React element. The `AutoFormLayoutRendererProps` contains the following properties:

- children: the read-only list of bound fields
- form: the form binder instance

[source,tsx]
----
include::{root}/frontend/demo/component/auto-form/react/auto-form-custom-renderer.tsx[tags=snippet,indent=0]
----

The above example uses a custom renderer to render the fields in a Vertical Layout:

[.example.desktop]
--
[source,tsx]
----
include::{root}/frontend/demo/component/auto-form/react/auto-form-custom-renderer.tsx[render,frame,tags=snippet,indent=0]
----
--

== Customizing Field's Properties

You can customize the properties of the fields rendered by Auto Form by using the `fieldOptions` property.

=== Customizing Visibility & Order

To choose which of the data properties should be displayed as fields in Auto Form, or to specify the order of appearance in the Auto Form, use the `customLayoutRenderer` property and specify the name of desired properties in the `template`.

When Auto Form is used without any template defined for `customLayoutRenderer` property, it renders all the properties of the entity except those that are annotated with `@Id` or `@Version` annotations. You can make them visible by adding their names to the `customLayoutRenderer`'s template:

[source,tsx]
----
include::{root}/frontend/demo/component/auto-form/react/auto-form-template-id-version.tsx[tags=snippet,indent=0]
----

The above example uses a template to hide `team` and `manager` properties, and to display the `id` and `version` properties in the desired order and placement:

[.example.desktop]
--
[source,tsx]
----
include::{root}/frontend/demo/component/auto-form/react/auto-form-template-id-version.tsx[render,frame,tags=snippet,indent=0]
----
--

.Don't Expose Sensitive Data on Client-Side
[CAUTION]
When using Auto Form, it's important to check that you don't expose sensitive data to the client-side. For example, if you have a `password` property in your entity, hiding it using either of the `template` versions won't prevent the data from being sent to the client-side. Make sure your service implementation doesn't expose sensitive data to the client-side. You could do this, for example, by using a `@JsonIgnore` annotation on the property.


=== Overriding Field's Options

You can customize some options of the automatically rendered fields by Auto Form by using the `fieldOptions` property.

==== Customizing the Label

To customize the label of a field, use the `label` property of the `fieldOptions` property as follows:

[source,tsx]
----
include::{root}/frontend/demo/component/auto-form/react/auto-form-field-custom-label.tsx[tags=snippet,indent=0]
----

The above example shows how to customize the label of the `firstName` and `lastName` fields:

[.example.desktop]
--
[source,tsx]
----
include::{root}/frontend/demo/component/auto-form/react/auto-form-field-custom-label.tsx[render,frame,tags=snippet,indent=0]
----
--

==== Customizing the Editor

You can use the `renderer` property of the `fieldOptions` to override the rendered field by Auto Form:

[source,tsx]
----
include::{root}/frontend/demo/component/auto-form/react/auto-form-field-custom-renderer.tsx[tags=snippet,indent=0]
----

The above example shows how to render a Text Area component for the description field:

[.example.desktop]
--
[source,tsx]
----
include::{root}/frontend/demo/component/auto-form/react/auto-form-field-custom-renderer.tsx[render,frame,tags=snippet,indent=0]
----
--

Another way of achieving the same result is by providing a custom form renderer for whole form. In the <<#using-custom-renderer,Using Custom Renderer>> section, you can see how to use a custom renderer to define any arbitrary layout for the form. You can also use a custom form renderer to add custom fields to the form, or to render any desired editor component for any fields. As the `form` property of the `AutoFormLayoutRendererProps` is a form binder instance, you can use the `field` directive to bind any custom field to the form as well. See <<../../guides/forms/binder.adoc#,Binding Data to Forms>> for more information about the form binding and `field` directive usage.

