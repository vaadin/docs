---
title: Auto Crud
order: 10
description: Used for auto populating CRUD views and actions based on a Java backend service.
---

:experimental:

= [since:dev.hilla:hilla@v2.4]#Auto Crud#

// tag::description[]
Auto Crud is a component for automatically populating needed UI components and actions to ultimately enable the end user to perform the four basic operations of listing, adding, editing, and deleting of the records. To fulfill this, Auto Crud includes a sortable, filterable, lazy loaded grid, besides to a form with editor components for all properties of the targeted entity provided by the Java backend service.
// end::description[]

include::{articles}/react/components/_shared.asciidoc[tag=scaled-examples]
include::{articles}/react/components/_shared.asciidoc[tag=scaled-examples-responsive]

== Basic Usage

Auto Crud requires a Java service that implements the `CrudService<T, ID>` interface. In the example here, the `EmployeeService` class extends `CrudRepositoryService<T, ID, R>`, which in turn implements the `CrudService<T, ID>`:

[.example]
--
[source,java]
.EmployeeService.java
----
include::{root}/src/main/java/com/vaadin/demo/fusion/crud/EmployeeService.java[tags=snippet,indent=0]
----
[source,java]
.Employee.java
----
include::{root}/src/main/java/com/vaadin/demo/fusion/crud/Employee.java[tags=snippet,indent=0]
----
[source,java]
.EmployeeRepository.java
----
include::{root}/src/main/java/com/vaadin/demo/fusion/crud/EmployeeRepository.java[tags=snippet,indent=0]
----
--

Hilla generates TypeScript objects for each `@BrowserCallable` service implementing the `CrudService<T, ID>` interface. These TypeScript objects have callable methods that execute the corresponding Java service methods, enabling the Add, Update, and Delete operations as well as lazy data loading with sorting and filtering.

For the `EmployeeService` example, you can import the generated TypeScript object in your React view, and use it as a value for the `<AutoCrud service={}/>` property to auto-populate grid columns and form fields:

[source,tsx]
----
include::{root}/frontend/demo/component/auto-crud/react/auto-crud-basic.tsx[tags=snippet,indent=0]
----

The Auto Crud component renders a sortable, filterable, lazy loaded grid, besides to a form with editor components for all properties of the `Employee` entity along with the needed action buttons on grid and the form to achieve the basic CRUD operations. a Save button that associates with the respective `save` method of the `CrudService<T, ID>`, and an initially hidden Discard button that calls the form binder's `reset` operation, and it is only visible when the form has some changes.

Here's what the rendered form looks like:

[.example.desktop]
--
[source,tsx]
----
include::{root}/frontend/demo/component/auto-crud/react/auto-crud-basic.tsx[render,frame,tags=snippet,indent=0]
----
--

== Component Composition

Auto Crud component is a high-level component and composed of the following components:

- <<../auto-grid/index.asciidoc#,Auto Grid>>
- <<../auto-form/index.asciidoc#,Auto Form>>

Each of the above components offer some customization options, which are described in the following sections.

== Customizing the Grid

As you can see in the example above, the Auto Crud component by default renders the grid with all the properties of the entity. You can customize the grid by using the `gridProps` property.

The underlying Auto Grid component offers several properties for customizing the grid and its columns. To avoid repeating all the examples in <<../auto-grid/index.asciidoc#,Auto Grid>> documentation, the first couple of examples below show the way of passing Auto Grid's properties through the `gridProps`. However, the rest of the properties are just listed with a brief description. For more detailed information and full examples about each property, see the <<../auto-grid/index.asciidoc#,Auto Grid>> documentation.

- `visibleColumns`: an array of strings that specifies the names and also order of appearance for the properties to be displayed as columns in the grid. The following example shows how to provide only `firstName`, `lastName`, `active`, `startDate`, `gender`, and `version` as the value of `visibleColumns` property to the `gridProps` to set the visibility and order of the columns:

[.example.desktop]
--
[source,tsx]
----
include::{root}/frontend/demo/component/auto-crud/react/auto-crud-visible-columns.tsx[render,frame,tags=snippet,indent=0]
----
--

.Don't Expose Sensitive Data on Client-Side
[CAUTION]
When using Auto Crud, it's important to check that you don't expose sensitive data to the client-side. For example, if you have a `password` property in your entity, hiding it using the `visibleColumns` property won't prevent the data from being sent to the client-side. Make sure your service implementation doesn't expose sensitive data to the client-side. You could do this, for example, by using a `@JsonIgnore` annotation on the property.

- `columnOptions`: an object that specifies the options for each column. The following example shows how to provide the `columnOptions` property to the `gridProps` to change the default header title of `firstName` column, and to provide a custom renderer for the `active` column:

[.example.desktop]
--
[source,tsx]
----
include::{root}/frontend/demo/component/auto-crud/react/auto-crud-column-options.tsx[render,frame,tags=snippet,indent=0]
----
--

- `customColumns`: an array of objects that specifies the custom columns to be added to the grid. Use cases of adding custom columns can be endless, but the example in <<../auto-grid/index.asciidoc#adding-custom-columns,Adding Custom Columns>> shows how to concatenate the value of two data properties and render them in one column.

- `noHeaderFilters`: Auto Grid has column-based filtering enabled by default. You can disable the built-in column filters by setting the `noHeaderFilters` flag.

- *Grid Props*: As the Auto Crud component is composed of the Auto Grid component, and it is using the <<../grid#,Grid component>> under the hood, you can use all the properties of the Grid component to customize the grid. The way to pass the properties to the Auto Crud component is by using the `gridProps` property.

== Customizing the Form

As you can see in the above examples, Auto Crud component renders a form with input components for all properties of the `Employee` entity along with a Save button that associates with the respective `save` method of the `CrudService<T, ID>`, and an initially hidden Discard button that calls the form binder's `reset` operation, and it is only visible when the form has some changes. You can customize the form rendered by Auto Crud by using the `formProps` property.

The underlying Auto Form component offers several properties for customizing the form and its fields. To avoid repeating all the examples in <<../auto-form/index.asciidoc#,Auto Form>> documentation, the first couple of examples below show the way of passing Auto Form's properties through the `gridProps`. However, the rest of the properties are just listed with a brief description. For more detailed information and full examples about each property, see the <<../auto-form/index.asciidoc#,Auto Form>> documentation.

- `visibleFields`: Auto Form component by default renders input components for all the data properties in a Form Layout, except for the fields annotated by `@Id` and `@Version`. Using `visibleFields` you get to choose which fields to render in the form and in what order. The following example shows how to provide the `visibleFields` property to the `formProps` to set the visibility and order of the fields:

[.example.desktop]
--
[source,tsx]
----
include::{root}/frontend/demo/component/auto-crud/react/auto-crud-visible-fields.tsx[render,frame,tags=snippet,indent=0]
----
--

- `fieldOptions`: an object that specifies the options for each field. The following example shows how to provide the `fieldOptions` property to the `formProps` to change the default label of `firstName` field, and to render a Text Area for the `description` field:

[.example.desktop]
--
[source,tsx]
----
include::{root}/frontend/demo/component/auto-crud/react/auto-crud-field-options.tsx[render,frame,tags=snippet,indent=0]
----
--

.Don't Expose Sensitive Data on Client-Side
[CAUTION]
When using Auto Form, it's important to check that you don't expose sensitive data to the client-side. For example, if you have a `password` property in your entity, hiding it using either of the `template` versions won't prevent the data from being sent to the client-side. Make sure your service implementation doesn't expose sensitive data to the client-side. You could do this, for example, by using a `@JsonIgnore` annotation on the property.

- `colspan`: in case you want to render the form in a two or more column layout, you can set the `colspan` property for each field through `fieldOption` props to make it span over more than one column.

- `formLayoutProps`: an object that specifies the options for the Form Layout.

- `layoutRenderer`: a function that takes the `AutoFormLayoutRendererProps` as a parameter and returns any React element. The `AutoFormLayoutRendererProps` contains a _read-only list of bound fields_ called `children`, and _the form binder instance_ called `form`. You can use this function to achieve any custom layout, and also to have more control over binding and validations.
