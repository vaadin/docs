---
tab-title: Usage
layout: tabbed-page
title: Radio Button
page-links:
  - 'API: https://cdn.vaadin.com/vaadin-web-components/{moduleNpmVersion:@vaadin/radio-group}/#/elements/vaadin-radio-group[TypeScript] / https://vaadin.com/api/platform/{moduleMavenVersion:com.vaadin:vaadin}/com/vaadin/flow/component/radiobutton/RadioButtonGroup.html[Java]'
  - 'Source: https://github.com/vaadin/web-components/tree/v{moduleNpmVersion:@vaadin/radio-group}/packages/radio-group[TypeScript] / https://github.com/vaadin/flow-components/tree/{moduleMavenVersion:com.vaadin:vaadin}/vaadin-radio-button-flow-parent[Java]'
---
:tag-name: vaadin-radio-button-group


= Radio Button

// tag::description[]
Radio Button Group allows the user to select exactly one value from a list of related, but mutually exclusive options.
// end::description[]

[.example]
--

ifdef::lit[]
[source,html]
----
include::{root}/frontend/demo/component/radiobutton/radio-button-basic.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/radiobutton/RadioButtonBasic.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/radiobutton/react/radio-button-basic.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--


== States

=== Read-Only

Use read-only when content needs to be accessible but not editable. Read-only elements can't be edited, but they're part of the tabbing order and can thus receive focus. The content of a read-only input can be selected and copied.

[.example]
--

ifdef::lit[]
[source,html]
----
include::{root}/frontend/demo/component/radiobutton/radio-button-readonly.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/radiobutton/RadioButtonReadonly.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/radiobutton/react/radio-button-readonly.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--

=== Disabled

Disable a field to mark it as currently unavailable. The disabled state is used for fields that aren't editable and don't need to be readable. Disabled elements can't be focused and may be inaccessible to assistive technologies such as screen readers.

Disabling can be preferable to hiding an element to prevent changes in layout when the element's visibility changes, and to make users aware of its existence even when it's currently unavailable.

[.example]
--

ifdef::lit[]
[source,html]
----
include::{root}/frontend/demo/component/radiobutton/radio-button-disabled.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/radiobutton/RadioButtonDisabled.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/radiobutton/react/radio-button-disabled.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--


== Orientation

The component's default orientation is horizontal. However, vertical orientation is recommended whenever possible, since it's generally easier for the user to scan a vertical list of options:

[.example]
--

ifdef::lit[]
[source,html]
----
include::{root}/frontend/demo/component/radiobutton/radio-button-vertical.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/radiobutton/RadioButtonVertical.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/radiobutton/react/radio-button-vertical.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--

In cases where vertical space needs to be conserved, horizontal orientation can be used. However, it's recommended that there be no more than three options:

[.example]
--

ifdef::lit[]
[source,html]
----
include::{root}/frontend/demo/component/radiobutton/radio-button-horizontal.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/radiobutton/RadioButtonHorizontal.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/radiobutton/react/radio-button-horizontal.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--

In cases where more options are needed, the Select component can be used instead.



== Custom Item Presentation

Items can be customized to include more than a single line of text:

[.example]
--

ifdef::lit[]
[source,typescript]
----
include::{root}/frontend/demo/component/radiobutton/radio-button-presentation.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/radiobutton/RadioButtonPresentation.java[render,tags=snippet,indent=0,group=Java]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/domain/Card.java[group=Java]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/domain/DataService.java[group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/radiobutton/react/radio-button-presentation.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--


// Basic Features

include::{articles}/components/_input-field-common-features.adoc[tags=basic-intro;label;helper;tooltip;;aria-labels]

[.example]
--
ifdef::lit[]
[source,typescript]
----
include::{root}/frontend/demo/component/radiobutton/radio-button-group-basic-features.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/radiobutton/RadioButtonGroupBasicFeatures.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/radiobutton/react/radio-button-group-basic-features.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--


// Style Variants

include::{articles}/components/_input-field-common-features.adoc[tags=styles-intro;helper-above-field;borders]

[.example]
--
ifdef::lit[]
[source,typescript]
----
include::{root}/frontend/demo/component/radiobutton/radio-button-group-styles.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/radiobutton/RadioButtonGroupStyles.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/radiobutton/react/radio-button-group-styles.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--



== Best Practices

=== Group Labels

It's important to provide labels for Radio Button Groups to distinguish them from each other, especially with multiple adjacent groups.

[.example]
--

ifdef::lit[]
[source,html]
----
include::{root}/frontend/demo/component/radiobutton/radio-button-group-labels.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/radiobutton/RadioButtonGroupLabels.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/radiobutton/react/radio-button-group-labels.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--


=== Custom Option

To enable the user to enter a custom option instead of picking one from the list, use an "Other" radio button choice at the bottom of the list with an associated Text Field for entry. The field should be hidden or disabled until the "Other" option is selected.

[.example]
--

ifdef::lit[]
[source,typescript]
----
include::{root}/frontend/demo/component/radiobutton/radio-button-custom-option.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/radiobutton/RadioButtonCustomOption.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/radiobutton/react/radio-button-custom-option.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--


=== Default Value & Blank Option

It's recommended that you set the most common option as the default value for Radio Button Groups. Place the default option at the top of the list.

In cases where it's important that the user make a conscious choice, the Radio Button Group should be blank by default.

In situations where the user isn't required to select a value, use a "blank" option:

[.example.render-only]
--

ifdef::lit[]
[source,typescript,role=render-only]
----
include::{root}/frontend/demo/component/radiobutton/radio-button-default-value.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::react[]
[source,tsx,role=render-only]
----
include::{root}/frontend/demo/component/radiobutton/react/radio-button-default-value.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]

--



=== Alternative to Checkbox

Two Radio Buttons can sometimes be a good alternative to a single Checkbox. If the Checkbox doesn't represent a simple yes/no choice, and its label can't clearly communicate the meaning of its unchecked state, it's better to use a Radio Button Group with two options:

// TODO split this into two examples, do and dont

[.example.render-only]
--
ifdef::lit[]
[source,typescript,role=render-only]
----
include::{root}/frontend/demo/component/radiobutton/radio-button-checkbox-alternative.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/radiobutton/react/radio-button-checkbox-alternative.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--



In a Horizontal Layout, Radio Button Groups also align better with other input fields than a single checkbox.



== Related Components

[cols="1,2"]
|===
|Component |Usage Recommendation

|<<../select#,Select>>
|A drop-down field for selecting an item from a list of options. Recommended when there is insufficient space for a Radio Button Group.

|<<../combo-box#,Combo Box>>
|A filterable, lazy-loading alternative to Select. Recommended for ten or more items.

|<<../list-box#,List Box>>
|A scrollable list of options. Supports single and multi-select.

|<<../checkbox#,Checkbox>>
|A corresponding component for multi-select options.
|===


[discussion-id]`E1E617CE-F935-451D-885F-CEF94EC0E53A`

