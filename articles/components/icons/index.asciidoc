---
title: Icons
page-links:
  - 'API: https://cdn.vaadin.com/vaadin-web-components/{moduleNpmVersion:vaadin-lumo-styles}/#/elements/vaadin-icon[TypeScript] / https://vaadin.com/api/platform/{moduleMavenVersion:com.vaadin:vaadin}/com/vaadin/flow/component/icon/Icon.html[Java]'
  - 'Source: https://github.com/vaadin/web-components/blob/v{moduleNpmVersion:vaadin-lumo-styles}/packages/vaadin-lumo-styles/vaadin-iconset.js[Lumo Icons] / https://github.com/vaadin/web-components/blob/v{moduleNpmVersion:vaadin-lumo-styles}/packages/icons/vaadin-iconset.js[Vaadin Icons]'
---

= Icons

Vaadin comes with two built-in icon sets:

Lumo Icons::
The Lumo Icons are designed to fit in with the default Lumo theme style.
They are drawn on a 24&times;24 pixel canvas with a 16&times;16 pixel active area for the icon itself and a safe area of 4 pixels around the icon, allowing for better visual balance across the icons.

Vaadin Icons::
The Vaadin Icons are drawn on a 16&times;16 pixel canvas, and have no safe area around the icon.
By default, the [classname]`Icon`/[elementname]`<vaadin-icon>` component renders icons on a 24&times;24 pixel canvas, so Vaadin Icons are scaled up and look bigger than the Lumo icons.

[source,typescript,role="render-only embedded"]
----
include::{root}/frontend/demo/foundation/icons-preview.ts[render, persistent]
----

== Usage

[.example]
--
ifdef::flow[]
[source,java]
----
<source-info group="Java">package com.vaadin.demo.component.icons;

import com.vaadin.flow.component.html.Div;
import com.vaadin.flow.component.icon.Icon;
import com.vaadin.flow.component.icon.VaadinIcon;
import com.vaadin.flow.router.Route;

@Route("icons")
public class IconsExample extends Div {
  public MyApp() {
    // tag::snippet[]
    Icon lumoIcon = new Icon("lumo", "photo");
    Icon vaadinIcon = new Icon(VaadinIcon.PHONE);

    add(lumoIcon, vaadinIcon);
    // end::snippet[]
  }
}
</source-info>
Icon lumoIcon = new Icon("lumo", "photo");
Icon vaadinIcon = new Icon(VaadinIcon.PHONE);

add(lumoIcon, vaadinIcon);
----
endif::flow[]

ifdef::lit[]
[source,typescript]
----
<source-info group="TypeScript">import { html, LitElement } from 'lit';
import { customElement } from 'lit/decorators.js';
import '@vaadin/icon';
import '@vaadin/vaadin-lumo-styles/vaadin-iconset.js';
import '@vaadin/icons';

@customElement('icons-example')
export class IconsExample extends LitElement {
  render() {
    // tag::snippet[]
    return html`
      <vaadin-icon icon="lumo:photo"></vaadin-icon>
      <vaadin-icon icon="vaadin:phone"></vaadin-icon>
    `;
    // end::snippet[]
  }
}</source-info>
return html`
  <vaadin-icon icon="lumo:photo"></vaadin-icon>
  <vaadin-icon icon="vaadin:phone"></vaadin-icon>
`;
----
endif::lit[]

ifdef::react[]
[source,tsx]
----
<source-info group="React">import React from 'react';
import { Icon } from '@hilla/react-components/Icon.js';
import '@vaadin/icons';

function Example() {
  return (
    <>
      <Icon icon="lumo:photo" />;
      <Icon icon="vaadin:phone" />;
    </>
  );
}</source-info>
<Icon icon="lumo:photo" />
<Icon icon="vaadin:phone" />
----
endif::react[]
--

The icons are rendered as an inline `<svg>` element inside the shadow root of a `<vaadin-icon>` element, allowing you to style them using CSS.

== Using a Third-Party Icon Set

A collection of SVG files can be converted to the `<vaadin-iconset>` format, which is “consumed” by the `<vaadin-icon>`/`Icon` component.
You can take a look at the https://github.com/vaadin/web-components/blob/master/packages/icons/vaadin-iconset.js[implementation of the Vaadin icon set] for reference.

Optionally, you can create a Java class/enum as a type-safe API for your Flow applications.

=== Icon Set Generator

The generator converts a folder of SVG files into `<vaadin-iconset>` definitions and corresponding Java enum definitions.
You can then download the files and add them to your project.

[source,typescript,role="render-only embedded"]
----
include::{root}/frontend/demo/component/icons/iconset-generator.ts[render, persistent]
----

=== Other Icon Formats

Third-party icon sets come in many different formats, and there is no single integration method that works for every format.

For *SVG icons*, you can use the generator on this page.

For *font icons*, you can use projects generated by https://start.vaadin.com[Vaadin Start] as reference, which use the https://icons8.com/line-awesome/[Line Awesome] icon set.

For *PNG icons*, use the `<img>`/<<{articles}/application/resources/#the-image-component,`Image`>> component.


[discussion-id]`47B97C93-9646-4D2A-882F-C4F709D3D099`
