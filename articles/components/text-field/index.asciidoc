---
tab-title: Usage
layout: tabbed-page
title: Text Field
page-links:
  - 'API: https://cdn.vaadin.com/vaadin-web-components/{moduleNpmVersion:vaadin-text-field}/#/elements/vaadin-text-field[TypeScript] / https://vaadin.com/api/platform/{moduleMavenVersion:com.vaadin:vaadin}/com/vaadin/flow/component/textfield/TextField.html[Java]'
  - 'Source: https://github.com/vaadin/web-components/tree/v{moduleNpmVersion:vaadin-text-field}/packages/text-field[TypeScript] / https://github.com/vaadin/flow-components/tree/{moduleMavenVersion:com.vaadin:vaadin}/vaadin-text-field-flow-parent[Java]'
---


= Text Field

// tag::description[]
Text Field allows the user to input and edit text.
// end::description[]
Prefix and suffix components, such as icons, are also supported.

[.example]
--
[source,html]
----
include::{root}/frontend/demo/component/textfield/text-field-basic.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/textfield/TextFieldBasic.java[render,tags=snippet,indent=0,group=Java]
----
--

:component-name: Text Field
include::{articles}/components/_shared.asciidoc[tag=field-features]

The features described here for Text Field are also available for <<related-components,other single-line text input components>>.


== Placeholder

A placeholder is a short description of the expected input value. It's only shown when the text field is empty.

[.example]
--
[source,html]
----
include::{root}/frontend/demo/component/textfield/text-field-placeholder.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/textfield/TextFieldPlaceholder.java[render,tags=snippet,indent=0,group=Java]
----
--

Placeholders aren't universal substitutes for labels since they're only visible while the field is empty. <<../input-fields#helper,Helpers>> are a better way to provide information that the user may need when filling in the field. Unless marked as required, fields with placeholders might be inadvertently skipped when filling in a form.

Search fields are a good example of where placeholders can be used without a label, if they are prefixed or suffixed with a search icon or located next to a search button.

Fields with placeholders, but without labels, should also provide an invisible label using the `aria-label` attribute to ensure that screen readers can access it.


== Clear Button

The optional clear button clears the field's current value. It's hidden while the field is empty. Clear buttons are useful for search and filter fields, where users might sometimes want to clear the field value. However, in data entry forms, they're typically unnecessary.

[.example]
--
[source,html]
----
include::{root}/frontend/demo/component/textfield/text-field-clear-button.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/textfield/TextFieldClearButton.java[render,tags=snippet,indent=0,group=Java]
----
--


== Text Alignment

Three different text alignments are supported: left (default), center, and right.

Right-alignment is recommended for numerical values when presented in vertical groups. It makes it easier to interpret and compare values.

[.example]
--
[source,html]
----
include::{root}/frontend/demo/component/textfield/text-field-text-alignment.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/textfield/TextFieldTextAlignment.java[render,tags=snippet,indent=0,group=Java]
----
--

.Numeric fields
[NOTE]
<<../number-field#,Number Field>> is often a better choice for certain numeric fields.


== Prefix & Suffix

[.example]
--
[source,html]
----
include::{root}/frontend/demo/component/textfield/text-field-prefix-suffix.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/textfield/TextFieldPrefixSuffix.java[render,tags=snippet,indent=0,group=Java]
----
--

Prefixes and suffixes can be used to display currency, units, icons, etc. Text or icons are recommended, but other elements can be used as well -- if they fit into the field.

Prefixes and suffixes shouldn't be used as a replacement for labels. The exception, though, would be fields like search fields, preferably combined with a <<placeholder,placeholder>>.

.Prefix and suffix are ignored by screen readers
[NOTE]
Any information relevant for assistive technologies needs to be provided as a label and possibly helper text.


== Min & Max Input Length

These properties affect the smallest and largest number of characters a field accepts, by limiting text entry to the maximum length, and triggering a validation error if a shorter value than the minimum length is entered. They can be used to enforce specific value formats, or to cap the value to the longest length supported by the underlying database schema.

[.example]
--
[source,html]
----
include::{root}/frontend/demo/component/textfield/text-field-min-max-input-length.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/textfield/TextFieldMinMaxInputLength.java[render,tags=snippet,indent=0,group=Java]
----
--

In cases where the length requirements may not be clear to the user, it's recommended to provide this information, for example by using a <<../input-fields#helper,helper>>.


== Pattern

The pattern is a regular expression that the Text Field's complete value is matched against during validation. Any value that doesn't match the pattern invalidates the field.

The following example invalidates any value that doesn't consist exclusively of numbers, parentheses, dashes, and the plus sign:

[.example]
--
[source,html]
----
include::{root}/frontend/demo/component/textfield/text-field-pattern.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/textfield/TextFieldPattern.java[render,tags=snippet,indent=0,group=Java]
----
--

In cases where the format requirements may not be clear to the user, it's recommended to provide this information, for example by using a <<../input-fields#helper,helper>>.


== Preventing Entry of Invalid Characters

Individual characters that the user enters into Text Field can be restricted using a _single-character_ regular expression. When enabled, the user can only enter characters that match the regular expression. If they try to enter any other characters, the component gives visual feedback that the input was prevented.

The following example shows how to let the user enter only numbers, parentheses, dashes, and the plus sign:

[.example]
--
[source,html]
----
include::{root}/frontend/demo/component/textfield/text-field-allowed-char-pattern.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/textfield/TextFieldAllowedCharPattern.java[render,tags=snippet,indent=0,group=Java]
----
--


== Small Variant

The _small_ theme variant can be used to make individual fields more compact.

[.example]
--
[source,html]
----
include::{root}/frontend/demo/component/textfield/text-field-small-variant.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/textfield/TextFieldSmallVariant.java[render,tags=snippet,indent=0,group=Java]
----
--

.Avoid overuse
[NOTE]
Size variants should be used sparingly. See <<{articles}/styling/lumo/design-tokens/size-space#,Size and Space>> for details on how to change the default text field size.


== Autoselect

When a field is set to `autoselect`, its contents are selected when the field is focused. Use `autoselect` when the user might to want to replace the entire value rather than tweak it.

[options="header"]
|===
|Autoselect |Focused with |Result
|`ON`|Pointing device or keyboard navigation|Contents selected
|`OFF`|Pointing device|Cursor placed where clicked
|`OFF`|Keyboard navigation +
kbd:[Tab]|Cursor at the end of the input value
|`OFF`|Keyboard navigation +
kbd:[Shift+Tab]|Contents selectedfootnote:[Consequent keyboard navigation results in the contents being selected until the selection is changed, by either arrow navigation or mouse click.]
|===


== Related Components

A variety of components are available for different types of input:

[cols="1,2"]
|===
|Component |Usage Recommendations

|<<../text-area#,Text Area>>|Free-form multi-line text input, for text longer than can typically fit on a single line.

|<<../email-field#,Email Field>>|For email addresses.

|<<../number-field#,Number Field>>|Allows only numeric input.

|<<../password-field#,Password Field>>|For securely entering passwords.

|<<../combo-box#,Combo Box>>|For selecting from a predefined set of options.
Allows filtering and entering custom values.

|<<../date-picker#,Date Picker>>|Input field for entering or selecting a specific date.

|<<../time-picker#,Time Picker>>|Input field for entering or selecting a specific time.
|===


[discussion-id]`E6D6D93F-BDB7-425A-AE47-343981004746`
