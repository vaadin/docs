---
title: Badge
page-links:
  - 'Source: https://github.com/vaadin/web-components/blob/v{moduleNpmVersion:vaadin-lumo-styles}/packages/vaadin-lumo-styles/badge.js[TypeScript]'
---

= Badge

// tag::description[]
Badges are colored text elements containing small bits of information.
// end::description[]
They are used for labeling content, displaying metadata and/or highlighting information.

[.example]
--

ifdef::lit[]
[source,html]
----
include::{root}/frontend/demo/component/badge/badge-basic.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/badge/BadgeBasic.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/badge/react/badge-basic.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]

--

.Import styles
[NOTE]
====
Badge is a set of CSS classes rather than a web / Flow component.
The Badge-specific CSS classes are available as part of the Lumo theme.
To use these classes in your application, enable them in your theme's [filename]`theme.json`:

[.example]
--
[source,json]
----
{
  "lumoImports": [<...>, "badge"]
}
----
--

The [filename]`theme.json` is located in the theme folder at [filename]`/frontend/themes/<my-theme>/theme.json`.
====

== Label

Badges should contain a label.
Labels should be clear, concise, and written using sentence case.
Aim for 1 to 2 words.

== Icons

Badges can contain icons as well as text.
Icons can be placed on either side of the text.

[.example]
--

ifdef::lit[]
[source,html]
----
include::{root}/frontend/demo/component/badge/badge-icons.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/badge/BadgeIcons.java[render,tags=snippet1,indent=0,group=Java]

include::{root}/src/main/java/com/vaadin/demo/component/badge/BadgeIcons.java[render,tags=snippet2,indent=0,group=Java]

...

include::{root}/src/main/java/com/vaadin/demo/component/badge/BadgeIcons.java[render,tags=snippet3,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/badge/react/badge-icons.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--

.Use icons sparingly
[NOTE]
The benefit of using icons should be weighed against the visual noise it adds.

=== Icon-Only

Badges can also be used with icons without a label.
For accessibility, a tooltip and `aria-label` attribute is recommended to ensure that all users can identify their meaning.

[.example]
--

ifdef::lit[]
[source,html]
----
include::{root}/frontend/demo/component/badge/badge-icons-only.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/badge/BadgeIconsOnly.java[render,tags=snippet1,indent=0,group=Java]

...

include::{root}/src/main/java/com/vaadin/demo/component/badge/BadgeIconsOnly.java[render,tags=snippet2,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/badge/react/badge-icons-only.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--

Icon-only badges should primarily be used for common recurring content with highly standardized, universally understood icons (such as a checkmark for "_yes_"), and for content that's repeated, for example in lists and tables.

[.example]
--

ifdef::lit[]
[source,typescript]
----
include::{root}/frontend/demo/component/badge/badge-icons-only-table.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/badge/BadgeIconsOnlyTable.java[render,tags=snippet1,indent=0,group=Java]

...

include::{root}/src/main/java/com/vaadin/demo/component/badge/BadgeIconsOnlyTable.java[render,tags=snippet2,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/badge/react/badge-icons-only-table.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--

== Theme Variants

Badge features theme variants for different sizes, colors, and shapes.
You can combine any theme variants together.

=== Size

Badges have two different sizes you can use: the default (normal) and `small`.
Use the `small` theme variant to make a badge smaller, for example when space is limited or for compact parts of the UI.

[.example]
--

ifdef::lit[]
[source,html]
----
include::{root}/frontend/demo/component/badge/badge-size.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/badge/BadgeSize.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/badge/react/badge-size.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--

=== Color

Badges have four different color variants: default, `success`, `error`, and `contrast`.
The color variants can be paired with the `primary` theme variant for additional emphasis.

[.example]
--

ifdef::lit[]
[source,html]
----
include::{root}/frontend/demo/component/badge/badge-color.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/badge/BadgeColor.java[render,tags=snippet1,indent=0,group=Java]

include::{root}/src/main/java/com/vaadin/demo/component/badge/BadgeColor.java[render,tags=snippet2,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/badge/react/badge-color.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--

|===
|Variant |Theme name |Usage recommendations

|Normal
|
|Default style.
Recommended for informational messages.
This style may be confused with a Button or link.

|Success
|`Success`
|Highlight positive outcomes, such as when a task or operation is completed.

|Error
|`Error`
|Use the error theme variant to communicate alerts, failures, or warnings.

|Contrast
|`Contrast`
|A high-contrast version that improves legibility and distinguishes the badge from the rest of the UI.
Recommended for neutral badges (that don't communicate success or errors).

|Primary
|`Primary`
|Used for important information and/or to draw more attention to your badge.
Can be combined with all other theme variants.

|===

.Accessibility
[NOTE]
Assistive technologies, such as screen readers, interpret badges solely based on their content.
Without proper context, they may end up confusing the user.
If you are using colors and icons to convey information, provide the same info via `aria-label` to ensure that screen readers can interpret the information.

=== Shape

Applying the `pill` theme variant produces a badge with rounded corners.
It can aid in making badges and buttons more distinct from one another.

[.example]
--

ifdef::lit[]
[source,html]
----
include::{root}/frontend/demo/component/badge/badge-shape.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/badge/BadgeShape.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/badge/react/badge-shape.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--

== Use Cases

=== Highlighting and Distinguishing Information

A typical use case for badges is to highlight an item's status, for example in a Grid.

[.example]
--

ifdef::lit[]
[source,typescript]
----
include::{root}/frontend/demo/component/badge/badge-highlight.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/badge/BadgeHighlight.java[render,tags=snippet1,indent=0,group=Java]

...

include::{root}/src/main/java/com/vaadin/demo/component/badge/BadgeHighlight.java[render,tags=snippet2,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/badge/react/badge-highlight.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--

They are also often used for displaying metadata tags.

=== Interactive Content

Badges can house interactive content such as Anchors and Buttons.
For example, Badges that highlight active filters might contain a "Clear" Button which removes the associated filter.

[.example]
--

ifdef::lit[]
[source,typescript]
----
include::{root}/frontend/demo/component/badge/badge-interactive.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/badge/BadgeInteractive.java[render,tags=snippet1,indent=0,group=Java]

...

include::{root}/src/main/java/com/vaadin/demo/component/badge/BadgeInteractive.java[render,tags=snippet2,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/badge/react/badge-interactive.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--

=== Counter

Badges can be used as counters, for example to show the number of unread/new messages, selection count, etc.

[.example]
--

ifdef::lit[]
[source,html]
----
include::{root}/frontend/demo/component/badge/badge-counter.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/badge/BadgeCounter.java[render,tags=snippet1,indent=0,group=Java]

...

include::{root}/src/main/java/com/vaadin/demo/component/badge/BadgeCounter.java[render,tags=snippet2,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/badge/react/badge-counter.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--

Assistive technologies, such as screen readers, interpret badges solely based on their content.
Without proper context, they may end up confusing the user.
To provide context for people using screen readers, set the badge's `aria-label` attribute.

== Best Practices

=== Badge vs Button

Badges and Buttons are similar in appearance.
This might lead users to think that badges are interactive.

Placement, language, shape, and color can all help mitigate any confusion.
First, badges shouldn't be labeled with active verbs.
They aren't actions, but rather static text/content.
Second, avoid placing badges directly next to Buttons, in particular if they are using similar themes.
The `pill` theme variant may aid in making badges and Buttons more distinct from one another.


[discussion-id]`69AF8882-CA67-4AB8-BF9F-69A1EA6CE84C`
