---
tab-title: Usage
layout: tabbed-page
title: Menu Bar
page-links:
  - 'API: https://cdn.vaadin.com/vaadin-web-components/{moduleNpmVersion:@vaadin/menu-bar}/#/elements/vaadin-menu-bar[TypeScript] / https://vaadin.com/api/platform/{moduleMavenVersion:com.vaadin:vaadin}/com/vaadin/flow/component/menubar/MenuBar.html[Java]'
  - 'Source: https://github.com/vaadin/web-components/tree/v{moduleNpmVersion:@vaadin/menu-bar}/packages/menu-bar[TypeScript] / https://github.com/vaadin/flow-components/tree/{moduleMavenVersion:com.vaadin:vaadin}/vaadin-menu-bar-flow-parent[Java]'
---


= Menu Bar

:experimental:

// tag::description[]
Menu Bar is a horizontal button bar with hierarchical drop-down menus.
// end::description[]
Menu items can trigger an action, open a menu, or work as a toggle.

[.example]
--

ifdef::lit[]
[source,typescript]
----
include::{root}/frontend/demo/component/menubar/menu-bar-basic.ts[render,tags=snippet;snippethtml,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/menubar/MenuBarBasic.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]


ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/menubar/react/menu-bar-basic.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--

== Styles

=== Default Variants

The following variants are available to adjust the appearance of the component:

[.example]
--

ifdef::lit[]
[source,typescript]
----
include::{root}/frontend/demo/component/menubar/menu-bar-styles.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/menubar/MenuBarStyles.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]


ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/menubar/react/menu-bar-styles.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--

|===
|Variant |Usage Recommendation

|Tertiary
|Corresponds to the <<../button#styles,tertiary button variant>>, omitting the background color.

|Primary
|Corresponds to the primary button variant. As only one primary action should be presented in the same part of the UI, this should be used only for <<dropdown-buttons,drop-down button use cases>>.

|Small
|Compact variant. Can be combined with Tertiary and Primary.
|===

.Customize Default Menu Button Styles
[TIP]
The standard Menu Button styles can be adjusted using <<{articles}/styling/lumo/lumo-style-properties#,the Lumo style properties>>. These variants should be used only to differentiate special instances of the component.


=== Alignment

Top-level items are aligned by default to the start of the Menu Bar. Use instead the `end-aligned` theme variant to align them to the end.

[.example]
--

ifdef::lit[]
[source,html]
----
include::{root}/frontend/demo/component/menubar/menu-bar-right-aligned.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/menubar/MenuBarRightAligned.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/menubar/react/menu-bar-right-aligned.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--

=== Styling Menu Items

An individual menu item can be styled using custom theme variants. A custom variant can be created by adding a custom theme name (e.g., `custom-theme`) to an item, and then adding CSS for styling all items using that theme name.

The following example shows how to add a custom theme variant named `custom-theme` to individual menu bar buttons and items, and how to style that variant with CSS:

[.example]
--

ifdef::lit[]
[source,typescript]
----
include::{root}/frontend/demo/component/menubar/menu-bar-custom-theme.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/menubar/MenuBarCustomTheme.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

[source,css]
----
include::{root}/frontend/themes/docs/menu-bar-theming.css[]
----


ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/menubar/react/menu-bar-custom-theme.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--



== Overflow

Items that don't fit into the current width of the menu bar collapse automatically into an overflow menu at the end:

[.example]
--

ifdef::lit[]
[source,typescript]
----
include::{root}/frontend/demo/component/menubar/menu-bar-overflow.ts[render,tags=snippet;snippethtml,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/menubar/MenuBarOverflow.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]


ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/menubar/react/menu-bar-overflow.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--



== Menu Item Features

pass:[<!-- vale Vaadin.ThereIs = NO -->]

There are several features available for menu items. They're described in the following sub-sections.

pass:[<!-- vale Vaadin.ThereIs = YES -->]

=== Icons

Menu items can have icons in addition to text -- or instead of text.

[.example]
--

ifdef::lit[]
[source,typescript]
----
include::{root}/frontend/demo/component/menubar/menu-bar-icons.ts[render,tags=snippet;snippethtml,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/menubar/MenuBarIcons.java[render,tags=snippet,indent=0,group=Java]

...

include::{root}/src/main/java/com/vaadin/demo/component/menubar/MenuBarIcons.java[render,tags=createIcon,indent=0,group=Java]
----
endif::[]


ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/menubar/react/menu-bar-icons.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--

Most actions are difficult to represent reliably with icons, so use them sparingly. The benefit of icons in addition to text should be weighed against the visual distractions they may create. Menu items in drop-down menus should always have text labels.

Icon-only menu buttons should be used primarily for common recurring actions with highly standardized, universally understood icons. Menu buttons should include a textual alternative for screen readers using the `aria-label` attribute or <<tooltips,tooltips>>. Menu Bars with icon-only top-level items can use the *Tertiary Inline* style variant to reduce the horizontal padding around the icons.

[.example]
--

ifdef::lit[]
[source,typescript]
----
include::{root}/frontend/demo/component/menubar/menu-bar-icon-only.ts[render,tags=snippet;snippethtml,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/menubar/MenuBarIconOnly.java[render,tags=snippet,indent=0,group=Java]

...

include::{root}/src/main/java/com/vaadin/demo/component/menubar/MenuBarIconOnly.java[render,tags=createIcon,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/menubar/react/menu-bar-icon-only.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--

.Other Components in Menu Items
[WARNING]
While it's technically possible to put any UI element in a menu item, this can cause problems for accessibility as it may not be possible to focus them, and they may not be interpreted correctly by assistive technologies.


=== Disabled Items

Menu items can be disabled to show that they are unavailable currently.

[.example]
--

ifdef::lit[]
[source,typescript]
----
include::{root}/frontend/demo/component/menubar/menu-bar-disabled.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/menubar/MenuBarDisabled.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]


ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/menubar/react/menu-bar-disabled.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--

=== Checkable Menu Items

Menu items in drop-down menus can be configured as checkable to toggle options on and off.

[.example]
--

ifdef::lit[]
[source,typescript]
----
include::{root}/frontend/demo/component/menubar/menu-bar-checkable.ts[render,tags=snippet;snippethtml;snippetselected,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/menubar/MenuBarCheckable.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]


ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/menubar/react/menu-bar-checkable.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--

.Not a Radio Button Replacement
[NOTE]
A Menu Bar with checkable items shouldn't be used as a replacement for <<../radio-button#,radio buttons>> in a form.



== Dividers

You can use dividers to separate and group related content. However, use dividers sparingly to avoid creating unnecessary visual clutter.

[.example]
--

ifdef::lit[]
[source,typescript]
----
include::{root}/frontend/demo/component/menubar/menu-bar-dividers.ts[render,tags=snippet;snippethtml,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/menubar/MenuBarDividers.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]


ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/menubar/react/menu-bar-dividers.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--

.Other Content Not Accessible
[WARNING]
While it's technically possible to put any UI element in a drop-down menu -- including interactive components -- they're not accessible by keyboard or assistive technologies.



== Open on Hover

A component can be configured to open drop-down menus on hover, instead of on click.

[.example]
--

ifdef::lit[]
[source,typescript]
----
include::{root}/frontend/demo/component/menubar/menu-bar-open-on-hover.ts[render,tags=snippet;snippethtml,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/menubar/MenuBarOpenOnHover.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]


ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/menubar/react/menu-bar-open-on-hover.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--



[role="since:com.vaadin:vaadin@V23.3"]
== Tooltips

Tooltips can be configured on top-level items to provide additional information, especially for icon-only items. When a top-level item is disabled, the corresponding tooltip isn't shown.

[.example]
--

ifdef::lit[]
[source,typescript]
----
include::{root}/frontend/demo/component/menubar/menu-bar-tooltip.ts[render,tag=snippet,indent=0,group=TypeScript]

...

include::{root}/frontend/demo/component/menubar/menu-bar-tooltip.ts[render,tag=snippethtml,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/menubar/MenuBarTooltip.java[render,tags=snippet,indent=0,group=Java]

...

include::{root}/src/main/java/com/vaadin/demo/component/menubar/MenuBarTooltip.java[render,tags=createIcon,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/menubar/react/menu-bar-tooltip.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--

See the <<../tooltip#,Tooltips documentation page>> for details on tooltip configuration.



== Keyboard Usage

=== Top-Level Items

|===
|Interaction |Keyboard Shortcut

|Navigate between top-level items.
|kbd:[Left] and kbd:[Right] arrow keys

|Open top-level menu.
|kbd:[Down] / kbd:[Space] / kbd:[Enter]

|Trigger top-level item with a menu.
|kbd:[Space] / kbd:[Enter]
|===


=== Menu-Items

|===
|Interaction |Keyboard Shortcut

|Navigate between items in a drop-down menu.
|kbd:[Up] and kbd:[Down] arrow keys

|Open sub-menu.
|kbd:[Right] / kbd:[Space] / kbd:[Enter]

|Trigger menu item without a sub-menu.
|kbd:[Space] / kbd:[Enter]

|Return to previous menu.
|kbd:[Left]

|Close the drop-down menu.
|kbd:[Esc]
|===


pass:[<!-- vale Vaadin.HeadingCase = NO -->]

[[dropdown-buttons]]
== Drop-Down & Combo Buttons

A Menu Bar with a single top-level item is essentially a drop-down button. This solution provides a better user experience and better accessibility than a regular <<../button#,Button>> paired with a <<../context-menu#,Context Menu>>.

pass:[<!-- vale Vaadin.HeadingCase = YES -->]

[.example]
--

ifdef::lit[]
[source,typescript]
----
include::{root}/frontend/demo/component/menubar/menu-bar-drop-down.ts[render,tags=snippet;snippethtml,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/menubar/MenuBarDropDown.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]


ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/menubar/react/menu-bar-drop-down.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--

So-called _combo buttons_ can be created in a similar way. For example, they can be created to provide a set of variations on an action.

[.example]
--

ifdef::lit[]
[source,typescript]
----
include::{root}/frontend/demo/component/menubar/menu-bar-combo-buttons.ts[render,tags=snippet;snippethtml,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/menubar/MenuBarComboButtons.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]


ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/menubar/react/menu-bar-combo-buttons.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--



== Internationalization (i18n)

Menu Bar provides an API for localization. Currently, only the accessible label for the overflow menu button can be customized.

[.example]
--
ifdef::lit[]
[source,typescript]
----
include::{root}/frontend/demo/component/menubar/menu-bar-internationalization.ts[tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/menubar/MenuBarInternationalization.java[tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/menubar/react/menu-bar-internationalization.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--



== Best Practices

Menu Bar shouldn't be used for navigation. Use <<../tabs#,tabs>> to switch between content, or anchor elements for regular navigation. It isn't an input field. Use instead <<../select#,Select>>, <<../combo-box#,Combo Box>>, or <<../radio-button#,Radio Button>>.


== Related Components

|===
|Component |Usage Recommendation

|<<../button#,Button>>
|Regular Button component for individual actions.

|<<../select#,Select>>
|Drop-down input field.

|<<../tabs#,Tabs>>
|Tabs should be used to split content into sections that the user can switch between.

|<<../context-menu#,Context Menu>>
|A generic drop-down menu that can be triggered from any component.
|===


[discussion-id]`BCC76FD2-FB02-4F71-A6DF-7574CAC1C662`
