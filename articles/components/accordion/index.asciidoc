---
title: Accordion
tab-title: Usage
layout: tabbed-page
page-links:
  - 'API: https://cdn.vaadin.com/vaadin-web-components/{moduleNpmVersion:@vaadin/accordion}/#/elements/vaadin-accordion[TypeScript] / https://vaadin.com/api/platform/{moduleMavenVersion:com.vaadin:vaadin}/com/vaadin/flow/component/accordion/Accordion.html[Java]'
  - 'Source: https://github.com/vaadin/web-components/tree/v{moduleNpmVersion:@vaadin/accordion}/packages/accordion[TypeScript] / https://github.com/vaadin/flow-components/tree/{moduleMavenVersion:com.vaadin:vaadin}/vaadin-accordion-flow-parent[Java]'
---


= Accordion

// tag::description[]
Accordion is a vertically stacked set of expandable panels.
// end::description[]
It reduces clutter and helps maintain the user's focus by showing only the relevant content at any time.

[.example]
--

ifdef::lit[]
[source,html]
----
include::{root}/frontend/demo/component/accordion/accordion-basic.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/accordion/AccordionBasic.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/accordion/react/accordion-basic.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--


== Anatomy

Accordion consists of stacked panels, each composed of two parts: a summary and a content area. Only one panel can be expanded at a time. Use the <<../details#,Details>> component to allow multiple, simultaneously expanded sections.


ifdef::flow,lit[]
=== Summary

The summary is the part that's always visible, and typically describes the content, for example, with a title. Clicking on the summary toggles the content area's visibility.

The summary supports rich content and can contain any component. This can be utilized, for example, to display the status of the corresponding content.

[.example]
--

ifdef::lit[]
[source,typescript]
----
include::{root}/frontend/demo/component/accordion/accordion-summary.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/accordion/AccordionSummary.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/accordion/react/accordion-summary.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--
endif::[]

=== Content

This is the collapsible part of a panel. It can contain any component. When the content area is collapsed, the content is invisible and inaccessible by keyboard or screen reader.

[.example]
--

ifdef::lit[]
[source,html]
----
include::{root}/frontend/demo/component/accordion/accordion-content.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/accordion/AccordionContent.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/accordion/react/accordion-content.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--


== Theme Variants

Accordion has three theme variants: `filled`, `small`, and `reverse`. Set the theme attribute separately for each panel, not on Accordion itself. Theme names can be combined with each other. For example, all three themes variants can be applied to a panel.

// TODO example would be nice to have

=== Filled Panels

The `filled` theme variant makes the panel's boundaries visible. This helps tie its content together visually and distinguishes it from the surrounding UI.

[.example]
--

ifdef::lit[]
[source,html]
----
include::{root}/frontend/demo/component/accordion/accordion-filled-panels.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/accordion/AccordionFilledPanels.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/accordion/react/accordion-filled-panels.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--

=== Small Panels

Use the `small` theme variant for compact UIs.

[.example]
--

ifdef::lit[]
[source,html]
----
include::{root}/frontend/demo/component/accordion/accordion-small-panels.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/accordion/AccordionSmallPanels.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/accordion/react/accordion-small-panels.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--

=== Reverse Panels

The `reverse` theme variant places the toggle icon after the summary contents. This can be useful for aligning visually the summary with other content.

[.example]
--

ifdef::lit[]
[source,html]
----
include::{root}/frontend/demo/component/accordion/accordion-reverse-panels.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/accordion/AccordionReversePanels.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/accordion/react/accordion-reverse-panels.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--

== Disabled Panels

Accordion panels can be disabled to prevent them from being expanded or collapsed. Details can also be disabled to prevent them from being expanded or collapsed. Components inside a disabled expanded panel are automatically disabled as well.

[.example]
--

ifdef::lit[]
[source,html]
----
include::{root}/frontend/demo/component/accordion/accordion-disabled-panels.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/accordion/AccordionDisabledPanels.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/accordion/react/accordion-disabled-panels.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--

== Best Practices

Accordions are suitable when users need to focus on smaller pieces of content at any given time. However, when all of the content is relevant to the user to make a decision, Accordions should be avoided. Content areas that are logically linked should be grouped together in one panel.

Accordions are better suited than Tabs for long labels. However, Accordions can feel _jumpy_ as panels are toggled -- especially if there are several panels or the panel content is long.

Details can be used instead of Accordion when there is a need to see content from multiple panels, simultaneously.

Accordions can be used to break a complex form into smaller step-by-step sections.

The expandable and collapsible nature of accordions can sometimes be difficult for users to discover. Use the <<filled-panels,filled variant>> and apply [since:com.vaadin:vaadin@V23.3]##<<../tooltip#,tooltips>>## on the panels to make this more discoverable.


== Related Components

[cols="1,2"]
|===
|Component |Usage Recommendation

|<<../details#,Details>>|Single collapsible panel.

|<<../tabs#,Tabs>>|Component for organizing and grouping content into navigable sections.
|===


[discussion-id]`FAE6DC0A-C9CA-408C-B678-1B728ED61F39`
