---
title: Vertical Layout
page-links:
  - 'API: https://cdn.vaadin.com/vaadin-web-components/{moduleNpmVersion:@vaadin/ordered-layout}/#/elements/vaadin-vertical-layout[TypeScript] / https://vaadin.com/api/platform/{moduleMavenVersion:com.vaadin:vaadin}/com/vaadin/flow/component/orderedlayout/VerticalLayout.html[Java]'
  - 'Source: https://github.com/vaadin/web-components/tree/v{moduleNpmVersion:@vaadin/ordered-layout}/packages/vertical-layout[TypeScript] / https://github.com/vaadin/flow-components/tree/{moduleMavenVersion:com.vaadin:vaadin}/vaadin-ordered-layout-flow-parent[Java]'
---


= Vertical Layout

// tag::description[]
Vertical Layout places components top-to-bottom in a column.
// end::description[]

By default, it has a width of 100% and an undefined height. Its width is constrained by its parent component. Whereas, its height is determined by the components it contains.

See <<../horizontal-layout#, Horizontal Layout>> for information on placing components side-by-side.

[.example]
--

ifdef::lit[]
[source,typescript]
----
include::{root}/frontend/demo/component/basiclayouts/basic-layouts-vertical-layout.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/basiclayouts/BasicLayoutsVerticalLayout.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/basiclayouts/react/basic-layouts-vertical-layout.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--

Components in a Vertical Layout can be aligned vertically, as you'd expect. However and perhaps surprisingly, they can also be aligned horizontally in a Vertical Layout.



== Vertical Alignment

You can position components at the top, middle, or bottom. You can also position them by specifying how the excess space in a layout is distributed among them.

[.example]
--

ifdef::lit[]
[source,typescript]
----
include::{root}/frontend/demo/component/basiclayouts/basic-layouts-vertical-layout-vertical-alignment.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/basiclayouts/BasicLayoutsVerticalLayoutVerticalAlignment.java[render,tags=layout,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/basiclayouts/react/basic-layouts-vertical-layout-vertical-alignment.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--


|===
|Value |Description

|`START` (default)
|Positions items at the top.

|`CENTER`
|Centers items, vertically.

|`END`
|Positions items at the bottom.

|`BETWEEN`
|Available space is distributed equally among items. However, no space is added before the first item, or after the last.

|`AROUND`
|Available space is distributed equally among items. However, the space before the first item and after the last is half of that between items.

|`EVENLY`
|Available space is distributed equally among items. The space before the first item and after the last item is the same as between others.
|===



== Horizontal Alignment

Components in a Vertical Layout are left-aligned by default, but can be centered, right-aligned or stretched horizontally.

[.example]
--

ifdef::lit[]
[source,typescript]
----
include::{root}/frontend/demo/component/basiclayouts/basic-layouts-vertical-layout-horizontal-alignment.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/basiclayouts/BasicLayoutsVerticalLayoutHorizontalAlignment.java[render,tags=layout,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/basiclayouts/react/basic-layouts-vertical-layout-horizontal-alignment.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--


|===
|Value |Description

|`START` (default)
|Left-aligns items for left-to-right language text (e.g., English). For right-to-left languages (e.g., Arabic, Hebrew), it right-aligns items.

|`CENTER`
|Centers items, horizontally.

|`END`
|Right-aligns for left-to-right language text. For right-to-left languages, it left-aligns items.

|`STRETCH`
|Stretches horizontally items with undefined width.
|===

It's also possible to align horizontally individual components by overriding the general alignment setting of the layout.


[.example]
--

ifdef::lit[]
[source,typescript]
----
include::{root}/frontend/demo/component/basiclayouts/basic-layouts-vertical-layout-individual-alignment.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/basiclayouts/BasicLayoutsVerticalLayoutIndividualAlignment.java[render,tags=layout,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/basiclayouts/react/basic-layouts-vertical-layout-individual-alignment.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--



== Spacing

Spacing is used to create space between components in the same layout. Spacing can help prevent misclicks and distinguish content areas.

[.example]
--

ifdef::lit[]
[source,typescript]
----
include::{root}/frontend/demo/component/basiclayouts/basic-layouts-spacing.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/basiclayouts/BasicLayoutsSpacing.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/basiclayouts/react/basic-layouts-spacing.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--

Five different spacing theme variants are available:

[.example]
--

ifdef::lit[]
[source,typescript]
----
include::{root}/frontend/demo/component/basiclayouts/basic-layouts-spacing-variants.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/basiclayouts/BasicLayoutsSpacingVariants.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/basiclayouts/react/basic-layouts-spacing-variants.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--

|===
|Theme Variant |Usage Recommendation

|`spacing-xs`
|Extra-small space between items.

|`spacing-s`
|Small space between items.

|`spacing`
|Medium space between items.

|`spacing-l`
|Large space between items.

|`spacing-xl`
|Extra-large space between items.
|===


[.example]
--

ifdef::lit[]
[source,typescript]
----
<vaadin-vertical-layout
  theme="spacing-xs padding">
</vaadin-vertical-layout>
----
endif::[]

ifdef::flow[]
[source,java]
----
VerticalLayout layout = new VerticalLayout();
layout.setSpacing(false);
layout.getThemeList().add("spacing-xs");
----
endif::[]

ifdef::react[]
[source,tsx]
----
<VerticalLayout theme="spacing-xs padding">
</VerticalLayout>
----
endif::[]

--


== Padding

Padding is the space allocated between the content in a layout and the outer border. This should not be confused with Margin, which is explained in the next section.

Padding can help distinguish the content in a layout from its surrounding. Padding is applied using the padding theme variant.

[.example]
--

ifdef::lit[]
[source,typescript]
----
include::{root}/frontend/demo/component/basiclayouts/basic-layouts-padding.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/basiclayouts/BasicLayoutsPadding.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/basiclayouts/react/basic-layouts-padding.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--


== Margin

Margin is the space around a layout. This is different from Padding, which is explained in the previous section.

[.example]
--

ifdef::lit[]
[source,typescript]
----
include::{root}/frontend/demo/component/basiclayouts/basic-layouts-margin.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/basiclayouts/BasicLayoutsMargin.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/basiclayouts/react/basic-layouts-margin.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--


[discussion-id]`73cc0e40-d39a-11ed-afa1-0242ac120002`