---
tab-title: Usage
layout: tabbed-page
title: Details
page-links:
  - 'API: https://cdn.vaadin.com/vaadin-web-components/{moduleNpmVersion:@vaadin/details}/#/elements/vaadin-details[TypeScript] / https://vaadin.com/api/platform/{moduleMavenVersion:com.vaadin:vaadin}/com/vaadin/flow/component/details/Details.html[Java]'
  - 'Source: https://github.com/vaadin/web-components/tree/v{moduleNpmVersion:@vaadin/details}/packages/details[TypeScript] / https://github.com/vaadin/flow-components/tree/{moduleMavenVersion:com.vaadin:vaadin}/vaadin-details-flow-parent[Java]'
---


= Details

// tag::description[]
Details is an expandable panel for showing and hiding content from the user, to make the UI less cluttered.
// end::description[]

[.example]
--
ifdef::lit[]
[source,typescript]
----
include::{root}/frontend/demo/component/details/details-basic.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/details/DetailsBasic.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/details/react/details-basic.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--


== Anatomy

Details consist of a summary area and a content area.


=== Summary

The Summary is the part that's always visible, and typically describes the content, for example with a title. Clicking on the summary toggles the content area's visibility.

The summary supports rich content and can contain any component. This can be used, for example, to display the status of the corresponding content.

[.example]
--
ifdef::lit[]
[source,typescript]
----
include::{root}/frontend/demo/component/details/details-summary.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,typescript]
----
include::{root}/frontend/generated/com/vaadin/demo/domain/Country.ts[group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/details/DetailsSummary.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]


ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/details/react/details-summary.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--


=== Content

This is the collapsible part of Details. It can contain any component. When the content area is collapsed, the content is invisible and inaccessible by keyboard or screen reader.

[.example]
--
ifdef::lit[]
[source,typescript]
----
include::{root}/frontend/demo/component/details/details-content.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/details/DetailsContent.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/details/react/details-content.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--



== Theme Variants

Details has three theme variants: `filled`, `small`, and `reverse`. These variants can be combined with each other. For example, all three theme variants can be applied to the same Details component.


=== Filled

The `filled` theme variant makes the component's boundaries visible, which helps tie its content together visually and distinguishes it from the surrounding UI.

[.example]
--
ifdef::lit[]
[source,typescript]
----
include::{root}/frontend/demo/component/details/details-filled.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/details/DetailsFilled.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/details/react/details-filled.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--


=== Small

Use the `small` theme variant for compact UIs.

[.example]
--
ifdef::lit[]
[source,typescript]
----
include::{root}/frontend/demo/component/details/details-small.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/details/DetailsSmall.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/details/react/details-small.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--


=== Reverse

The reverse theme variant places the toggle icon after the summary contents, which can be useful for visually aligning the summary with other content.

[.example]
--

ifdef::lit[]
[source,typescript]
----
include::{root}/frontend/demo/component/details/details-reverse.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/details/DetailsReverse.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]


ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/details/react/details-reverse.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--


=== Disabling

Details can be disabled to prevent them from being expanded or collapsed. Components inside a disabled expanded Details are automatically disabled as well.

[.example]
--

ifdef::lit[]
[source,typescript]
----
include::{root}/frontend/demo/component/details/details-disabled.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/details/DetailsDisabled.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]


ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/details/react/details-disabled.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--



== Best Practices

Use Details to group related content and to reduce the chance of overwhelming the user with information. However, avoid putting important information in a Details component unless it's expanded by default. Otherwise, the user might not notice it.

Details can be used instead of Accordion if there's a need to see content from multiple collapsible content areas, simultaneously.

The expandable and collapsible nature of Details can sometimes be difficult for users to discover. Use the <<filled,filled variant>> and apply a [since:com.vaadin:vaadin@V23.3]##<<../tooltip#,tooltips>>## to make this more discoverable.



== Related Components

[cols="1,2"]
|===
|Component |Usage Recommendation

|<<../accordion#,Accordion>>
|Vertically stacked set of expandable panels, in which only one panel can be expanded at a time.

|<<../tabs#,Tabs>>
|Component for organizing and grouping content into navigable sections.

|===


[discussion-id]`25CA6A07-DDDB-47F3-9E6D-EEAB00498336`
