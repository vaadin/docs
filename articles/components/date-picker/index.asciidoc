---
tab-title: Usage
layout: tabbed-page
title: Date Picker
page-links:
  - 'API: https://cdn.vaadin.com/vaadin-web-components/{moduleNpmVersion:@vaadin/date-picker}/#/elements/vaadin-date-picker[TypeScript] / https://vaadin.com/api/platform/{moduleMavenVersion:com.vaadin:vaadin}/com/vaadin/flow/component/datepicker/DatePicker.html[Java]'
  - 'Source: https://github.com/vaadin/web-components/tree/v{moduleNpmVersion:@vaadin/date-picker}/packages/date-picker[TypeScript] / https://github.com/vaadin/flow-components/tree/{moduleMavenVersion:com.vaadin:vaadin}/vaadin-date-picker-flow-parent[Java]'
---
:tag-name: vaadin-date-picker


= Date Picker

// tag::description[]
Date Picker is an input field that allows the user to enter a date by typing or by selecting from a calendar overlay.
// end::description[]

Try clicking the calendar icon. A calendar overlay appears, showing the current month. Click on a date to select it.

[.example]
--

ifdef::lit[]
[source,html]
----
include::{root}/frontend/demo/component/datepicker/date-picker-basic.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/datepicker/DatePickerBasic.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/datepicker/react/date-picker-basic.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--

The date can be entered directly using the keyboard in the format of the current locale or through the date picker overlay. The overlay opens when the field is clicked or any input is entered when the field is focused.



== Date Format

Date Picker can be configured to display dates and parse user input in a specific format.

ifdef::flow[]
=== Using Java Locales (Java Only)

By default, Date Picker displays and parses dates using the user's locale (<<{articles}/advanced/i18n-localization.asciidoc#locale-selection-for-new-session,reference>>). Alternatively, setting a specific locale ensures that all users consistently see the same format. In the example here, the Date Picker is set to the date format used in Finland.

[.example]
--
[source,typescript]
----
include::{root}/frontend/demo/component/datepicker/date-picker-locale.ts[preimport,hidden]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/datepicker/DatePickerLocale.java[render,tags=snippet,indent=0]
----
--

The date format that's used based on the locale depends on the specific browser implementation and might not be reliable when expecting a specific pattern. For finer control over the date format, see the next section.


=== Using Custom Date Formats (Java Only)

Date Picker allows you to configure a custom date format pattern that defines exactly how dates should be displayed and how user input should be parsed. Additional parsing formats can be provided to support entering dates in different formats. Parsing is first tried with the primary format, then by additional parsing formats in the order that they are provided.

[.example]
--
[source,typescript]
----
include::{root}/frontend/demo/component/datepicker/date-picker-custom-format.ts[preimport,hidden]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/datepicker/DatePickerCustomFormat.java[render,tags=snippet,indent=0]
----
--

A custom date format pattern is a string that consists of specific symbols that specify how and where a part of the date (i.e., day, month, or year) should be displayed. The following symbols are recognized as parts of the date in a pattern:

[cols="1,3"]
|===
| Code | Description

|`d`
|Day of the month, as one or two digits (e.g., 1, 31).

|`dd`
|Day of the month, padded to two digits (e.g., 01, 31).

|`M`
|Month, as one or two digits (e.g., 1, 12).

|`MM`
|Month, padded to two digits (e.g., 01, 12).

|`yy`
|Year, using two digits (e.g., 23).

|`yyyy`
|Year, using four digits (e.g., 2023).
|===

// Allow 'separators'
pass:[<!-- vale Vaadin.Terms = NO -->]

Other characters, such as separators (e.g., `/`, `.`, `-`) or spaces may be used in a pattern.

pass:[<!-- vale Vaadin.Terms = YES -->]

Below are some examples of how you might use these date format codes:

[cols="1,1,3"]
|===
| Pattern | Example Value | Description

|`M/d/yyyy`
|`8/26/2021`
|United States date format.

|`yyyy-MM-dd`
|`2021-08-26`
|ISO 8601 date format.

|`d. M. yyyy`
|`26. 8. 2021`
|Croatian date format using spaces.

|`M/d`
|`8/26`
|Date format using only day and month.
|===

Custom date patterns take precedence over the configured locale. When using both at the same time, the custom date pattern is used to display and parse dates.
endif::[]

=== Two-Digit Year Formats

Date Picker supports date formats with 2-digit years (e.g., `dd.MM.yy`). When parsing a 2-digit year, the component must decide as to which century to parse the year. For example, a year entered as `62` could be interpreted either as 1862, 1962, or 2062.

// Allow YYYY-MM-DD date formats
pass:[<!-- vale Vaadin.RangeFormat = NO -->]

[since:com.vaadin:vaadin@V23.3]#Two-digit years are interpreted as being within a 100-year range whose midpoint is called the _reference date_#. For example, a reference date of 2000-01-01 means that the date entered is interpreted as being within the range 1950-01-01 to 2049-12-31. Given that parameter, the year `50` is parsed to 1950 while `49` is parsed to 2049.

pass:[<!-- vale Vaadin.RangeFormat = YES -->]

The reference date defaults to the current date, but you can set it to a different date with the <<i18n,internationalization API>>:

[.example]
--
ifdef::flow[]
[source,java]
----
DatePicker.DatePickerI18n i18n = new DatePicker.DatePickerI18n();
i18n.setDateFormat("yy-MM-dd");
i18n.setReferenceDate(LocalDate.of(1980, 2, 2));
datePicker.setI18n(i18n);
----
endif::[]

ifdef::lit,react[]
[source,typescript]
----
datePicker.i18n = {
  ...this.datePicker.i18n,
  referenceDate: '1980-02-02'
};
----
endif::[]
--

When using a display format with a 4-digit year, years prior to 1000 are displayed padded with leading zeroes to avoid ambiguity.

[NOTE]
Display formats with 2-digit years should only be used with 2-digit parsing formats. Using a display format with 2-digit years (`yy`), together with parsing formats with 4-digit years (`yyyy`) can cause unexpected behavior, and should be avoided.


=== Using Custom Functions (Client-Side Only)

When using the web component stand-alone, custom functions can be configured to display and parse the date.

[.example]
--
ifdef::lit[]
[source,typescript]
----
include::{root}/frontend/demo/component/datepicker/date-picker-custom-functions.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/datepicker/react/date-picker-custom-functions.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--

The previous example uses the third-party library https://date-fns.org/[date-fns] to implement the custom formatting and parsing functions. It needs to be added as a separate dependency to the project.



== Validation

To validate a date entered or selected, various ways may be used. For instance, you may want to allow only dates in a certain range, or you might not want to allow certain dates. Below are some of your options for date validation.


=== Min & Max Value

The valid input range of Date Picker can be restricted by defining `min` and `max` values. Dates before the `min` and after the `max` are disabled in the overlay. Helper text can be used to inform the user about the accepted range.

[.example]
--

ifdef::lit[]
[source,html]
----
include::{root}/frontend/demo/component/datepicker/date-picker-min-max.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/datepicker/DatePickerMinMax.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/datepicker/react/date-picker-min-max.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--

ifdef::flow,lit[]
=== Custom Validation

Date Picker supports custom validation, such as limiting the options to Monday through Friday. In the following example, select a date that's on a Sunday or a Saturday to see a custom validation message.

[.example]
--

ifdef::lit[]
[source,typescript]
----
include::{root}/frontend/demo/component/datepicker/date-picker-custom-validation.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/datepicker/DatePickerCustomValidation.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/datepicker/react/date-picker-custom-validation.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--
endif::[]

== Week Numbers

pass:[<!-- vale Vaadin.Abbr = NO --> ]

Week numbers (https://www.iso.org/iso-8601-date-and-time-format.html[ISO-8601]) can be enabled in the calendar overlay. This works only when the first day of the week is set to Monday.

pass:[<!-- vale Vaadin.Abbr = YES --> ]

[.example]
--

ifdef::lit[]
[source,typescript]
----
include::{root}/frontend/demo/component/datepicker/date-picker-week-numbers.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/datepicker/DatePickerWeekNumbers.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/datepicker/react/date-picker-week-numbers.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--


== Initial Position

Date Picker's initial position parameter defines which date is focused in the calendar overlay when the overlay is opened. The default, initial position is the selected or current date.

Use this feature to minimize the need for unnecessary navigation or scrolling when the user's input is expected to be within a certain time. In the following example, click the Date Picker to open the calendar overlay and notice that the highlighted, focused date is in the future (i.e., the last day of the year), instead of the current date.

[.example]
--

ifdef::lit[]
[source,html]
----
include::{root}/frontend/demo/component/datepicker/date-picker-initial-position.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/datepicker/DatePickerInitialPosition.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/datepicker/react/date-picker-initial-position.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--


== Auto Open

The overlay automatically opens when the field is focused with a click or a tap, and when typing a value in the input. This can be prevented to have the overlay only open when the toggle button or the up/down arrow keys are pressed. This behavior isn't affected, though, on touch devices.

[.example]
--

ifdef::lit[]
[source,html]
----
include::{root}/frontend/demo/component/datepicker/date-picker-auto-open.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/datepicker/DatePickerAutoOpen.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/datepicker/react/date-picker-auto-open.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--

[[i18n]]
== Internationalization (i18n)

Date Picker allows localizing text and labels, such as month names and button labels.

[.example]
--
ifdef::lit[]
[source,typescript]
----
include::{root}/frontend/demo/component/datepicker/date-picker-internationalization.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/datepicker/DatePickerInternationalization.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/datepicker/react/date-picker-internationalization.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--

See also how to <<#date-format,configure a custom date format>>.


// Basic Features

include::{articles}/components/_input-field-common-features.adoc[tags=basic-intro;label;helper;placeholder;tooltip;clear-button;prefix;aria-labels]

[.example]
--
ifdef::lit[]
[source,typescript]
----
include::{root}/frontend/demo/component/datepicker/date-picker-basic-features.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/datepicker/DatePickerBasicFeatures.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/datepicker/react/date-picker-basic-features.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--


// Readonly and disabled

include::{articles}/components/_input-field-common-features.adoc[tag=readonly-and-disabled]

[.example]
--
ifdef::lit[]
[source,typescript]
----
include::{root}/frontend/demo/component/datepicker/date-picker-readonly-and-disabled.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/datepicker/DatePickerReadonlyAndDisabled.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/datepicker/react/date-picker-readonly-and-disabled.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--


// Style Variants

include::{articles}/components/_input-field-common-features.adoc[tags=styles-intro;text-alignment;small-variant;helper-above-field;borders]

[.example]
--
ifdef::lit[]
[source,typescript]
----
include::{root}/frontend/demo/component/datepicker/date-picker-styles.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/datepicker/DatePickerStyles.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/datepicker/react/date-picker-styles.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--


== Usage Patterns

=== Date Range

You can create a date range picker using the Date Picker twice. Imagine the following example is for an airline ticket booking page. It's asking the user for the date they want to depart and when they want to return. Try it: select a departure date, and then proceed to select a return date. Notice how dates prior to the departure date you chose are now disabled.

[.example]
--

ifdef::lit[]
[source,html]
----
include::{root}/frontend/demo/component/datepicker/date-picker-date-range.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/datepicker/DatePickerDateRange.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/datepicker/react/date-picker-date-range.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--

To disable the days before the start date in the end date picker, you need to handle the selection in the start date picker and change the range in the end date picker.


== Best Practices

=== Picking vs. Typing

The calendar overlay is useful when the user needs to choose a day that's close to the current date or when information such as day of the week, week number, valid dates, and so on can aid in choosing the best option.

For far off dates (i.e., years ago or years from now) and for known dates (i.e., holidays and birthdays), typing the date in the input field can be faster and easier. Because of this, it's important to verify that the user can enter dates according to their locale.

Instead of a Date Picker, you can use individual input fields (i.e., day, month, and year) to improve usability on small touch devices. In the following example, focus the year field and start to type a year. As you enter each digit, notice the list of choices narrows.

[.example]
--

ifdef::lit[]
[source,typescript]
----
include::{root}/frontend/demo/component/datepicker/date-picker-individual-input-fields.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/datepicker/DatePickerIndividualInputFields.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/datepicker/react/date-picker-individual-input-fields.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--

.Not Production-Ready
[NOTE]
The previous example is only a prototype implementation to demonstrate the concept. It isn't ready for production use.


=== Show the Date Format

pass:[<!-- vale Google.DateFormat = NO -->]
pass:[<!-- vale Microsoft.DateOrder = NO -->]

Use a placeholder or helper to show how the input should be formatted. For example, "12/6/2020" represents different dates for Americans and Europeans. For most Americans, it's a date in December. For many Europeans, it's a date in June.

pass:[<!-- vale Microsoft.DateOrder = YES -->]
pass:[<!-- vale Google.DateFormat = YES -->]

[.example]
--

ifdef::lit[]
[source,html]
----
include::{root}/frontend/demo/component/datepicker/date-picker-date-format-indicator.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/datepicker/DatePickerDateFormatIndicator.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/datepicker/react/date-picker-date-format-indicator.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--

Helpers are preferable to placeholders, as they're always visible. Fields with placeholders are also less noticeable than empty fields, so they are susceptible to being skipped. Use placeholders when space is limited, for example when Date Picker is used as a filter in a data grid header.

== Related Components

|===
|Component |Usage Recommendation

|<<../time-picker#,Time Picker>>
|Input field for entering or selecting a specific time.

|<<../date-time-picker#,Date Time Picker>>
|Input field for selecting both a date and a time.
|===


[discussion-id]`26595CB7-1A81-4EE1-B94C-948E889C3027`
