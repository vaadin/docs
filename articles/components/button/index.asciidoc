---
tab-title: Usage
layout: tabbed-page
title: Button
page-links:
  - 'API: https://cdn.vaadin.com/vaadin-web-components/{moduleNpmVersion:@vaadin/button}/#/elements/vaadin-button[TypeScript] / https://vaadin.com/api/platform/{moduleMavenVersion:com.vaadin:vaadin}/com/vaadin/flow/component/button/Button.html[Java]'
  - 'Source: https://github.com/vaadin/web-components/tree/v{moduleNpmVersion:@vaadin/button}/packages/button[TypeScript] / https://github.com/vaadin/flow-components/tree/{moduleMavenVersion:com.vaadin:vaadin}/vaadin-button-flow-parent[Java]'
---


= Button
:toclevels: 2
:experimental:

// tag::description[]
The Button component allows users to perform actions. It comes in several different style variants, and supports icons as well as text labels.
// end::description[]

[.example]
--

ifdef::lit[]
[source,html]
----
include::{root}/frontend/demo/component/button/button-basic.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/button/ButtonBasic.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/button/react/button-basic.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]

--


== Styles

The following variants can be used to distinguish between actions of different importance in the UI:

[.example]
--
ifdef::lit[]
[source,html]
----
include::{root}/frontend/demo/component/button/button-styles.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/button/ButtonStyles.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/button/react/button-styles.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--

[cols="1,3a",grid=rows]
|===
|Variant |Usage Recommendation

|Primary
|This is the most important action in a view or in part of one. It's the main closure or continuation action (e.g., *Save*) in a form or dialog. Avoid presenting the user with more than one at any time.

|Secondary
|This is the default style recommended for most actions. It can be the alternate or negative closure actions (e.g., *Cancel*) in a form or dialog.

|Tertiary
|These are lower-importance actions -- especially in parts of the UI with less space, such as cards, or repeated actions for items in lists, tables, etc. Caution: this can be mistaken for non-interactive text.
|===


=== Danger & Error Variants

This is a style for distinguishing actions related to dangers, warnings, or errors. Dangerous actions would be those that lose or destroy data.

[.example]
--

ifdef::lit[]
[source,html]
----
include::{root}/frontend/demo/component/button/button-error.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/button/ButtonError.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/button/react/button-error.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--

Primary danger buttons should only be used when a dangerous action is the most likely action. An example of this would be the affirmative *Delete* action in a deletion confirmation dialog. Secondary and Tertiary variants can be used for actions related to current errors, such as resolving them or viewing their details.


=== Size Variants

The following size variants are available for Button instances whose size needs to be different from the default:

[.example]
--

ifdef::lit[]
[source,html]
----
include::{root}/frontend/demo/component/button/button-sizes.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/button/ButtonSizes.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/button/react/button-sizes.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]

--

[cols="1,3",grid=rows]
|===
|Variant |Usage Recommendation

|Large
|For important call-to-action buttons -- where more emphasis is needed.

|Normal
|Default size.

|Small
|Compact option for cramped parts of the UI -- where a Tertiary variant isn't deemed appropriate.
|===

.Customize Default Button Size
[TIP]
Size variants should only be used in special cases. See <<{articles}/styling/lumo/lumo-style-properties/size-space#,Size and Space>> for details on how to change the default button size.


=== Miscellaneous Style Variants

The *Tertiary Inline* variant omits all white space around the label. This can be useful for embedding a Button as part of text content or another component. It shouldn't be confused with a link:[Link].
// the link in the line above shouldn't send the user anywhere

[.example]
--

ifdef::lit[]
[source,html]
----
include::{root}/frontend/demo/component/button/button-tertiary-inline.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/button/ButtonTertiaryInline.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/button/react/button-tertiary-inline.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--

The *Success* and *Contrast* variants should provide additional color options for buttons.

[.example]
--

ifdef::lit[]
[source,html]
----
include::{root}/frontend/demo/component/button/button-success.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/button/ButtonSuccess.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/button/react/button-success.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]

--


[.example]
--

ifdef::lit[]
[source,html]
----
include::{root}/frontend/demo/component/button/button-contrast.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/button/ButtonContrast.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/button/react/button-contrast.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]

--

The *Tertiary + Contrast* combination should be avoided because of similarity to non-interactive text elements.

.Customize Default Button Colors
[TIP]
The standard Button colors can be adjusted using <<{articles}/styling/lumo/lumo-style-properties/color#,the Lumo color properties>>. Therefore, these variants shouldn't be used to replace standard buttons only to achieve a different color.



== Buttons with Icons

Buttons can have icons instead of text, or they can have icons along with text.

[.example]
--

ifdef::lit[]
[source,html]
----
include::{root}/frontend/demo/component/button/button-icons.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/button/ButtonIcons.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/button/react/button-icons.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--

Use icons sparingly. Most actions are difficult to represent reliably with icons. The benefit of icons plus text should be weighed against the visual clutter they create.

Icon-only buttons should be used primarily for common recurring actions with highly standardized, universally understood icons (e.g., a cross for *close*), and for actions that are repeated, such as in lists and tables. They should also include a textual alternative for screen readers using the `aria-label` attribute (see the first two buttons in the previous example).

Additionally, [since:com.vaadin:vaadin@V23.3]##<<../tooltip#,tooltips>>## can be added to provide a description of the action that the button triggers (see the [guilabel]*Close* button in the previous example).

.Icon-Only Button Style Variant
[NOTE]
Use the `icon` / `LUMO_ICON` theme variant on icon-only buttons to reduce the white space on either side of the icon. The Flow `Button` component automatically applies the `icon` variant if the icon is the only child of the component.



== Buttons with Images

Images on buttons can be used like icons. See the icon usage recommendations for more information.

[.example]
--

ifdef::lit[]
[source,html]
----
include::{root}/frontend/demo/component/button/button-images.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/button/ButtonImages.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/button/react/button-images.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--


== Disabled

Buttons representing actions that aren't currently available to the user should be either hidden or disabled. A disabled button is rendered as "dimmed", and is excluded from the focus order. This may be useful when you don't want interactive UI elements to receive the focus using the tab key.

[.example]
--

ifdef::lit[]
[source,html]
----
include::{root}/frontend/demo/component/button/button-disabled.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/button/ButtonDisabled.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/button/react/button-disabled.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--


=== Hidden vs. Disabled

Hiding entirely an unavailable action is often preferable to a disabled button, as this reduces UI clutter. However, in certain situations, this can be problematic. If the user expects a button to be present -- such as at the end of a form -- hiding the button can cause confusion, even if the form clearly shows the presence of one or more invalid fields. Also, since a hidden button doesn't occupy any space in the UI, toggling its visibility can cause unwanted changes in the layout of other elements.


=== Show Error on Click

As an alternative to hiding or disabling buttons, configure instead unavailable actions to show an error message when the button is clicked by using a <<../notification/index#,Notification>> or an adjacent inline text element. This approach is the most accessible option, but may be frustrating to users who expect unavailable actions to be distinguished somehow from available actions.


=== Prevent Multiple Clicks

Buttons can be configured to be disabled when clicked. This can be useful especially for actions that take a bit longer to perform. Not only does this avoid the need for special handling of additional clicks while the action is in progress, but it also communicates to the user that the action was received successfully and is being processed.

[.example]
--

ifdef::lit[]
[source,html]
----
include::{root}/frontend/demo/component/button/button-disable-long-action.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/button/ButtonDisableLongAction.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/button/react/button-disable-long-action.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--



== Focus

As with other components, the focus ring is only rendered when the button is focused by keyboard or programmatically.

[.example.render-only]
--

ifdef::lit[]
[source,html]
----
include::{root}/frontend/demo/component/button/button-focus.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/button/react/button-focus.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--

=== Auto Focus

Buttons can receive keyboard focus automatically when the UI in which they appear is rendered.

[.example]
--
ifdef::lit[]
[source,html]
----
<source-info group="TypeScript"></source-info>
<vaadin-button autofocus>Button</vaadin-button>
----
endif::[]

ifdef::flow[]
[source,java]
----
<source-info group="Java"></source-info>
Button button = new Button("Button");
button.setAutofocus(true);
----
endif::[]

ifdef::react[]
[source,html]
----
<source-info group="React"></source-info>
<Button autofocus>Button</Button>
----
endif::[]
--


== Keyboard Usage

A focused button can be triggered with kbd:[Enter] or kbd:[Space].

// === Custom Keyboard Shortcuts

// Buttons can be assigned keyboard shortcuts that are either global -- which work regardless of keyboard focus -- or scoped to a certain component or container.

// Java samples for keyboard shortcuts goes here


== Best Practices

Below are some best practice recommendations related to buttons and their labels.

=== Button Labels

A label should describe the action, preferably using active verbs, such as _"View Details"_ rather than _"Details"_. To avoid ambiguity, also specify the object of the verb, such as _"Save Changes"_ instead of _"Save"_. They also should be brief, ideally less than three words or twenty-five characters.

Button groups representing options, such as the buttons of a <<../confirm-dialog#,Confirm Dialog>>, should state what each option represents (e.g., _"Save Changes"_). Don't label a button _"Yes"_ since that requires the user to read the question being asked. It'll increase the risk of selecting the wrong option.

Use ellipsis (i.e., &hellip;) when an action is not immediate, but requires more steps to complete. This is useful, for example, for destructive actions like _"Delete..."_ when a <<../confirm-dialog#,Confirm Dialog>> is used to confirm the action before it's executed.


=== ARIA Labels

The `aria-label` attribute can be used to provide a separate label for accessibility technologies (AT), such as screen readers. This is important, for example, for icon-only buttons that lack a visible label.

A button with a regular, visible label can also benefit from a separate `aria-label` to provide more context that may otherwise be difficult for an AT user to perceive. In the example here, each button's `aria-label` specifies which email address is removed:

[.example]
--

ifdef::lit[]
[source,html]
----
include::{root}/frontend/demo/component/button/button-labels.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/button/ButtonLabels.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/button/react/button-labels.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--

=== Buttons in Forms

Buttons in forms should be placed below the form with which they're associated. They should be aligned left, with the primary action first, followed by other actions, in order of importance.

[.example]
--

ifdef::lit[]
[source,html]
----
include::{root}/frontend/demo/component/button/button-form.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/button/ButtonForm.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/button/react/button-form.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--


=== Buttons in Dialogs

Buttons in dialogs should be placed at the bottom of the dialog and aligned right. Primary action should be last, preceded by other actions. Dangerous actions should be aligned left, to avoid accidental clicks, especially if no confirmation step is included.

[.example]
--

ifdef::lit[]
[source,html]
----
include::{root}/frontend/demo/component/button/button-dialog.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/button/ButtonDialog.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/button/react/button-dialog.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--


=== Global vs. Selection-Specific Actions

In lists of selectable items -- such as in a <<../grid#,Grid>> -- that provide actions applicable to the selected item, buttons for selection-specific actions should be placed apart from global actions that aren't selection-specific. They should be located below the list of selectable items.

In the example below, the global _Add User_ action is separated from the selection-specific actions below the Grid:

[.example]
--

ifdef::lit[]
[source,html]
----
include::{root}/frontend/demo/component/button/button-grid.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/button/ButtonGrid.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/button/react/button-grid.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--


== Related Components

[cols="1,2"]
|===
|Component |Usage Recommendation

|Anchor
|Use anchor elements instead of buttons for navigation links.

|<<../menu-bar#,Menu Bar>>
|Overlay menus with items that trigger actions. This can also be used for single "menu buttons" and "button groups" without overlay menus.
|===


[discussion-id]`8E1BE28B-D5F0-490C-A8FA-82975D9A3B43`
