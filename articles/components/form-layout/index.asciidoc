---
tab-title: Usage
title: Form Layout
page-links:
  - 'API: https://cdn.vaadin.com/vaadin-web-components/{moduleNpmVersion:@vaadin/form-layout}/#/elements/vaadin-form-layout[TypeScript] / https://vaadin.com/api/platform/{moduleMavenVersion:com.vaadin:vaadin}/com/vaadin/flow/component/formlayout/FormLayout.html[Java]'
  - 'Source: https://github.com/vaadin/web-components/tree/v{moduleNpmVersion:@vaadin/form-layout}/packages/form-layout[TypeScript] / https://github.com/vaadin/flow-components/tree/{moduleMavenVersion:com.vaadin:vaadin}/vaadin-form-layout-flow-parent[Java]'
---

= Form Layout

// tag::description[]
Form Layout allows you to build responsive forms with multiple columns, and to position input labels above or to the side of the input.
// end::description[]

[.example]
--

ifdef::lit[]
[source,typescript]
----
include::{root}/frontend/demo/component/formlayout/form-layout-basic.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/formlayout/FormLayoutBasic.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/formlayout/react/form-layout-basic.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--

== Columns

By default, Form Layout has two columns, meaning it displays two input fields per line. When the layout width is smaller, it adjusts to a single-column.

=== Custom Layout

You can define how many columns Form Layout should use based on the screen width.

[IMPORTANT]
Use the draggable split handle to resize Form Layout's available space and to test its responsiveness.

[.example]
--

ifdef::lit[]
[source,typescript]
----
include::{root}/frontend/demo/component/formlayout/form-layout-custom-layout.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/formlayout/FormLayoutCustomLayout.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/formlayout/react/form-layout-custom-layout.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--

A single-column layout is preferable to a multi-column one. A multi-column layout can be prone to confusion and misinterpretation by the user.

However, related fields can be placed in a line without confusion, typically. Examples of this would be first and last name, address fields such as postal code and city, and ranged input for dates, time, and currency.


=== Column Span

When using a multi-column layout, you can define a `colspan` for each component. The `colspan` determines how many columns a component extends or stretches across.

For example, if you have a Form Layout with three columns and a component's `colspan` is set to 3, it takes up the entire width of the Form Layout.

[.example]
--

ifdef::lit[]
[source,html]
----
include::{root}/frontend/demo/component/formlayout/form-layout-colspan.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/formlayout/FormLayoutColspan.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/formlayout/react/form-layout-colspan.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--

== Label Position

Input fields' built-in labels are positioned above the input. Form Layout supports side-positioned labels, provided they are wrapped in Form Items and the label position is set to `aside`.

The only reason for wrapping labels in Form Items is to put the labels to the side of the input.

=== Top

Users complete forms that have top-positioned labels more quickly because they provide a consistent scanning pattern -- top-down, as opposed to zigzag -- while minimizing the distance between the label and input.

Top-positioned labels are also less prone to causing layout issues due to variable label lengths, which happens usually in multilingual applications.  However, they do result in vertically longer forms. This is why <<#sectioning,sectioning>> is important.

=== Side

Side-positioned labels help reduce a form's total height. This is especially useful for longer forms and when vertical space is limited.

Labels positioned on the side are also often used when there is a need to compare numeric data.

[.example]
--

ifdef::lit[]
[source,html]
----
include::{root}/frontend/demo/component/formlayout/form-layout-side.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/formlayout/FormLayoutSide.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/formlayout/react/form-layout-side.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--

Aim for similar-length labels to keep the distance between the labels and input fields consistent. Inconsistent spacing can slow the user in completing the form.

Forms that use this position require more horizontal space, which isn't always ideal in narrow forms. It's recommended to configure Form Layout to use top-positioned labels when the form has a narrow width.


=== Responsive Label Position

Similar to the number of columns, the label position is configurable based on the width of the layout. For example, you can position the labels to the side when there is ample horizontal space available, and on top for narrower screens.


== Native Input Fields

Form Item allows you to set a label for any type of component that you want to use in a Form Layout. It supports both Vaadin components and native HTML components.

[.example]
--

ifdef::lit[]
[source,html]
----
include::{root}/frontend/demo/component/formlayout/form-layout-native-input.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/formlayout/FormLayoutNativeInput.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/formlayout/react/form-layout-native-input.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--

== Multiple Fields

Form Item only supports placing a single field inside. Where you need to place multiple fields, <<../custom-field#,Custom Field>> should be used as a wrapper:

[.example]
--

ifdef::lit[]
[source,js]
----
include::{root}/frontend/demo/component/formlayout/form-layout-custom-field.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/formlayout/FormLayoutCustomField.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/formlayout/react/form-layout-custom-field.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--

Keeping fields in individual Form Items, however, is preferable. Wrapped fields can be hard to distinguish visually since they usually have no individual label except for a placeholder, which is only visible when the field has no value.

== Best Practices

=== Sectioning

Longer forms should be split into smaller, more manageable and user-friendly sections using sub-headings, <<../tabs#,Tabs>>, <<../details#,Details>> or separate views when possible. Each section should consist of related content and fields.

=== Button Placement

Use the following guidelines for Button placement in forms:

* Buttons should be placed below the form with which they are associated.
* Buttons should be aligned to the left.
* Primary action should be placed first, followed by other actions, in order of importance.

For more information, see the <<../button#,Button documentation>>.


[discussion-id]`7B8E4F98-540C-4622-A39F-907C95E9DFFD`
