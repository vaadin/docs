---
tab-title: Usage
layout: tabbed-page
title: Custom Field
page-links:
  - 'API: https://cdn.vaadin.com/vaadin-web-components/{moduleNpmVersion:@vaadin/custom-field}/#/elements/vaadin-custom-field[TypeScript] / https://vaadin.com/api/platform/{moduleMavenVersion:com.vaadin:vaadin}/com/vaadin/flow/component/customfield/CustomField.html[Java]'
  - 'Source: https://github.com/vaadin/web-components/tree/v{moduleNpmVersion:@vaadin/custom-field}/packages/custom-field[TypeScript] / https://github.com/vaadin/flow-components/tree/{moduleMavenVersion:com.vaadin:vaadin}/vaadin-custom-field-flow-parent[Java]'
---


= Custom Field

:components-path-prefix: ../

// tag::description[]
Custom Field is a component for wrapping multiple components as a single field.
// end::description[]
It provides standard input field features like label, helper, validation, and data binding. Use it to create custom input components.

[.example]
--

ifdef::lit[]
[source,html]
----
include::{root}/frontend/demo/component/custom-field/custom-field-basic.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/customfield/DateRangePicker.java[tags=snippet,indent=0,group=Java]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/customfield/CustomFieldBasic.java[render,tags=snippet,indent=0,group=Java]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/customfield/LocalDateRange.java[tags=snippet,indent=0,group=Java]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/domain/Appointment.java[tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/custom-field/react/custom-field-basic.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--


== Basic Usage

Custom Field is optimized for wrapping the following components:

* <<../text-field#,Text Field>>
* <<../number-field#,Number Filed>>
* <<../password-field#,Password Field>>
* <<../text-area#,Text Area>>
* <<../select#,Select>>
* <<../combo-box#,Combo Box>>
* <<../date-picker#,Date Picker>>
* <<../time-picker#,Time Picker>>

It can also be used to give a label, helper, and other field features for components that don't have them built-in, such as <<../list-box#,List Box>>.

== Value Type & Format

ifdef::flow[]
=== Java

Custom Field is a generic class that requires a value type. The value type can be anything: String, List, a bean, etc.

Implement the `generateModelValue` and `setPresentationValue` methods to define how to build the Custom Field value from the child component values and how to propagate the Custom Field value to the child components, respectively.

The following example shows how to set up value propagation, using a bean as the value type:

[.example]
--

[source, java]
----
class Phone {
    private final String code;
    private final String number;

    public Phone(String code, String number) {
        this.code = code;
        this.number = number;
    }

    public String getCode() {
        return code;
    }

    public String getNumber() {
        return number;
    }
}

class PhoneField extends CustomField<Phone> {
    private final Select code = new Select();
    private final TextField number = new TextField();

    public PhoneField() {
        ...

        add(code, number);
    }

    @Override
    protected String generateModelValue() {
        return new Phone(code.getValue(), number.getValue());
    }

    @Override
    protected void setPresentationValue(Phone value) {
        code.setValue(value.getCode());
        number.setValue(value.getNumber());
    }
}
----
--
endif::[]

ifdef::lit[]
=== TypeScript

Custom Field only supports string values. The default value format is a string concatenation of the child component values, separated by the `\t` character.

You can customize the value format by defining your own value formatter and parser, as shown in the following example:

[.example]
--

[source,typescript]
----
render() {
  return html`
    <!-- Phone Custom Field -->
    <vaadin-custom-field
      .formatValue="${([code, number]: unknown[]) => {
        return code && number ? [code, number].join('|') : '';
      }}"
      .parseValue="${(value: string) => {
        return value ? value.split('|') : ['', ''];
      }}"
    >
      <!-- Country code -->
      <vaadin-select></vaadin-select>

      <!-- Phone number -->
      <vaadin-text-field></vaadin-text-field>
    </vaadin-custom-field>
  `
}
----
--
endif::[]

ifdef::react[]
=== React

Custom Field only supports string values. The default value format is a string concatenation of the child component values, separated by the `\t` character.

You can customize the value format by defining your own value formatter and parser, as shown in the following example:

[.example]
--

[source,tsx]
----
function Example() {
  return (
    // Phone Custom Field
    <CustomField
      formatValue={([code, number]: unknown[]) => (code && number ? [code, number].join('|') : '')}
      parseValue={(value: string) => (value ? value.split('|') : ['', ''])}
    >
      {/* Country code */}
      <Select />

      {/* Phone number */}
      <TextField />
    </CustomField>
  );
}
----
--
endif::[]

== Native Input Fields

Custom Field works with native HTML elements. The `whitespace` variant can be used when components without an outer margin are used within Custom Field to compensate for the missing space between the label and the component itself.

[.example]
--

ifdef::lit[]
[source,html]
----
include::{root}/frontend/demo/component/custom-field/custom-field-native-input.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/customfield/PaymentInformationField.java[tags=snippet,indent=0,group=Java]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/customfield/CustomFieldNativeInput.java[render,tags=snippet,indent=0,group=Java]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/customfield/PaymentInformation.java[tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/custom-field/react/custom-field-native-input.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--


== Size Variants

The small theme variant can be used to make Custom Field's label, helper, and error message smaller. Custom Field doesn't propagate its theme variant to its internal components, meaning each internal component's theme variant must be set individually.

[.example]
--

ifdef::lit[]
[source,html]
----
include::{root}/frontend/demo/component/custom-field/custom-field-size-variants.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/customfield/MoneyField.java[tags=snippet,indent=0,group=Java]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/customfield/CustomFieldSizeVariants.java[render,tags=snippet,indent=0,group=Java]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/customfield/Money.java[tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/custom-field/react/custom-field-size-variants.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--


[discussion-id]`CB7FDF39-7653-4DF0-A0C0-9C2A2EE7EDBA`
