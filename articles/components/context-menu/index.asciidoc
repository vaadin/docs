---
tab-title: Usage
layout: tabbed-page
title: Context Menu
page-links:
  - 'API: https://cdn.vaadin.com/vaadin-web-components/{moduleNpmVersion:@vaadin/context-menu}/#/elements/vaadin-context-menu[TypeScript] / https://vaadin.com/api/platform/{moduleMavenVersion:com.vaadin:vaadin}/com/vaadin/flow/component/contextmenu/ContextMenu.html[Java]'
  - 'Source: https://github.com/vaadin/web-components/tree/v{moduleNpmVersion:@vaadin/context-menu}/packages/context-menu[TypeScript] / https://github.com/vaadin/flow-components/tree/{moduleMavenVersion:com.vaadin:vaadin}/vaadin-context-menu-flow-parent[Java]'
---

= Context Menu

// tag::description[]
Context Menu is a component that you can attach to any component to display a context menu.
// end::description[]
The menu appears on right (default) or left click.
On a touch device, a long press opens the context menu.

// tag::example-instructions[]
[IMPORTANT]
Open the Context Menu by right-clicking (mouse) or long-pressing (touch) a Grid row.
// end::example-instructions[]

[.example]
--

ifdef::lit[]
[source,html]
----
include::{root}/frontend/demo/component/contextmenu/context-menu-basic.ts[render,tag=snippet,indent=0,group=TypeScript]

...

include::{root}/frontend/demo/component/contextmenu/context-menu-basic.ts[render,tag=snippethtml,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/contextmenu/ContextMenuBasic.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/contextmenu/react/context-menu-basic.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--

== Dividers

You can use dividers to separate and group related content.
Use dividers sparingly to avoid creating unnecessary visual clutter.

include::index.asciidoc[tag=example-instructions]

[.example]
--

ifdef::lit[]
[source,typescript]
----
include::{root}/frontend/demo/component/contextmenu/context-menu-dividers.ts[render,tag=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/contextmenu/ContextMenuDividers.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/contextmenu/react/context-menu-dividers.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--

== Checkable Menu Items

Checkable Menu Items can be used to toggle a setting on and off.

[.example]
--

ifdef::lit[]
[source,typescript]
----
include::{root}/frontend/demo/component/contextmenu/context-menu-checkable.ts[render,tag=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/contextmenu/ContextMenuCheckable.java[render,tags=snippet1,indent=0,group=Java]

...

include::{root}/src/main/java/com/vaadin/demo/component/contextmenu/ContextMenuCheckable.java[render,tags=snippet2,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/contextmenu/react/context-menu-checkable.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--

== Hierarchical Menu

Context Menu, like Menu Bar, supports multi-level sub-menus.
You can use a hierarchical menu to organize a large set of options and group related items.

include::index.asciidoc[tag=example-instructions]

[.example]
--

ifdef::lit[]
[source,typescript]
----
include::{root}/frontend/demo/component/contextmenu/context-menu-hierarchical.ts[render,tag=snippet,indent=0,group=TypeScript]

...

include::{root}/frontend/demo/component/contextmenu/context-menu-hierarchical.ts[render,tag=snippethtml,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/contextmenu/ContextMenuHierarchical.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/contextmenu/react/context-menu-hierarchical.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--

== Custom Items

You can customize the items to include more than a single line of text.

include::index.asciidoc[tag=example-instructions]

[.example]
--

ifdef::lit[]
[source,typescript]
----
include::{root}/frontend/demo/component/contextmenu/context-menu-presentation.ts[render,tag=snippet,indent=0,group=TypeScript]

...

include::{root}/frontend/demo/component/contextmenu/context-menu-presentation.ts[render,tag=snippethtml,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/contextmenu/ContextMenuPresentation.java[render,tags=snippet1,indent=0,group=Java]
include::{root}/src/main/java/com/vaadin/demo/component/contextmenu/ContextMenuPresentation.java[render,tags=snippet2,indent=0,group=Java]

...

include::{root}/src/main/java/com/vaadin/demo/component/contextmenu/ContextMenuPresentation.java[render,tags=snippet3,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/contextmenu/react/context-menu-presentation.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--

== Disabled Menu Items

You can disable menu items to show that they are unavailable.

include::index.asciidoc[tag=example-instructions]

[.example]
--

ifdef::lit[]
[source,typescript]
----
include::{root}/frontend/demo/component/contextmenu/context-menu-disabled.ts[render,tag=snippet,indent=0,group=TypeScript]

...

include::{root}/frontend/demo/component/contextmenu/context-menu-disabled.ts[render,tag=snippethtml,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/contextmenu/ContextMenuDisabled.java[render,tags=snippet1,indent=0,group=Java]

include::{root}/src/main/java/com/vaadin/demo/component/contextmenu/ContextMenuDisabled.java[render,tags=snippet2,indent=0,group=Java]

include::{root}/src/main/java/com/vaadin/demo/component/contextmenu/ContextMenuDisabled.java[render,tags=snippet3,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/contextmenu/react/context-menu-disabled.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--

== Left-Click

You can use left-click to open Context Menu in situations where left-click doesn't have any other function, for example a Grid without selection support.

[IMPORTANT]
Open the Context Menu by clicking a Grid row.

[.example]
--

ifdef::lit[]
[source,typescript]
----
include::{root}/frontend/demo/component/contextmenu/context-menu-left-click.ts[render,tag=snippet,indent=0,group=TypeScript]

...

include::{root}/frontend/demo/component/contextmenu/context-menu-left-click.ts[render,tag=snippethtml,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/contextmenu/ContextMenuLeftClick.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/contextmenu/react/context-menu-left-click.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--

== Best Practices

Context Menu is used to provide shortcuts to the user.
You shouldn't use it as the only or primary means to complete a task.
The primary way should be accessible elsewhere in the UI.

[IMPORTANT]
Open the Context Menu by right-clicking (desktop) or long-pressing (mobile) a Grid row, or use the Menu Bar in the last column.

[.example]
--

ifdef::lit[]
[source,typescript]
----
include::{root}/frontend/demo/component/contextmenu/context-menu-best-practices.ts[render,tag=snippet,indent=0,group=TypeScript]

...

include::{root}/frontend/demo/component/contextmenu/context-menu-best-practices.ts[render,tag=snippethtml,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/contextmenu/ContextMenuBestPractices.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]

ifdef::react[]
[source,tsx]
----
include::{root}/frontend/demo/component/contextmenu/react/context-menu-best-practices.tsx[render,tags=snippet,indent=0,group=React]
----
endif::[]
--

=== Context Menu vs Menu Bar

You should use Context Menu when there is no dedicated button for opening an overlay menu, such as right-clicking a grid row.
When there is a dedicated element/component, such as an <<../menu-bar#,overflow menu>>, use Menu Bar.

=== Icons

Use icons when applicable to help improve recognition.
It's recommended to use commonly recognized icons to avoid confusion.
Use icons consistently throughout a list of options.

=== Labelling

Suffix a menu item with “...” when the associated action won't be executed, but instead reveal some UI, like a dialog, for completing the action.


== Related Components

|===
|Component |Usage recommendations

|<<../menu-bar#,Menu Bar>>
|Component for displaying a horizontal menu with multi-level sub-menus.

|===


[discussion-id]`760AB528-B02C-4B6C-BB27-D7EFEDAE706E`
