---
title: Spreadsheet
page-links:
  - 'API: https://vaadin.com/api/platform/{moduleMavenVersion:com.vaadin:vaadin}/com/vaadin/flow/component/spreadsheet/Spreadsheet.html[Java]'
  - 'Source: https://github.com/vaadin/flow-components/tree/{moduleMavenVersion:com.vaadin:vaadin}/vaadin-spreadsheet-flow-parent[Java]'
section-nav: commercial
---
= Spreadsheet

// Allow XLS, XLSX, and POI abbreviations
pass:[<!-- vale Vaadin.Abbr = NO -->]

:commercial-feature: Spreadsheet
include::{articles}/_commercial-banner.asciidoc[opts=optional]

// tag::description[]
Vaadin Spreadsheet is a component which allows displaying and interacting with the contents of an Excel file.
// end::description[]
You can directly modify cell data in an active worksheet by entering textual and numerical values, as well as using Excel formulas for spreadsheet calculations.

Vaadin Spreadsheet supports Excel XLSX files and has limited support for XLS files. In large spreadsheets, cell data is loaded on demand from the server, which allows the component to handle large files without performance issues.

Cell data can be copied and pasted between a spreadsheet and the clipboard. The clipboard can also be used to copy and paste data between Vaadin Spreadsheet and other spreadsheet applications, such as Microsoft Excel or Google Sheets.

[NOTE]
Vaadin Spreadsheet is a Flow only component, and is not available for Hilla applications.

[.example]
--
[source,typescript]
----
include::{root}/frontend/demo/component/spreadsheet/spreadsheet-imports.ts[preimport,hidden]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/spreadsheet/SpreadsheetBasic.java[render,tags=snippet,indent=0,group=Java]
----
--

[[spreadsheet.installing.maven]]
== Maven Dependency

Install Spreadsheet by adding the dependency to the project (here as a Maven dependency in [filename]`pom.xml`):

[source,xml]
----
<dependency>
    <groupId>com.vaadin</groupId>
    <artifactId>vaadin-spreadsheet-flow</artifactId>
</dependency>
----

== Loading XLSX

To open an existing Excel file in Vaadin Spreadsheet, you need to pass an Excel file to the [classname]#Spreadsheet# constructor. You can load an Excel file from the local filesystem with a [classname]#File# reference or from memory or other sources with an [classname]#InputStream#.

[.example]
--
[source,typescript]
----
include::{root}/frontend/demo/component/spreadsheet/spreadsheet-imports.ts[preimport,hidden]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/spreadsheet/SpreadsheetLoading.java[render,tags=snippet,indent=0,group=Java]
----
--

== Add and Delete Sheets

A "spreadsheet" actually works on a __workbook__, which contains one or more __worksheets__. You can create new sheets and delete existing ones with [methodname]#createNewSheet()# and [methodname]#deleteSheet()#, respectively.

When a sheet is deleted, the index of the sheets with a higher index is decremented by one. When the active worksheet is deleted, the next one by index is set as active or, if there are none, the previous one.

All operations on the spreadsheet content are processed through the currently active worksheet. You can set an existing sheet as active with [methodname]#setActiveSheetIndex()#.

== Toggling Features

The [classname]#Spreadsheet# object provides the following configuration of various UI elements:

[cols="1,4"]
|===
| Element | Description

|Grid lines
|Cells are by default separated by grid lines. You can control their visibility with `setGridlinesVisible()`.

|Column and row headings
|Rows and columns headings display the row and column indexes, and allow selecting and resizing the rows and columns.
You can control their visibility with `setRowColHeadingsVisible()`.

|Top bar
|The top bar displays the address of the currently selected cell and an editor for cell content.
You can control its visibility with `setFunctionBarVisible()`.

|Bottom bar
|The bottom bar displays sheet names and buttons for navigating between them.
You can control its visibility with `setSheetSelectionBarVisible()`.

|===

== Frozen Panes

You can define panes of rows and columns that are frozen when scrolling. You can create the pane for the current worksheet with [methodname]#createFreezePane()#, which takes the number of frozen rows and columns as parameters.

[.example]
--
[source,typescript]
----
include::{root}/frontend/demo/component/spreadsheet/spreadsheet-imports.ts[preimport,hidden]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/spreadsheet/SpreadsheetFrozenPanes.java[render,tags=snippet,indent=0,group=Java]
----
--

== Configuring Cells

=== Formulas

You can use Excel formulas in the cells of the spreadsheet. The formulas are evaluated on the server, and the result is displayed in the cell.

=== Format

Formatting cell values can be accomplished by using cell styles. A cell style must be created in the workbook by using [methodname]#createCellStyle()#. Cell data format is set for the style with [methodname]#setDataFormat()#.

[.example]
--
[source,typescript]
----
include::{root}/frontend/demo/component/spreadsheet/spreadsheet-imports.ts[preimport,hidden]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/spreadsheet/SpreadsheetFormat.java[render,tags=snippet,indent=0,group=Java]
----
--

=== Conditional Formatting

Applying conditional formatting to cells can help in highlighting patterns in the data. The formatting is applied to the cells that match the specified condition. The condition can be based on the value of the cell, or on the value of another cell.

=== Fonts

Cells can be styled by different fonts. A font definition not only includes a particular typeface, but also weight (bold or normal), emphasis, underlining, and other such font attributes.

A font definition is managed by [classname]#Font# class in the Apache POI API. A new font can be created with [methodname]#createFont()# in the workbook.

[.example]
--
[source,typescript]
----
include::{root}/frontend/demo/component/spreadsheet/spreadsheet-imports.ts[preimport,hidden]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/spreadsheet/SpreadsheetFonts.java[render,tags=snippet,indent=0,group=Java]
----
--

=== Comments

Cells may include comments, which are shown when mouse is hovered on the cells. They're are indicated by ticks in the corner of the cells. The [classname]#SpreadsheetDefaultActionHandler# enables adding comments from the context menu.

A new comment can be added through the POI API of a cell, with [methodname]#addComment()#. For a detailed example on managing cell comments, we refer to the [classname]#InsertDeleteCellCommentAction# and [classname]#EditCellCommentAction# classes employed by the default action handler.

[.example]
--
[source,typescript]
----
include::{root}/frontend/demo/component/spreadsheet/spreadsheet-imports.ts[preimport,hidden]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/spreadsheet/SpreadsheetComments.java[render,tags=snippet,indent=0,group=Java]
----
--

=== Merging Cells

You can merge spreadsheet cells with any variant of the [methodname]#addMergedRegion()# method in [classname]#Spreadsheet#.
The [classname]#SpreadsheetDefaultActionHandler# enables merging selected cells from the context menu.

Merged cells can be unmerged with [methodname]#removeMergedRegion()#. This method takes a region index as its parameter. You can search for a particular region through the POI [classname]#Sheet# API for the active sheet, which you can obtain with [methodname]#getActiveSheet()#.

The [methodname]#getMergedRegion()# returns a merged region by index. You can iterate through them by knowing the number of regions, which you can find with [methodname]#getNumMergedRegions()#.

=== Hyperlinks

Hyperlinks in cells can point to other worksheets in the current workbook -- or to external URLs. Links must be added through the POI API.

Vaadin Spreadsheet provides default handling for hyperlink clicks. These can be overridden with a custom [interfacename]#HyperlinkCellClickHandler#, which you assign with [methodname]#setHyperlinkCellClickHandler()#.

=== Pop-up Buttons

You can add a pop-up button in a cell, which will open a drop-down pop-up overlay when clicked. The overlay can contain any Vaadin components. You can add a pop-up button with any of the [methodname]#setPopup()# methods for different cell addressing forms.

You can create pop-up buttons for a row of cells in a cell range by defining a __table__, as described in <<#tables-filters,"Tables & Filters">>.

== Grouping

Multiple columns or multiple rows can be grouped together in a sheet. A grouping is indicated by a line with a collapse / expand button in the column or row heading. Rows and columns that are part of a group can be hidden or shown by clicking the button.

[.example]
--
[source,typescript]
----
include::{root}/frontend/demo/component/spreadsheet/spreadsheet-imports.ts[preimport,hidden]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/spreadsheet/SpreadsheetGrouping.java[render,tags=snippet,indent=0,group=Java]
----
--

== Tables & Filters

A cell range in a worksheet can be configured as a __table__, which adds pop-up menu buttons in the header row of the range. The pop-up menus contain Vaadin components, which you can use to implement various functionalities in the table, such as sorting or filtering. Vaadin Spreadsheet does not include any implementations of such features, merely the UI elements to enable them.

Such a table is defined by a [classname]#SpreadsheetTable# or a [classname]#SpreadsheetFilterTable# added to the spreadsheet.

[classname]#SpreadsheetFilterTable# is a spreadsheet table that allows filtering of the rows in the table in the pop-up menus. The menu is filled with checkboxes for each unique value in the column. Deselecting the items causes hiding the respective rows in the spreadsheet.

[.example]
--
[source,typescript]
----
include::{root}/frontend/demo/component/spreadsheet/spreadsheet-imports.ts[preimport,hidden]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/spreadsheet/SpreadsheetFiltering.java[render,tags=snippet,indent=0,group=Java]
----
--

== Report Mode

In the report mode, both the top and bottom bars are hidden. You can enable the report mode with [methodname]#setReportStyle()#.

[.example]
--
[source,typescript]
----
include::{root}/frontend/demo/component/spreadsheet/spreadsheet-imports.ts[preimport,hidden]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/spreadsheet/SpreadsheetReportMode.java[render,tags=snippet,indent=0,group=Java]
----
--

== Charts Within Spreadsheets

Vaadin Spreadsheet supports Vaadin Charts, making it possible to open Excel files with charts in them. Spreadsheet depends on Vaadin Charts so there is no need to add the Charts dependency in addition to the Spreadsheet dependency.

The Vaadin Spreadsheet Charts integration package does not allow editing the chart. To change chart parameters such as type, categories, or legend inside the spreadsheet, you need to edit the original Excel file.

Vaadin Charts integration allows changing the values of the data points in a chart. However, it does not allow changing the range of cells that are used for rendering the chart.

Changing the position of charts within a spreadsheet is not supported.

Vaadin charts are shown in the spreadsheet by default. You can disable showing them by using `spreadsheet.setChartsEnabled(false)`.

[.example]
--
[source,typescript]
----
include::{root}/frontend/demo/component/spreadsheet/spreadsheet-imports.ts[preimport,hidden]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/spreadsheet/SpreadsheetCharts.java[render,tags=snippet,indent=0,group=Java]
----
--

== Limitations
* No provided toolbars, menus, or other controls for formatting cells.
* Limited support for the older XSL format.
* Limitations of Apache POI.
* Using a table as a named range in formulas is not supported.
As a workaround, you can manually convert tables to ranges. Open the spreadsheet in Excel, right-click on the table, select the Convert to Range action, and then save the spreadsheet.
* The SUBTOTAL formula is limited to aggregate functions that do not ignore hidden values (i.e., function codes from 1 to 7, as well as 9) because they're not implemented in Apache POI.
* Strict OOXML format is not supported by Apache POI.
* No support for theming the component the same way as other Vaadin components.
* Material & Lumo themes are not implemented.
* Right-to-left languages aren't supported.
* Limited support for accessibility.

== Missing Features Compared to Vaadin 8 Version

The following features are not yet implemented in the Flow version of Vaadin Spreadsheet:

* Support for custom components.
* Icons for custom context menu actions.

[discussion-id]`bdde9d2b-4df8-4400-bba2-2b1c701fdab9`
