---
tab-title: Usage
layout: tabbed-page
title: Tooltip
page-links:
  - 'API: https://cdn.vaadin.com/vaadin-web-components/{moduleNpmVersion:tooltip}/#/elements/vaadin-tooltip[TypeScript] / https://vaadin.com/api/platform/{moduleMavenVersion:com.vaadin:vaadin}/com/vaadin/flow/component/shared/HasTooltip.html[Java]'
  - 'Source: https://github.com/vaadin/web-components/tree/v{moduleNpmVersion:@vaadin/tooltip}/packages/tooltip[TypeScript] / https://github.com/vaadin/flow-components/blob/{moduleMavenVersion:com.vaadin:vaadin}/vaadin-flow-components-shared-parent/vaadin-flow-components-base/src/main/java/com/vaadin/flow/component/shared/HasTooltip.java[Java]'
---


= [since:com.vaadin:vaadin@V23.3]#Tooltip#

// tag::description[]
Tooltips are small pop-ups that can provide additional information about a UI element on hover and keyboard focus.
// end::description[]

[.example]
--
ifdef::lit[]
[source,html]
----
include::{root}/frontend/demo/component/tooltip/tooltip-basic.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/tooltip/TooltipBasic.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]
--

Tooltips only support plain text content. They aren't focusable and can't contain interactive elements.



== Other UI Elements

Tooltips can be displayed for UI elements that lack a dedicated tooltip API. Proper accessibility, however, for these can't be guaranteed.

[.example]
--
ifdef::lit[]
[source,html]
----
include::{root}/frontend/demo/component/tooltip/tooltip-html-element.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/tooltip/TooltipHtmlElement.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]
--

The <<../grid#tooltips,Grid>> and <<../menu-bar#tooltips,Menu Bar>> components have dedicated APIs for configuring tooltips.



== Positioning

The default positioning of the tooltip in relation to the target element can be overridden. This can be useful for optimizing where the tooltip is rendered, to avoid overlaying other important UI elements, or for purely aesthetic reasons.

[.example]
--
ifdef::lit[]
[source,html]
----
include::{root}/frontend/demo/component/tooltip/tooltip-positioning.ts[render,frame,tags=snippet,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/tooltip/TooltipPositioning.java[render,frame,tags=snippet,indent=0,group=Java]
----
endif::[]
--

The distance between the tooltip and the target element can also be customized by setting the following CSS properties on the tooltip:

- `--vaadin-tooltip-offset-top`
- `--vaadin-tooltip-offset-bottom`
- `--vaadin-tooltip-offset-start`
- `--vaadin-tooltip-offset-end`



== Configuring Delays

The delay before tooltips appear can be configured separately for hover and keyboard focus. The delay before tooltips disappear -- when the pointer leaves the target element -- can also be configured separately. On blur, though, the tooltip is closed immediately to avoid confusion when focusing another element.

[.example.show-code]
--
[source,java]
----
import com.vaadin.flow.component.shared.TooltipConfiguration;

// Global delay configuration:
TooltipConfiguration.setDefaultFocusDelay(2000);
TooltipConfiguration.setDefaultHoverDelay(1000);
TooltipConfiguration.setDefaultHideDelay(1000);

// Overriding delays for a particular component’s tooltip:
button.setTooltipText("Home").withHoverDelay(500);
----

[source,typescript]
----
import { Tooltip } from '@vaadin/tooltip';

// Global delay configuration:
Tooltip.setDefaultFocusDelay(2000);
Tooltip.setDefaultHoverDelay(1000);
Tooltip.setDefaultHideDelay(1000);

// Overriding delays for a particular component’s tooltip:
<vaadin-button>
  Click me
  <vaadin-tooltip .hoverDelay=${500} slot="tooltip" text="Home"></vaadin-tooltip>
</vaadin-button>
----
--



== Triggering Manually

Tooltips can be configured not to appear automatically on hover or keyboard focus, but instead be programmatically triggered only. This can be used to create so-called, _toggletips_ -- tooltips that can be manually displayed and hidden by the user.

[.example]
--
ifdef::lit[]
[source,html]
----
include::{root}/frontend/demo/component/tooltip/tooltip-manual.ts[render,tags=snippet,indent=0,group=TypeScript]
----
endif::[]

ifdef::flow[]
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/tooltip/TooltipManual.java[render,tags=snippet,indent=0,group=Java]
----
endif::[]
--



== Accessibility

Tooltips are semantically associated with their target elements using the link:https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-describedby[`aria-describedby`] attribute, and are announced by screen readers when the element gains keyboard focus.

However, tooltips on elements without dedicated tooltip APIs can't be guaranteed to be announced correctly. This is because the announcement of `aria-describedby` attributes depends on the HTML element's type and the `role` attribute. It also varies between different screen readers. Testing with screen readers is useful to ensure the accessibility of tooltips on these elements.

The tooltip feature currently doesn't support triggering via long press on touch-screen devices.

Keep in mind that Vaadin components and other UI elements don't, by default, imply the presence of tooltips in any way. This might make them difficult for users to discover.

In general, visible labels are always preferable to tooltips. A separately defined invisible link:https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-label[`aria-label`] attribute usually provides better accessibility than a tooltip.


== Best Practices

Tooltips should be used only to provide additional information, not for mission-critical information. They're not a replacement for visible labels on input fields.

On input field components, tooltips should be considered a last resort if neither the label -- not the helper -- nor the placeholder text can be used to provide the necessary information.

++++
<style>
/* Ensure positioning example fits all the icons */
.code-example iframe {
  min-height: 200px;
}
</style>
++++
