---
title: Chart Configuration
order: 5
layout: page
---

[[charts.configuration]]
= Chart Configuration

All the chart content configuration of charts is defined in a __chart model__ in
a [classname]`Configuration` object. You can access the model with the
[methodname]`getConfiguration()` method.

The configuration properties in the [classname]`Configuration` class are
summarized in the following:

* [methodname]`credits`: [classname]`Credits` (text, position, href, enabled)

* [methodname]`labels`: [classname]`HTMLLabels` (html, style)

* [methodname]`legend`: [classname]`Legend` (see <<charts.configuration.legend>>)

* [methodname]`pane`: [classname]`Pane`

* [methodname]`plotoptions`: [classname]`PlotOptions` (see
<<charts.configuration.plotoptions>>)

* [methodname]`series`: [interfacename]`Series`

* [methodname]`subtitle`: [classname]`Subtitle`

* [methodname]`title`: [classname]`Title`

* [methodname]`tooltip`: [classname]`Tooltip`

* [methodname]`xAxis`: [classname]`XAxis` (see <<charts.configuration.axes>>)

* [methodname]`yAxis`: [classname]`YAxis` (see <<charts.configuration.axes>>)


For data configuration, see <<data#charts.data,"Chart Data">>.
For styling, see <<css-styling#charts.styling,"Chart Styling">>.

[[charts.configuration.plotoptions]]
== Plot Options

Plot options are used to configure the data series in a chart.
They control how series are displayed (color, border, opacity, ...), and how they behave (stacking, grouping, tooltips, ...).

Plot options can be set for the entire chart, or for individual data series, using [methodname]`setPlotOptions()`.
When the plot options are set for the entire chart, they are applied to all the series in the chart.
For the Chart itself, multiple plot options can be added using [methodname]`addPlotOptions()`.

For example, to disable animations for all series, the plot options are set for the chart:

[source,java]
----
Chart chart = new Chart();
Configuration configuration = chart.getConfiguration();
PlotOptionsSeries plotOptions = new PlotOptionsSeries();
plotOptions.setAnimation(false);
configuration.setPlotOptions(plotOptions);
----

Alternatively, to disable animations for a specific series:

[source,java]
----
ListSeries series = new ListSeries(50, 60, 70, 80);
PlotOptionsSeries plotOptions = new PlotOptionsSeries();
plotOptions.setAnimation(false);
series.setPlotOptions(plotOptions);
----

The general [classname]`PlotOptionsSeries` class can be used to apply common options that are valid for all types of charts.
To apply options that are specific to a certain type of chart, for example an area chart, specific options classes, such as [classname]`PlotOptionsArea`, can be used.
Setting a specific options class for a series makes that series render as that type of chart.
For example, setting a [classname]`PlotOptionsLine` on a series makes that series render as a line chart, setting a [classname]`PlotOptionsSpine` renders the series as a spline chart, and so on.
This allows to create <<basic-use#charts.basic-use.mixed, mixed type charts>>.

The following table gives an overview of the available types of plot options classes, and their common base classes:

[cols="1,4"]
|===
| Base class | Sub-classes

.4+| https://vaadin.com/api/platform/{moduleMavenVersion:com.vaadin:vaadin}/com/vaadin/flow/component/charts/model/AreaOptions.html[AreaOptions]
| https://vaadin.com/api/platform/{moduleMavenVersion:com.vaadin:vaadin}/com/vaadin/flow/component/charts/model/PlotOptionsArea.html[PlotOptionsArea]
| https://vaadin.com/api/platform/{moduleMavenVersion:com.vaadin:vaadin}/com/vaadin/flow/component/charts/model/PlotOptionsArearange.html[PlotOptionsArearange]
| https://vaadin.com/api/platform/{moduleMavenVersion:com.vaadin:vaadin}/com/vaadin/flow/component/charts/model/PlotOptionsAreaspline.html[PlotOptionsAreaspline]
| https://vaadin.com/api/platform/{moduleMavenVersion:com.vaadin:vaadin}/com/vaadin/flow/component/charts/model/PlotOptionsAreasplinerange.html[PlotOptionsAreasplinerange]

.3+| https://vaadin.com/api/platform/{moduleMavenVersion:com.vaadin:vaadin}/com/vaadin/flow/component/charts/model/ColumnOptions.html[ColumnOptions]
| https://vaadin.com/api/platform/{moduleMavenVersion:com.vaadin:vaadin}/com/vaadin/flow/component/charts/model/PlotOptionsBar.html[PlotOptionsBar]
| https://vaadin.com/api/platform/{moduleMavenVersion:com.vaadin:vaadin}/com/vaadin/flow/component/charts/model/PlotOptionsColumn.html[PlotOptionsColumn]
| https://vaadin.com/api/platform/{moduleMavenVersion:com.vaadin:vaadin}/com/vaadin/flow/component/charts/model/PlotOptionsColumnrange.html[PlotOptionsColumnrange]

.2+| https://vaadin.com/api/platform/{moduleMavenVersion:com.vaadin:vaadin}/com/vaadin/flow/component/charts/model/GaugeOptions.html[GaugeOptions]
| https://vaadin.com/api/platform/{moduleMavenVersion:com.vaadin:vaadin}/com/vaadin/flow/component/charts/model/PlotOptionsGauge.html[PlotOptionsGauge]
| https://vaadin.com/api/platform/{moduleMavenVersion:com.vaadin:vaadin}/com/vaadin/flow/component/charts/model/PlotOptionsSolidgauge.html[PlotOptionsSolidgauge]

.3+| https://vaadin.com/api/platform/{moduleMavenVersion:com.vaadin:vaadin}/com/vaadin/flow/component/charts/model/PointOptions.html[PointOptions]
| https://vaadin.com/api/platform/{moduleMavenVersion:com.vaadin:vaadin}/com/vaadin/flow/component/charts/model/PlotOptionsLine.html[PlotOptionsLine]
| https://vaadin.com/api/platform/{moduleMavenVersion:com.vaadin:vaadin}/com/vaadin/flow/component/charts/model/PlotOptionsSpline.html[PlotOptionsSpline]
| https://vaadin.com/api/platform/{moduleMavenVersion:com.vaadin:vaadin}/com/vaadin/flow/component/charts/model/PlotOptionsScatter.html[PlotOptionsScatter]

.2+| https://vaadin.com/api/platform/{moduleMavenVersion:com.vaadin:vaadin}/com/vaadin/flow/component/charts/model/PyramidOptions.html[PyramidOptions]
| https://vaadin.com/api/platform/{moduleMavenVersion:com.vaadin:vaadin}/com/vaadin/flow/component/charts/model/PlotOptionsPyramid.html[PlotOptionsPyramid]
| https://vaadin.com/api/platform/{moduleMavenVersion:com.vaadin:vaadin}/com/vaadin/flow/component/charts/model/PlotOptionsFunnel.html[PlotOptionsFunnel]

.2+| https://vaadin.com/api/platform/{moduleMavenVersion:com.vaadin:vaadin}/com/vaadin/flow/component/charts/model/OhlcOptions.html[OhlcOptions]
| https://vaadin.com/api/platform/{moduleMavenVersion:com.vaadin:vaadin}/com/vaadin/flow/component/charts/model/PlotOptionsOhlc.html[PlotOptionsOhlc]
| https://vaadin.com/api/platform/{moduleMavenVersion:com.vaadin:vaadin}/com/vaadin/flow/component/charts/model/PlotOptionsCandlestick.html[PlotOptionsCandlestick]

|===

NOTE: GaugeOptions should not be combined with other plot options.

NOTE: Gauge and solid gauge series should not be combined with series of other types.

NOTE: A bar series inverts the entire chart; combine with care.

Common options for specific types of charts are extracted into base classes, which allows defining options for a range of chart types.
For example, to set the same [propertyname]`lineWidth` for [classname]`PlotOptionsLine` and [classname]`PlotOptionsSpline`, the common [classname]`PointOptions` base class can be used:
[source,java]
----
private void setCommonProperties(PointOptions options) {
    options.setLineWidth(5);
    options.setAnimation(false);
}
...
PlotOptionsSpline splineOptions = new PlotOptionsSpline();
PlotOptionsLine lineOptions = new PlotOptionsLine();
setCommonProperties(lineOptions);
setCommonProperties(splineOptions);
configuration.setPlotOptions(lineOptions, splineOptions);
----

See the API documentation of the individual plot options classes for more information about chart-specific options.

=== Practical Examples

.Dynamically setting the color of a series
[source,java]
----
ListSeries series = new ListSeries("Tokyo", 49.9, 71.5, 106.4);

PlotOptionsSeries options = new PlotOptionsSeries();
options.setColor(SolidColor.CORNFLOWERBLUE);
series.setPlotOptions(options);
----

.Custom series tooltip as Javascript function
[source,java]
----
ListSeries series = new ListSeries("Tokyo", 49.9, 71.5, 106.4);

SeriesTooltip seriesTooltip = new SeriesTooltip();
seriesTooltip.setPointFormatter("function() { return this.x + ' kmÂ²' }");

PlotOptionsSeries options = new PlotOptionsSeries();
options.setTooltip(seriesTooltip);
series.setPlotOptions(options);

// Tooltip element needs to be configured on chart
chart.setTooltip(new Toolip());
----

[[charts.configuration.axes]]
== Axes

Different chart types may have one, two, or three axes; in addition to X and Y
axes, some chart types may have a color axis. These are represented by
[classname]`XAxis`, [classname]`YAxis`, and [classname]`ColorAxis`,
respectively. The X axis is usually horizontal, representing the iteration over
the data series, and Y vertical, representing the values in the data series.
Some chart types invert the axes and they can be explicitly inverted with
[methodname]`getChart().setInverted()` in the chart configuration. An axis has a
caption and tick marks at intervals indicating either numeric values or symbolic
categories. Some chart types, such as gauge, have only Y-axis, which is circular
in the gauge, and some such as a pie chart have none.

The basic elements of X and Y axes are illustrated in
<<figure.charts.configuration.axes.elements>>.

[[figure.charts.configuration.axes.elements]]
.Chart Axis Elements
image::img/charts-axes-lo.png[]

Axis objects are created and added to the configuration object with
[methodname]`addxAxis()` and [methodname]`addyAxis()`.

[source,java]
----
XAxis xaxis = new XAxis();
xaxis.setTitle("Axis title");
conf.addxAxis(xaxis);
----

A chart can have more than one Y-axis, usually when different series displayed
in a graph have different units or scales. The association of a data series with
an axis is done in the data series object with [methodname]`setyAxis()`.

For a complete reference of the many configuration parameters for the axes,
please refer to the JavaDoc API documentation of Charts.

[[charts.configuration.axes.type]]
=== Axis Type

Axes can be one of the following types, which you can set with
[methodname]`setType()`. The axis types are enumerated under
[classname]`AxisType`. [parameter]#LINEAR# is the default.

[parameter]#LINEAR# (default):: For numeric values in linear scale.
[parameter]#LOGARITHMIC#:: For numerical values, as in the linear axis, but the axis will be scaled in the logarithmic scale. The minimum for the axis __must__ be a positive non-zero value ( [methodname]`log(0)` is not defined, as it has limit at negative infinity when the parameter approaches zero).
[parameter]#DATETIME#:: Enables date/time mode in the axis. The date/time values are expected to be given either as a [classname]`Date` object or in milliseconds since the Java (or Unix) date epoch on January 1st 1970 at 00:00:00 GMT. You can get the millisecond representation of Java [classname]`Date` with [methodname]`getTime()`.
[parameter]#CATEGORY#:: Enables using categorical data for the axis, as described in more detail later. With this axis type, the category labels are determined from the labels of the data points in the data series, without need to set them explicitly with [methodname]`setCategories()`.



[[charts.configuration.axes.categories]]
=== Categories

The axes display, in most chart types, tick marks and labels at some numeric
interval by default. If the items in a data series have a symbolic meaning
rather than numeric, you can associate __categories__ with the data items. The
category label is displayed between two axis tick marks and aligned with the
data point. In certain charts, such as column chart, where the corresponding
values in different data series are grouped under the same category. You can set
the category labels with [methodname]`setCategories()`, which takes the
categories as (an ellipsis) parameter list, or as an iterable. The list should
match the items in the data series.

[source,java]
----
XAxis xaxis = new XAxis();
xaxis.setCategories("Mercury", "Venus", "Earth",
                    "Mars", "Jupiter", "Saturn",
                    "Uranus", "Neptune");
----

You can only set the category labels from the data point labels by setting the
axis type to [parameter]#CATEGORY#, as described earlier.


[[charts.configuration.axes.labels]]
=== Labels

The axes display, in most chart types, tick marks and labels at some numeric
interval by default. The format and style of labels in an axis is defined in a
[classname]`Labels` object, which you can get with [methodname]`getLabels()`
from the axis.

[source,java]
----
XAxis xaxis = new XAxis();
...
Labels xlabels = xaxis.getLabels();
xlabels.setAlign(HorizontalAlign.CENTER); // Default
xlabels.setRotation(-45);
xlabels.setStep(2); // Every 2 major tick
// The class highcharts-axis-labels can be used to style further with CSS.
----

Axis labels have the following configuration properties:

[parameter]#align#:: Defines the alignment of the labels relative to the centers of the ticks. On left alignment, the left edges of labels are aligned at the tickmarks, and correspondingly the right side on right alignment. The default is determined automatically based on the direction of the axis and rotation of the labels.
[parameter]#distance#(only in polar charts):: Distance of labels from the perimeter of the plot area, in pixels.
[parameter]#enabled#:: Whether labels are enabled or not. Defaults to [parameter]#true#.
[parameter]#format#:: Formatting string for labels, as described in <<charts.configuration.format>>. Defaults to " [literal]#++{value}++#".
[parameter]#formatter#:: A JavaScript formatter for the labels, as described in
<<charts.configuration.format>>. The value is available in the
[literal]#++this.value++# property. The [literal]#++this++# object also has
[literal]#++axis++#, [literal]#++chart++#, [literal]#++isFirst++#, and
[literal]#++isLast++# properties. Defaults to:


[source,java]
----
function() {return this.value;}
----
[parameter]#rotation#:: Defines rotation of labels in degrees. A positive value indicates rotation in
clockwise direction. Labels are rotated at their alignment point. Defaults to 0.


[source,java]
----
Labels xlabels = xaxis.getLabels();
xlabels.setAlign(HorizontalAlign.RIGHT);
xlabels.setRotation(-45); // Tilt 45 degrees CCW
----
[parameter]#staggerLines#:: Defines number of lines for placing the labels to avoid overlapping. By default undefined, and the number of lines is automatically determined up to [parameter]#maxStaggerLines#.
[parameter]#step#:: Defines tick interval for showing labels, so that labels are shown at every
__n__th tick. The default step is automatically determined, along with
staggering, to avoid overlap.


[source,java]
----
Labels xlabels = xaxis.getLabels();
xlabels.setStep(2); // Every 2 major tick
----

[parameter]#useHTML#:: Allows using HTML in custom label formats. Otherwise, HTML is quoted. Defaults to [literal]#false#.
[parameter]#x#,[parameter]#y#:: Offsets for the label's position, relative to the tick position.
X offset defaults to 0, but Y to [literal]#++null++#, which enables automatic positioning based on font size.


Gauge, pie, and polar charts allow additional properties.

For a complete reference of the many configuration parameters for the labels,
please refer to the JavaDoc API documentation of Charts.


[[charts.configuration.axes.extremes]]
=== Axis Range

The axis range is normally set automatically to fit the data, but can also be
set explicitly. The __extremes__ property in the axis configuration defines the
minimum and maximum values of the axis range. You can set them either
individually with [methodname]`setMin()` and [methodname]`setMax()`, or together
with [methodname]`setExtremes()`. Changing the extremes programmatically
requires redrawing the chart with [methodname]`drawChart()`.



[[charts.configuration.legend]]
== Legend

The legend is a box that shows all series that are currently visible in the chart.
Each series is displayed with a text label and a color dot.
The label's text is determined by the name set in the series object, and the color dot uses the color configured in the series' plot options, or a unique color from a predefined set of colors.

The legend provides the following configuration options:

[parameter]#align#:: Specifies the horizontal alignment of the legend box within the chart area.
Defaults to [constant]#HorizontalAlign.CENTER#.
[parameter]#enabled#:: Enables or disables the legend. Defaults to [literal]#true#.
[parameter]#layout#:: Specifies the layout direction of the legend items. Defaults to [constant]#LayoutDirection.HORIZONTAL#.
[parameter]#title#:: Specifies the title of the legend.
[parameter]#verticalAlign#:: Specifies the vertical alignment of the legend box within the chart area.
Defaults to [constant]#VerticalAlign.BOTTOM#.

The following example demonstrates how to customize the legend:

[source,java]
----
Legend legend = configuration.getLegend();
legend.getTitle().setText("City");
legend.setLayout(LayoutDirection.VERTICAL);
legend.setAlign(HorizontalAlign.LEFT);
legend.setVerticalAlign(VerticalAlign.TOP);
----

[[figure.charts.configuration.legend]]
.Legend example
image::img/charts-configuration-legend.png[]

[[charts.configuration.format]]
== Formatting Labels

Data point values, tooltips, and tick labels are formatted according to
formatting configuration for the elements, with configuration properties
described earlier for each element. Formatting can be set up in the overall
configuration, for a data series, or for individual data points. The format can
be defined either by a format string or by JavaScript formatter, which are
described in the following.

[[charts.configuration.format.string]]
=== Using Format Strings

A formatting string contain free-form text mixed with variables. Variables are
enclosed in brackets, such as " [literal]#++Here {point.y} is a value at
{point.x}++#". In different contexts, you have at least the following variables
available:

* [parameter]#value# in axis labels
* [parameter]#point.x#, [parameter]#point.x# in data points and tooltips
* [parameter]#series.name# in data points and tooltips

Values can be formatted according to a formatting string, separated from the
variable name by a colon.

For numeric values, a subset of C printf formatting specifiers is supported. For
example, " [literal]#++{point.y:%02.2f}++# would display a floating-point value
with two decimals and two leading zeroes, such as [literal]#++02.30++#.

For dates, you can use a subset of PHP [methodname]`strftime()` formatting
specifiers. For example, " [literal]#++{value:%Y-%m-%d %H:%M:%S}++#" would
format a date and time in the ISO 8601 format.


[[charts.configuration.format.formatter]]
=== Using a JavaScript Formatter

A JavaScript formatter is given in a string that defines a JavaScript function
that returns the formatted string. The value to be formatted is available in
[parameter]#this.value# for axis labels, or [parameter]#this.x#,
[parameter]#this.y# for data points.

For example, to format tick labels on a chart axis, you could have:

[source,java]
----
YAxis yaxis = new YAxis();
Labels ylabels = yaxis.getLabels();
ylabels.setFormatter("function() {return this.value + ' km';}");
----


[[charts.configuration.format.simplified]]
=== Simplified Formatting

Some contexts that display labels allow defining simple formatting for the
labels. For example, data point tooltips allow defining prefix, suffix, and
floating-point precision for the values.
