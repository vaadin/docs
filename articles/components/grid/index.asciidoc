---
title: Grid
tab-title: Usage
layout: tabbed-page
page-links:
  - 'API: https://cdn.vaadin.com/vaadin-web-components/{moduleNpmVersion:vaadin-grid}/#/elements/vaadin-grid[TypeScript] / https://vaadin.com/api/platform/{moduleMavenVersion:com.vaadin:vaadin}/com/vaadin/flow/component/grid/Grid.html[Java]'
  - 'Source: https://github.com/vaadin/web-components/tree/v{moduleNpmVersion:vaadin-grid}/packages/grid[TypeScript] / https://github.com/vaadin/flow-components/tree/{moduleMavenVersion:com.vaadin:vaadin}/vaadin-grid-flow-parent[Java]'
---

:experimental:

= Grid

// tag::description[]
Grid is a component for showing tabular data.
// end::description[]

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/grid/grid-basic.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/grid/GridBasic.java[render,tags=snippet,indent=0,group=Java]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/domain/Person.java[group=Java,tags=snippet]
----

--

== Content

A basic Grid uses plain text to display information in rows and columns. Rich content can be used to provide additional information in a more legible fashion. Components such as <<../input-fields#,input fields>> and <<../button#,Button>> are also supported.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/grid/grid-content.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/grid/GridContent.java[render,tags=snippet1,indent=0,group=Java]

...

include::{root}/src/main/java/com/vaadin/demo/component/grid/GridContent.java[render,tags=snippet2,indent=0,group=Java]
----
--


=== Component Renderer vs. Lit Renderer (Flow Only)

As demonstrated in the previous example, custom content can be rendered using component renderers or Lit renderers.


==== Component Renderer

Component renderers are easy to build, but slow to render. For a given column, they generate a component for each item in the dataset. The rendered components are fully controllable on the server side.

For each rendered cell, Grid creates a corresponding component instance on the server side. A dataset of 100 items and 10 columns using component renderer produce up to 1,000 components that need to be managed. The more components you use in a component renderer, the greater the impact on performance.

Component renderers are very flexible and easy to use, but should be used with caution. They're better suited as editors since only a single row can be edited at a time. They can also be used for detail rows.


==== Lit Renderer

Lit renderers will render quickly, but require you to write HTML. To use components with Lit renderers, you need to use their HTML format. Lit templates are immutable, meaning the state of the components can't be managed on the server side. However, the template can have different representations, depending on the state of the item.

The only data sent from the server, other than the template itself -- which is sent only once -- is the extra name property of each item.

Lit templates still enable event handling on the server side. However, you can't, for example, disable or change the text of a button from the event handler. For such situations, use editors instead.

With Lit renderers, the server doesn't keep track of the components in each cell. It only manages the state of the item in each row. The client side doesn't have to wait for the server to send missing information about what needs to be rendered. It can use the template to render all of the cells it needs.

For more in-depth information, see <<flow#using-lit-renderers, Using Lit Renderers with Grid>>.


=== Wrap Cell Content

Overflowing cell content is clipped or truncated by default. This variant makes the content wrap instead.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/grid/grid-wrap-cell-content.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/grid/GridWrapCellContent.java[render,tags=snippet,indent=0,group=Java]
----
--

<<tooltips,Tooltips>> can also be used to display content that doesn't fit into the cell.


== Dynamic Height

Grid has a default height of 400 pixels. It becomes scrollable when its items overflow the allocated space.

In addition to setting any fixed or relative value, the height of a grid can be set by the number of items in the dataset. The grid grows and shrinks based on the row count. This disables scrolling and shouldn't be used for large data sets to avoid performance issues.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/grid/grid-dynamic-height.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/grid/GridDynamicHeight.java[render,tags=snippet,indent=0,group=Java]
----
--


== Selection

Selection isn't enabled by default. Grid supports single- and multi-select. Single-select allows the user to select only one item, while multi-select permits multiple items to be selected.


=== Single-Selection Mode

In single-selection mode, the user can select and deselect rows by clicking anywhere on the row.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/grid/grid-single-selection-mode.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/grid/GridSingleSelectionMode.java[render,tags=snippet,indent=0,group=Java]
----
--


=== Multi-Select Mode

In multi-select mode, the user can use a checkbox column to select and deselect rows.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/grid/grid-multi-select-mode.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/grid/GridMultiSelectionMode.java[render,tags=snippet,indent=0,group=Java]
----
--


== Columns

Column alignment, freezing (i.e., fixed positioning), grouping, headers and footers, visibility, and width can be configured. Users can be permitted to resize and reorder columns.


=== Column Alignment

Three different column alignments are supported: left (default), center, and right.

Right alignment is useful when comparing numeric values, as it helps with readability and scannability. Tabular numbers -- if the font offers them -- or a monospace font could be used to further improve digit alignment.

[.example]
--

[source,typescript]
----

include::{root}/frontend/demo/component/grid/grid-column-alignment.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/grid/GridColumnAlignment.java[render,tags=snippet,indent=0,group=Java]
----
--


=== Column Freezing

Columns and column groups can be frozen -- made _sticky_ -- to exclude them from scrolling a grid, horizontally. This can be useful for keeping the most important columns always visible in a grid with many columns. [since:com.vaadin:vaadin@V23.1]#Freezing columns at the end of the grid# is useful, for example, for keeping row actions always visible.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/grid/grid-column-freezing.ts[render,tags=*,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/grid/GridColumnFreezing.java[render,tags=*,indent=0,group=Java]
----
--

Although it's technically possible to freeze any column, it should be used primarily to freeze columns at the start or end of the grid, leaving the remaining columns unfrozen.


=== Column Grouping

It's possible to group columns together. Grouped columns share a common header and footer. Use this feature to better visualize and organize related or hierarchical data.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/grid/grid-column-grouping.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/grid/GridColumnGrouping.java[render,tags=snippet,indent=0,group=Java]
----
--


=== Column Headers & Footers

Each column has its own customizable header and footer. A basic column header shows the name in plain text. Footers are empty and thus hidden by default. Both can contain rich content and components.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/grid/grid-column-header-footer.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/grid/GridColumnHeaderFooter.java[render,tags=snippet1,indent=0,group=Java]

...

include::{root}/src/main/java/com/vaadin/demo/component/grid/GridColumnHeaderFooter.java[render,tags=snippet2,indent=0,group=Java]
----
--


=== Column Visibility

Columns and column groups can be hidden. You can provide the user with a menu for toggling column visibilities, for example using Menu Bar.

Allowing the user to hide columns is useful when only a subset of the columns is relevant to their task, and if there are plenty of columns.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/grid/grid-column-visibility.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/grid/GridColumnVisibility.java[render,tags=snippet1,indent=0,group=Java]

...

include::{root}/src/main/java/com/vaadin/demo/component/grid/GridColumnVisibility.java[render,tags=snippet2,indent=0,group=Java]
----
--


=== Column Reordering & Resizing

Enabling the user to reorder columns is useful when they want to compare data that isn't adjacent by default. Grouped columns can only be reordered within their group.

Resizing is helpful when a column's content doesn't fit and is cut off or varies in length.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/grid/grid-column-reordering-resizing.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/grid/GridColumnReorderingResizing.java[render,tags=snippet,indent=0,group=Java]
----
--


=== Column Width

All columns are the same width by default. You can set a specific width for any column, or allow the Grid to set the width automatically based on the contents.

Column widths can be fixed or non-fixed (default). Fixed width columns don't grow or shrink as the available space changes, while non-fixed width columns do.

In the following example, the first and last columns have fixed widths. The second column's width is set to be based on the content, while the third column takes up the remaining space.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/grid/grid-column-width.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/grid/GridColumnWidth.java[render,tags=snippet,indent=0,group=Java]
----
--


== Sorting

Any column can be made sortable. Enable sorting to allow the user to sort items alphabetically, numerically, by date, etc.

For detailed information on how to configure sorting in Flow, see <<flow#column-sorting, Column Sorting>>.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/grid/grid-sorting.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/grid/GridSorting.java[render,tags=snippet,indent=0,group=Java]
----
--


=== Sorting by Multiple Columns

The Grid can be sorted by multiple columns simultaneously by enabling multi-sort mode. When this is enabled, clicking a column header adds that column as a sort criterion instead of replacing the current sort column. A separate [since:com.vaadin:vaadin@V23.3]#multi-sort on shift-click mode# combines the two by multi-sorting only when the column header is clicked while holding shift. The order in which multi-sort criteria (columns) are evaluated is determined by the multi-sort priority setting.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/grid/grid-multisort.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/grid/GridMultiSort.java[render,tags=snippet,indent=0,group=Java]
----
--

.Shift-Click Multi-Sorting has Accessibility Issues
[NOTE]
The multi-sort on shift-click mode is not recommended for applications for which accessibility is important. The feature is unlikely to work well with assistive technologies, and the lack of visual affordances makes it difficult to discover for sighted users.


=== Specifying the Sort Property

Columns with rich or custom content can be sorted by defining the property by which to sort. For example, you can have a column containing a person's profile picture, name and email sorted by the person's last name.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/grid/grid-rich-content-sorting.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/grid/GridRichContentSorting.java[render,tags=snippet,indent=0,group=Java]
----
--

Sorting helps users find and analyze data. Therefore, it's recommended to enable sorting for all applicable columns. An exception would be where the order is an essential part of the data itself, such as with prioritized lists.


== Filtering

Filtering allows the user to find quickly a specific item or subset of items. You can add filters to Grid columns or use external filter fields.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/grid/grid-column-filtering.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/grid/GridColumnFiltering.java[render,tags=snippet1,indent=0,group=Java]

...

include::{root}/src/main/java/com/vaadin/demo/component/grid/GridColumnFiltering.java[render,tags=snippet2,indent=0,group=Java]
----
--

Place filters outside the grid when the filter is based on multiple columns, or when a bigger field or more complex filter UI is needed, one which wouldn't fit well in a column.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/grid/grid-external-filtering.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/grid/GridExternalFiltering.java[render,tags=snippet,indent=0,group=Java]
----
--


== Lazy Loading

When you want to display a list of items which would be quite large to load entirely into memory, or you want to load items from a database, data providers can be used to provide lazy loading through pagination.

The following example uses a data provider for lazy loading, sorting, and filtering items:

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/grid/grid-data-provider.ts[render,tags=snippet,indent=0,group=TypeScript]

...

include::{root}/frontend/demo/component/grid/grid-data-provider.ts[render,tags=snippet2,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/grid/GridDataProvider.java[render,tags=snippet,indent=0,group=Java]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/grid/PersonDataProvider.java[render,tags=snippet,indent=0,group=Java]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/grid/PersonFilter.java[render,tags=snippet,indent=0,group=Java]
----
--

To learn more about data providers, see <<{articles}/binding-data/data-provider#, Binding Items to Components>> (Java only).


== Item Details

Item details are expandable content areas that can be displayed below the regular content of a row. They can be used to display more information about an item. By default, an item's details are toggled by clicking on the item's row.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/grid/grid-item-details.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/grid/GridItemDetails.java[render,tags=snippet1,indent=0,group=Java]

...

include::{root}/src/main/java/com/vaadin/demo/component/grid/GridItemDetails.java[render,tags=snippet2,indent=0,group=Java]
----
--

The default toggle behavior can be replaced by programmatically toggling the details visibility, such as from a button click.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/grid/grid-item-details-toggle.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/grid/GridItemDetailsToggle.java[render,tags=snippet1,indent=0,group=Java]

...

include::{root}/src/main/java/com/vaadin/demo/component/grid/GridItemDetailsToggle.java[render,tags=snippet2,indent=0,group=Java]
----
--

<<tooltips,Tooltips>> can be used as a lightweight alternative to the item details panel.


== Context Menu

You can use Context Menu to provide shortcuts for the user. It appears on a right-click by default or a left click. In a mobile browser, a long press opens the menu.

Using a context menu shouldn't be the only way of accomplishing a task. The same functionality needs to be accessible elsewhere in the UI.

See <<../context-menu#,Context Menu>> for more information.

[.example]
--

[source,typescript]
----

include::{root}/frontend/demo/component/grid/grid-context-menu.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/grid/GridContextMenuExample.java[render,tags=snippet1,indent=0,group=Java]

...

include::{root}/src/main/java/com/vaadin/demo/component/grid/GridContextMenuExample.java[render,tags=snippet2,indent=0,group=Java]
----
--


[role="since:com.vaadin:vaadin@V23.3"]
== Tooltips

Tooltips on cells can be used for many different use cases: They can be used for providing additional details on the contents of a cell -- if an <<item-details,item details panel>> would be overkill or otherwise undesirable. They can provide the full text of a cell if it's too long to fit feasibly into the cell itself -- if <<wrap-cell-content,wrapping the cell contents>> is insufficient or otherwise undesirable. Or they can provide textual explanations for non-text content, such as status icons.

[.example]
--
[source,typescript]
----
include::{root}/frontend/demo/component/grid/grid-tooltip-generator.ts[render,tag=snippet,indent=0,group=TypeScript]

...

include::{root}/frontend/demo/component/grid/grid-tooltip-generator.ts[render,tag=snippethtml,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/grid/GridTooltipGenerator.java[render,tags=snippet,indent=0,group=Java]
----
--

See <<../tooltip#,Tooltips documentation>> for details on tooltip configuration.

// Allow 'drag and drop'
pass:[<!-- vale Vaadin.Wordiness = NO -->]


== Drag and Drop

Grid supports drag-and-drop actions. For example, this feature might be used to reorder rows and to drag rows between grids.

pass:[<!-- vale Vaadin.Wordiness = YES -->]


=== Drop Mode

The drop mode of a grid determines where a drop can happen. Vaadin offers four different drop modes:

|===
|Drop Mode |Description

|<<#drag-rows-between-grids,On Grid>>
|Drops can occur on the grid as a whole, not on top of rows or between individual rows. Use this option when the order isn't important.

|<<#row-reordering,Between>>
|Drops can happen between rows. Use this mode when the order is important.

|<<#drag-and-drop-filters,On Top>>
|Drops can take place on top of rows. This is useful when creating relationships between items or moving an item into another item, such as placing a file inside a folder.

|On Top or Between
|Drops can occur on top of rows or between rows.
|===


=== Row Reordering

You can drag rows to reorder them.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/grid/grid-row-reordering.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/grid/GridRowReordering.java[render,tags=snippet,indent=0,group=Java]
----
--


=== Drag Rows between Grids

Rows can be dragged from one grid to another. You might use this feature to move, copy or link items from different datasets.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/grid/grid-drag-rows-between-grids.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/grid/GridDragRowsBetweenGrids.java[render,tags=snippet,indent=0,group=Java]
----
--

// Allow 'drag and drop'
pass:[<!-- vale Vaadin.Wordiness = NO -->]


=== Drag and Drop Filters

Drag and drop filters determine which rows are draggable and which rows are valid drop targets. The filters function on a per row basis.

pass:[<!-- vale Vaadin.Wordiness = NO -->]

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/grid/grid-drag-drop-filters.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/grid/GridDragDropFilters.java[render,tags=snippet,indent=0,group=Java]
----
--


== Inline Editing (Java Only)

Grid can be configured to allow inline editing. Editing can be either buffered or non-buffered. Buffered means changes must be explicitly committed, while non-buffered automatically commit changes on blur -- when a field loses focus.


=== Buffered

[.example]
--
[source,typescript]
----
include::{root}/frontend/demo/component/grid/grid-buffered-inline-editor.ts[preimport,hidden]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/grid/GridBufferedInlineEditor.java[render,tags=snippet,indent=0,group=Java]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/grid/ValidationMessage.java[group=Java]
----
--


=== Non-Buffered

In the example below, double-click a row to start editing. Press kbd:[Escape], or click on a different row to stop editing.

[.example]
--
[source,typescript]
----
include::{root}/frontend/demo/component/grid/grid-unbuffered-inline-editor.ts[preimport,hidden]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/grid/GridUnbufferedInlineEditor.java[render,tags=snippet,indent=0,group=Java]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/grid/ValidationMessage.java[group=Java]
----
--

Alternatively, use <<../grid-pro#,Grid Pro>> for more streamlined inline-editing, or <<../crud#,CRUD>> for editing in a separate side panel or dialog.


== Styling Rows & Columns

You can style individual cells based on the data. You might do this, for example, to highlight changes or important information.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/grid/grid-styling.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/grid/GridStyling.java[render,tags=snippet,indent=0,group=Java]
----

[source,css]
----
include::{root}/frontend/themes/docs/components/vaadin-grid-styling.css[]
----
--


== Theme Variants

Grid variants can reduce the white space inside the grid, adjust the border and row to highlight visibility, and control cell content overflow behavior.

Variants can be combined together.


=== Compact

The `compact` theme variant makes a grid more dense by reducing the header and row heights, as well as the spacing between columns.

This is useful for displaying more information on-screen without having to scroll. It can also help improve scannability and comparability between rows.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/grid/grid-compact.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/grid/GridCompact.java[render,tags=snippet,indent=0,group=Java]
----
--


=== No Border

The `no-border` theme variant removes the outer border of the grid.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/grid/grid-no-border.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/grid/GridNoBorder.java[render,tags=snippet,indent=0,group=Java]
----
--


=== No Row Border

This theme variant removes the horizontal row borders. It's best suited for small datasets. Parsing larger datasets may be difficult unless paired with the `row-stripes` theme variant.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/grid/grid-no-row-border.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/grid/GridNoRowBorder.java[render,tags=snippet,indent=0,group=Java]
----
--


=== Column Borders

You can add vertical borders between columns by using the `column-borders` theme variant. Datasets with a lot of columns packed tightly together, or where content is truncated, can benefit from the additional separation that vertical borders bring.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/grid/grid-column-borders.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/grid/GridColumnBorders.java[render,tags=snippet,indent=0,group=Java]
----
--


=== Row Stripes

The `row-stripes` theme produces a background color for every other row. This can have a positive effect on scannability.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/grid/grid-row-stripes.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/grid/GridRowStripes.java[render,tags=snippet,indent=0,group=Java]
----
--


== Cell Focus

Cells can be focused by clicking on a cell or with the keyboard.

The following keyboard shortcuts are available:

[cols="1,5"]
|====
| kbd:[Tab] | Switches focus between sections of the grid (i.e., header, body, footer).
| kbd:[Left], kbd:[Up], kbd:[Right], and kbd:[Down] Arrow Keys | Moves focus between cells within a section of the grid.
| kbd:[Page Up] | Moves cell focus up by one page of visible rows.
| kbd:[Page Down] | Moves cell focus down by one page of visible rows.
| kbd:[Home] | Moves focus to the first cell in a row.
| kbd:[End] | Moves focus to the last cell in a row.
|====

The cell focus event can be used to get notified when the user changes focus between cells.

By default, the focus outline is only visible when using keyboard navigation. For illustrative purposes, the example below also uses custom styles to show the focus outline when clicking on cells:

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/grid/grid-cell-focus.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/component/grid/GridCellFocus.java[render,tags=snippet,indent=0,group=Java]
----

[source,css]
----
include::{root}/frontend/themes/docs/components/vaadin-grid-cell-focus.css[]
----

--


== Related Components

|===
|Component |Usage Recommendations

|<<../crud#,CRUD>>
|Component for creating, displaying, updating and deleting tabular data.

|<<../grid-pro#,Grid Pro>>
|Component for showing and editing tabular data.

|<<../tree-grid#,Tree Grid>>
|Component for showing hierarchical tabular data.

|<<../list-box#,List Box>>
|Lightweight component for lightweight, single-column lists.
|===

++++
<style>
/* Try to minimize the amount of layout shifting when examples get imported and rendered */
.code-example .render {
  min-height: calc(400px + var(--docs-space-xl) * 2) !important;
}
</style>
++++


[discussion-id]`AC63AABF-4102-4C3E-9776-A09DDC04EF37`
