---
title: Binding Data to Forms
description: Binding data to UI components in TypeScript forms.
order: 1
---

= Binding Data to Forms

Hilla provides a means of binding UI components in TypeScript form views.

The client-side [classname]#Binder# supports Java backend endpoints for loading and saving the form data, and reuses the metadata from Java Bean validation annotations for client-side validation.

== API Basics

The form binding API consists of three key concepts:

- The [methodname]#field()# directive to bind the field components in Lit form view templates
- The generated TypeScript models for POJO classes used in endpoints, which are used as field references and provide the necessary metadata
- The client-side [classname]#Binder# TypeScript class, which is responsible for keeping track of the form state, the default and current values, and validation of the data.

NOTE: See the <<reference#, Form Binding Reference>> for more details.

== How to Bind Form Data

For example, let us consider a Java endpoint with methods for loading and saving a [classname]#Person# bean:

[source,java]
----
/**
 * A Hilla endpoint for the person-view.ts form view.
 */
@Endpoint
public class PersonEndpoint {
    /**
     * Loads a Person to edit into the view.
     * @return default form data
     */
    public Person loadPerson() {
        // ...
    }

    /**
     * Saves the edited Person from the view.
     * @param person form data to save
     */
    public void savePerson(Person person) {
        // ...
    }
}
----

To bind data to a form, follow these steps in your [filename]#frontend/views/person/person-view.ts# client-side [classname]#LitElement# view:

. Import the [classname]#Binder# class and the [methodname]#field()# template directive from the `@hilla/form` package.
Import your [classname]#PersonEndpoint# data endpoint and the generated [classname]#PersonModel# from the `frontend/generated` folder:
+
[source,typescript]
----
import { Binder, field } from '@hilla/form';

import { PersonEndpoint } from 'Frontend/generated/PersonEndpoint';
import PersonModel from 'Frontend/generated/com/example/application/PersonModel';
----

. Create a [classname]#Binder# instance for your view using the generated [classname]#PersonModel#:
+
[source,typescript]
----
@customElement('person-form')
class PersonForm extends LitElement {
  // ...

  private binder = new Binder(this, PersonModel);

  // ...
}
----
+
The [classname]#PersonModel# here is generated alongside a [interfacename]#Person# TypeScript data interface from the [classname]#Person.java# bean.
This describes the structure of the data and the validation-related metadata for the form binding.

. Bind the UI components in the template using the `+${field()}+` syntax:
+
[source,typescript]
----
class PersonForm extends LitElement {
  // ...

  render() {
    return html`
      <vaadin-text-field
       label="Full name"
       ${field(this.binder.model.fullName)}
      ></vaadin-text-field>
    `;
  }
}
----
+
In this example, `this.binder.model` is an instance of [classname]#PersonModel#.
+
[NOTE]
Models do not contain any actual data.
Use `this.binder.value` or `this.binder.defaultValue` to access the actual current or default value of the form respectively.

== Form Binding in Dialogs

Although binding works as expected inside a Dialog, its content is not re-rendered when the validation status changes.
This can be fixed by explicitly requesting a content update in the `binder` declaration:

[.example]
--
[source,typescript]
----
include::{root}/frontend/demo/fusion/forms/dialogs/newsletter-dialog.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/fusion/forms/dialogs/NewsletterEndpoint.java[tags=snippet,indent=0,group=Java]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/fusion/forms/dialogs/NewsletterSubscription.java[tags=snippet,indent=0,group=Java]
----
--
