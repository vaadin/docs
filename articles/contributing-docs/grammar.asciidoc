---
title: Grammar
order: 75
layout: page
---

= Grammar
:experimental:

++++
<style>
.line-through {
  text-decoration: line-through;
}

.sect2 > .paragraph,
.sect2 > .exampleblock {
  margin-left: 1em;
}
.sect2 > h3 {
  font-size: var(--docs-font-size-h4);
}
.exampleblock.exampleblock {
  border-radius: var(--docs-border-radius-l);
  padding: var(--docs-space-m);
  margin: var(--docs-paragraph-margin) 0;
  border: 1px solid var(--docs-divider-color-2);
}
.exampleblock > .content > :first-child {
  margin-top: 0;
}


.exampleblock > .content > :last-child,
.exampleblock > .content > .paragraph:last-child > p:last-child {
  margin-bottom: 0;
}
</style>

<style>
#toc {
  max-height: calc(100vh - var(--docs-space-l));
  overflow: auto;
}
</style>
++++

== abbreviations
Do not terminate abbreviations with a period if the last letter of the unabbreviated form is included in the abbreviation.
For example:

[example]
====
_Mr Smith_ +
_Mrs Smith_ +
_Ms Smith_ +
_Prof. Smith_ +
_Dr Smith_ +
_St Petersburg_ +
_Microsoft Corp._ +
_M. Duval_
+++[+++abbreviation of the French word _monsieur_+++]+++ +
and so on.
====

In general, plurals of abbreviations are formed by adding a lowercase _s_.
Do not use apostrophe _s_ (_`'s_) for this purpose. +
For example:

[example]
====
_SOPs_ +
+++[+++abbreviation for _standard operating procedures_; not _SOP`'s_+++]+++

_APIs_ +
+++[+++Not _API`'s_.+++]+++
====

== admonitions
Admonition blocks such as `[NOTE]`, `[TIP]`, or `[WARNING]` can be used to emphasize important issues.
However, do not overuse them, as this can interfere with the flow of the text . +
There should be no more than three admonitions on a page.

Use a descriptive title for admonitions. +
For example:

[example]
====
  .Do not overuse admonitions
  [WARNING]
  Overusing admonition blocks interrupts the flow.


.Do not overuse admonitions
[WARNING]
Overusing admonition blocks interrupts the flow.
====

[[a_to_z.adverb_phrases]]
== adverb phrases
If you begin a sentence with an adverb phrase, place a comma after the phrase. +
For example:

[example]
====
_**Unfortunately,** we cannot reproduce the bug._ +
_**As you can see,** the screen layout is logical._ +
_**This morning,** I spoke to our customer services manager._
====

== ampersand ("&amp;")
Do not use the ampersand character in place of _and_ in general text, unless space is limited.

== angle brackets
In general text,the name for the _<_ and _>_ characters is _angle brackets_. +
In other contexts, the same characters are known as the _less than_ and _greater than_ symbols.

[[a_to_z.apostrophe]]
== apostrophe (`')
The apostrophe has a specific function: to indicate when one or more letters have been omitted.
For that reason, it is used in contracted forms of verbs.

In general, in our technical documentation, we avoid using contracted forms.
They are correct English, but they are more appropriate to less formal writing.

Nevertheless, to show the function of the apostrophe in contractions in general, here are some examples:

[example]
====
_I am_ -> _I'm_ +
+++[+++The letter _a_ is omitted.+++]+++

_She is_ -> _She's_ +
+++[+++The letter _i_ is omitted.+++]+++

_They are not_ -> _They aren't_ +
+++[+++The letter _o_ is omitted.+++]+++
====

In some cases this logical system of contraction has been adapted, by convention and usage.
For example:

[example]
====
_He will not_ -> _He won't_ +
+++[+++A little illogical, but it is the accepted contraction.+++]+++

_We shall not_ -> _We shan't_ +
+++[+++And not, for example, [line-through]#_sha'n't_#.+++]+++
====

The other standard use of the apostrophe in English is to indicate possession.

In fact, this has its logic. In Old English, the possessive case of a noun was formed by adding _-es_ to it.

In modern English, the _e_ has been dropped from that suffix; this omission is now marked by that apostrophe.

The possessive form of a *single* noun is formed by adding _`'s_.
For example:

[example]
====
_The developer`'s guide_

_The boss`'s office_
====

The possessive of a *plural* is formed by the following process:

* write the ordinary plural form
* if that plural form already ends in _s_ (the commonest case), place the apostrophe *after* that _s_
* in the few irregular cases where the plural form does not end in _s_ (for example, _men_, _women_, _children_, _sheep_), add _`'s_, as for a single noun

For example:

[example]
====
_The employees`' salaries_ +
_The bosses`' salaries_ +
_The women`'s records_ +
_The mice`'s tails_
====

For when to form a possessive using an apostrophe, and when to use _of_, see <<a_to_z.possessive, possessive>>.

[[a_to_z.apposition]]
== apposition
Consider this sentence:

[example]
====
_The CEO, Nick Smith, spoke to a company employee._
====

In this sentence, _The CEO_ and _Nick Smith_ identify the same entity (in this case, a person).
In other words, _Nick Smith_ is another name for _the CEO_.

In the terminology, the phrase _Nick Smith_ is "in apposition" with _the CEO_. +
Notice that the phrase that is in apposition is delimited by commas.

Now, consider this sentence:

[example]
====
_The CEO, Nick Smith, spoke to company employee Susan Rae._
====

In this case, _company employee_ and _Susan Rae_ do *not* identify the same entity. +
It is likely that there is only one _Susan Rae_ in this context, but there are, no doubt, many company employees. In other words, _Susan Rae_ is not another name for _company employee_.

Hence, _Susan Rae_ is *not* in apposition with _company employee_ and, for that reason, is not delimited by commas here.

Let's look at an example that is more relevant to the context of technical documentation. +
Here is some information about the parameters of a method.

[example]
====
_The method takes a single parameter: `duration`._ +
_The method`'s parameter, `duration`, specifies the time in milliseconds that the animation should run._
====

Here, as there is only one parameter, _the method`'s parameter_ and _duration_ refer to the same entity. _Duration_ is in apposition with _the method`'s parameter_, and so is delimited by commas.

Now, here is some similar information but, this time, the method takes more than one parameter.

[example]
====
_The method takes two parameters: `startTime` and `duration`._

_The parameter `duration` specifies the time in milliseconds that the animation should run._
====

Here, _parameter_ and _duration_ do not mean the same thing.
For this reason, _duration_ is not in apposition with _parameters_, so it is *not* delimited by commas.

== articles
Missing and misused articles (_a_, _an_, _the_) are a very common problem, especially for speakers of languages which do not have articles, such as Finnish, Russian, and Japanese.

Although the basic concept of articles is quite simple, there are some special cases and exceptions that can complicate the issue.
You may find the following useful:

// Because of Finnish text
pass:[<!-- vale Vale.Spelling = NO -->]

* http://www.grammarly.com/handbook/grammar/articles/[Grammarly Handbook] about the use of articles (in English)

* https://englantia.wordpress.com/grammar/yksikko-monikko-ja-artikkelit/[Yksikkö, monikko ja artikkelit] (in Finnish)

* http://materiaalit.internetix.fi/fi/kielet/englanti11/e1_lesson2.htm[Articles] (in Finnish)

pass:[<!-- vale Vale.Spelling = YES -->]

== asterisk
The _*_ character is called an _asterisk_. +
Do not use the term _star_.

== at
The symbol _@_ is called the _at_ character.

This comes from traditional accounting notation where the cost of multiple items at a specific cost would be given as, for example, _10 apples&nbsp;@&nbsp;5&nbsp;cents&nbsp;=&nbsp;50&nbsp;cents_, which would be read as _10&nbsp;apples *at* 5&nbsp;cents equals 50&nbsp;cents_.

== author
In some articles, it may be necessary to show the author. +
Authors can identify themselves after the section title as follows:

----
 [.author]
 [name]#Marko Gr&ouml;nroos# <magi@vaadin.com>
----


For section, this should be in the overview.
// Not sure what this means?

Note that for non-ASCII characters, you should use HTML character entity markup.

== backslash
The "\" character is called _backslash_.

== braces
The _{_ and _}_ characters are called _braces_.

== brackets
The _[_ and _]_ characters are called _brackets_ or _square brackets_.

For the _(_ and _)_ characters, see <<a_to_z.parentheses,parentheses>>.

== capitalization
We should capitalize only when there is a good reason for doing so.
Otherwise, capitalization can creep into lots of areas where it has no place.

One situation where this often happens is in the context of common abbreviations and acronyms. +
We might think that, because capital letters are used in an acronym, we should also use capital letters when the term is written out in full. +
This is usually not the case, unless the term is a proper noun. (See <<a_to_z.proper_nouns, proper nouns>>.)

[%header,cols="1,2"]
|===
|Abbreviation |Full expression
|CLI |command line interface
|MFA |multi-factor authentication
|SaaS |software as a service
|JDK |Java Development Kit +++[+++proprietary name+++]+++
|===

== caret
The _^_ symbol is called a _caret_.

== code

== colon (“:”)
The function of a colon in a sentence is to signal the beginning of an explanation or a list. +
Often, we can think of it as saying, _and it is this..._ or _and this is what I'm talking about..._. +
Some examples of this are:

[example]
====
_There can be only one reason he is late**:** he has missed the flight._ +
_Annabel has three valuable characteristics**:** she is clever, she is conscientious, and she is honest._ +
_On seeing the results of my work, I felt only one emotion**:** pride._
====

A colon is also commonly used to introduce a list, particularly at the end of a sentence. +
For example:

[example]
====
_The parameter can be of several types**:** integer, boolean, or string._ +
_Three cities are in the running to stage the next Olympics**:** Beijing, Chicago, and Melbourne._
====

A colon should not be used to join two full clauses outside the uses mentioned here. +
If you are looking for the right punctuation to join two clauses that have some logical relationship, consider using a <<a_to_z.semi-colon, semi-colon>>. +
Do not use a comma for this purpose.
(See <<a_to_z.comma_splice, comma splice>>.)

Vaadin uses US English in its documentation.
US usage allows a colon to be followed by a sentence beginning with a capital letter, if that sentence is the first of two or more sentences that are governed by the same colon.

[example]
====
_There may be several reasons to learn Esperanto**: I**t is completely regular, so you do not need to learn a lot of exceptions.
It is not associated with any specific country, so has no political baggage.
Finally, it is just fun to learn._
====

However, if the colon governs only one sentence, begin the sentence with a lowercase letter:

[example]
====
_I can give you one good reason to learn Esperanto**: i**t is fun to learn._
====

== colloquial expressions
Avoid using colloquial expressions in Vaadin technical documentation, as they may be unfamiliar to people whose native language is not English.

[[a_to_z.comma_splice]]
== comma splice
Consider the following (incorrectly punctuated) sentence:

[example]
====
_You should never divide by zero, this will cause a runtime error._ +
+++[+++Incorrect+++]+++
====

In this example, we have two complete clauses, as each one has a subject and a finite (full) verb.
It is an error to join the two clauses with a comma. This error is often called a _comma splice_.
(_Splice_ means _join_.)

We have several options to rectify this error.
The simplest option is to make each clause a sentence on its own:

[example]
====
_You should never divide by zero.
This will cause a runtime error._
====

This solution is grammatically correct.
However, it does not show the logical connection between the two clauses. A better option would be to use different punctuation.
A semi-colon would serve the purpose:

[example]
====
_You should never divide by zero; this will cause a runtime error._
====

Unlike a comma, a semi-colon can be used to join two complete clauses.
Moreover, it implies a logical connection between them, although the specific logic is left to the reader's interpretation. (See <<a_to_z.semi-colon, semi-colon>>.)

Another option would be to use an appropriate conjunction.
As its name suggests, a conjunction is a joining word.
Some common conjunctions are: _and_, _but_, _or_, _because_, _as_ and _so_.
Conjunctions often imply some kind of logical connection between the clauses that they join.

In our example, we want to express a concept of causation.
_Because_ and _as_ would be suitable options:

[example]
====
_You should never divide by zero, because this will cause a runtime error._ +
_You should never divide by zero, as this will cause a runtime error._
====

Although the meaning of these two versions is the same, in fact, by convention, we use _as_ more often than _because_ to express this kind of causation.
Consequently, the second version is the best of the options that we have discussed.

== commas
There are a small number of situations where commas are mandatory in English.
These include:

* non-defining <<a_to_z.relative_clauses,relative clauses>>
* noun phrases in <<a_to_z.apposition,apposition>>
* after introductory <<a_to_z.adverb_phrases,adverb phrases>>
* delimiting two or more adjectives before noun
* delimiting items in a list

== conditional

== congratulations
Avoid congratulating the reader, for example, for successfully working through a tutorial and completing the process that the tutorial describes.
It sounds patronizing.

[[a_to_z.contractions]]
== contractions
Contractions (or "contracted verb forms") are those where one or more letters are omitted. For example:

[example]
====
She's on her way to the meeting. [_She's_ is a contraction of _she is_.]

They'll be here on Friday. [_They'll_ is a contraction of _they will_.]
====

In general use, contractions are perfectly acceptable and correct. In fact, using contractions can help to make a non-native speaker's English sound much more natural.

However, contractions are not generally appropriate in formal contexts, such as academic works and legal documents.
We have made the decision not to use contractions in our technical documentation, perhaps sacrificing a little friendliness of tone in the interests of simplicity of language.

== control-key combinations
If your audience includes macOS users, provide the appropriate key-naming terminology.
Spell out _Control_ and _Command_, rather than abbreviating them.
For example:

[example]
====
Press [guibutton]#Control+S# ([guibutton]#Command+S# on Macintosh) to save.
====

[[a_to_z.countable_entities]]
== countable (and uncountable) entities
Some entities have the characteristic of existing as separate objects, such that we can count them. +
For example, books are objects that exist separately from each other, so that it makes sense to talk about _one book_, _two books_, and so on. +
We call this category of objects _countable_.

We view some other entities as existing in bulk, as amounts of something, rather than a number of separate objects that we can count. +
For example, we apply the label _air_ to a contiguous body of gaseous substances. It does not usually make sense to talk about _one air_ or _two airs_. +
The same applies to entities such as _sugar_, _water_ and aluminum. +
We call this category of entities _uncountable_.

From the point of view of grammar, it is important to consider whether or not some entity is countable. +
For example, the indefinite articles, _a_ and _an_, convey the meaning of _one_ of something. +
Hence, it makes sense to use them with countable nouns, but not with uncountable ones. +
There is no meaning in the phrases _an air_ or _a water_.

Similarly, countable nouns, by definition, can be plural. +
Uncountable nouns, again by definition, cannot be plural.

However, there is a small trap here. +
Many nouns cannot be categorically defined as either countable or uncountable; it depends on their meaning in the given context.

For example, _time_ as a concept is uncountable. +
It would not make sense to say, for example:

[example]
====
_I'm sorry I haven't got *[line-through]#a time#* to talk to you now._
====
On the other hand, _time_ is countable when it means an occasion or a period. +
For example:

[example]
====
_I remember *a time* when 1 Mbyte was a lot of memory._ +
_How many *times* have I asked you not to do that?_
====

Consider, too, the difference between:

[example]
====
_I don't like *coffee*._ +
and +
_Would you like *a coffee*?_ +
_How many *coffees* have you had this morning?_
====

== cultural references

== currency
Place currency symbols before the numeric amount. For example:

====
$25.50

€3

&yen;45.00
====

In general, in the absence of other information, we assume that the dollar ($) symbol indicates US dollars.
It is not necessary to specify this.

However, where it is required to distinguish between dollar currencies of different states, it should be written as in the following examples:

====
US$4.50

AUS$19.10

CA$200

HK$99.99
====

There is no hard-and-fast rule for forming country codes in this context.
Just make sure that it is clear which country is being referred to.

== dangling participles
Participles are formed from verbs. Present participles end in _-ing_; past participles often end in _-ed_, though there are many irregular forms. Some examples:

[cols="1,1,1"]
|===
|*infinitive*
|*present participle*
|*past participle*
|to bring
|bringing
|brought
|to have
|having
|had
|to lead
|leading
|led
|to walk
|walking
|walked
|to write
|writing
|written
|===

Participles are often used as convenient concise forms. For example:

====
*Being* the project leader, Hannah Jones chaired the meeting. +++[+++A more concise form of: _As she is the project leader, Hannah Jones chaired the meeting._+++]+++

I was given a spec *written* on the back of an envelope. +++[+++An alternative form of: _I was given a spec that was written on the back of an envelope._+++]+++

*Having* caught a terrible cold, I phoned my colleagues to postpone the meeting. +++[+++In other words: _As I had caught a terrible cold, I postponed the meeting._+++]+++
====

Participles can work well when used in this way, but we need to be careful that our sentence is unambiguous. Consider the last example again:

====
Having caught a terrible cold, I phoned my colleagues to postpone the meeting.
====

Who had caught the cold?
Was it me or was it my colleagues?
Clearly, it was me, but how do we know this?
We know because *we assume that the next noun phrase after the participle clause indicates the person or thing that the participle refers to*.

Look at these similar sentences:

====
Being corrupt, the file was rejected. +++[+++Since the next noun phrase after the participle phrase is _the file_, it is clear that it is the file that is corrupt.+++]+++

Being corrupt, I rejected the file. +++[+++In this case, basing our understanding purely on the word order, we might interpret this to mean that I am the one who is corrupt.+++]+++
====

In most cases of such poorly chosen word order, we can probably guess at the intended meaning.
However, our goal is that our readers should correctly interpret our material on the first reading.

When the structure of the sentence leaves it unclear to whom or what the participle refers, this is called a "dangling" or "unrelated" participle.

Here are some other examples of poorly chosen, and hence distracting, word order, with some suggestions for improvement:

[cols="1,1"]
|===
|*"Dangling participle" version*
|*Improved version*
|*Being* a public holiday, the office was closed.
|As it was a public holiday, the office was closed.
|*Having* crashed three times in one week, we decided to replace the server.
|As the server had crashed three times in one week, we decided to replace it.
|===

== dash (“–”)

== dates
In our documentation, we use the format `<month> <day number>, <year>`. We do not use the ordinal abbreviation suffixes _-st_, _-nd_, _-rd_ or _-th_.
Nor do we write the word _the_ between the month name and the day number.
For example:

[example]
====
June 15, 2020

May 1, 2022
====

Avoid expressing dates using variations of the _mm/dd/yyyy_ or _dd/mm/yyyy_ formats.
There are different conventions for these formats around the world, so that the possibility of confusion and misunderstanding is high.
Instead, write out dates using month names, as described earlier.

== days
Write out the days of the week in full, if space allows this.
Otherwise, abbreviate the names to three characters, as follows:

[%header,cols="2,1,1"]
|===
|Day | 3-letter abbreviation | 2-letter abbreviation
|Sunday | Sun | Su
|Monday | Mon | Mo
|Tuesday | Tue | Tu
|Wednesday | Wed | We
|Thursday | Thu | Th
|Friday | Fri | Fr
|Saturday | Sat | Sa
|===

== definite article (“the”)

== double quotes (“)
See “quotation marks”

== em dash ("&mdash;")
In US English, a pair of _em_ dashes (so called because they have the same width as the letter _M_) are used to indicate a fragment of text in parenthesis. The pair of _em_ dashes imply a more significant break in the structure of the sentence than one marked by a comma or brackets.
There should be no space either before or after an _em_ dash.
For example:

[example]
====
The tool does not fix the bug&mdash;if only it were that simple&mdash;but it does help you to identify its location.

You can use a dropdown or a combo&mdash;personally, I prefer the latter&mdash;but, either way, the user needs to be able to select from the available options.
====

A single _em_ dash can be used to add an afterthought or aside.
For example:

[example]
====
You can use whichever IDE you prefer&mdash;it is entirely up to you.

Make sure your code is well commented&mdash;you will thank yourself when you revisit it six months later.
====

Avoid using the _em_ dash too much; it can quickly become distracting and even irritating.
Very often, a comma or semi-colon is a more appropriate choice of punctuation, especially in more formal writing, such as technical documentation.
The two previous examples could also be written as:

[example]
====
You can use whichever IDE you prefer; it is entirely up to you.

Make sure your code is well commented; you will thank yourself when you revisit it six months later.
====

== emphasis
Use the emphasis styles, such as
`+++[+++classname+++]#+++ClassName+++#+++` emphasis for class names and
`+++[+++methodname+++]#+++methodName()+++#+++` for methods.

.Custom emphasis styles
[%header, cols="2,4,2"]
|====
|Style Element | AsciiDoc Example Code | Result
|Class Names | `+++[classname]#Component#+++` | [classname]#Component#
|Interface Names | `+++[interfacename]#EventListener#+++` | [interfacename]#EventListener#
|Method Names | `+++[methodname]#setValue()#+++` | [methodname]#setValue()#
|GUI Buttons | `+++[guibutton]#OK#+++` | [guibutton]#OK#
|GUI Labels | `+++[guilabel]#OK#+++` | [guilabel]#OK#
|File Names | `+++[filename]#readme.txt#+++` | [filename]#readme.txt#
|Other Monospace | `+++`appName`+++` | `appName`
|Key Caps | `+++kbd:[Ctrl + C]+++` | kbd:[Ctrl + C]
|Menu Choices | `+++"Help > Updates"+++` or
`+++menu:Help[Updates]+++`| "Help > Updates"
|====

== en dash ("&ndash;")
The _en_ dash (so called because it has the same width as the letter _N_) is commonly used to indicate a range of values.
When used in this way, it is not preceded or followed by a space.
For example:

[example]
====
Select a number in the range 0&ndash;255.

The parameter should be a string of 8&ndash;10 characters.

The licence enables you to use the software on 1&ndash;3 computers.

He was chief designer (2003&ndash;9), and subsequently CEO of the company (2009&ndash;12).

The office is open Monday&ndash;Friday.
====

We can also describe ranges by using the words _from_ and _between_.
These forms should not be mixed with the _en_ dash.
Use one form or the other, but not both.
For example:

[example]
====
You can use the licence on between 1 and 3 workstations. +
+++[+++Not _between 1&ndash;3 workstations_.+++]+++

The parameter should be a string of from 8 to 10 characters. +
+++[+++Not _a string of from 8&ndash;10 characters_.+++]+++
====

== euro
The _euro_ symbol (&euro;) is represented as `\&euro;` in AsciiDoc.
In amounts of money, place the _euro_ symbol immediately *before* the numeric quantity, in the same way as for, for example, the dollar or pound symbol.

== exclamation mark ("!")
Avoid using exclamation marks in technical documentation, unless it is as part of some code syntax.
Its use in normal text is distracting and detracts from the professional tone.
For example:

[example]
====
You have now created your component! +++[+++Avoid this usage.+++]+++

`#!/bin/bash` +++[+++The exclamation mark is part of the script syntax.+++]+++
====

== future tense
Avoid using the future tense to describe the expected behavior of something.
Instead, use the present tense.
For example:

[example]
====
When the compilation is complete, the program *displays* summary information.
*Not _[line-through]#will display#_.*

Run the code in debug mode. Execution *pauses* at the breakpoint that you have specified.
*Not _[line-through]#will pause#_.*
====

== headings
You should use title or headline case for all headings and chapter, section, or sub-section titles.

[example]
====
 = Style Guidelines for Vaadin Documentation
====

For a detailed description of capitalization rules, see for example:

* http://grammar.yourdictionary.com/capitalization/rules-for-capitalization-in-titles.html[Rules for Capitalization in Titles of Articles]: Your Dictionary

== hyphen (“-”)
There is often confusion about whether or not to use a hyphen in compound words (such as _start-up_ and _onboarding_) and words that include a prefix (such as _presales_ and _multifactor_).
English has no hard-and-fast rules about this; it is simply a question of accepted usage.

In general, use the Merriam-Webster online dictionary as a guide.
If the full compound word or prefixed word exists in the dictionary, use the form that the dictionary gives.
If the full compound word or prefixed word does *not* exist in the dictionary, use a hyphen.
For example:

====
start-up (noun) +
+++[+++This is the form given in the dictionary.+++]+++

setup (noun) +
+++[+++This is the form given in the dictionary.+++]+++

log-in (noun)
*[Neither _log-in_ nor _login_ is given in the dictionary, so use a hyphen.]*
====

Sometimes, we want to mention a series of items, all hyphenated on the same base word.
In such cases, we can reduce repetition by applying distributed hyphenated descriptive words to the base word.
For example:

[example]
====
The device used a combination of first-generation and second-generation chips. +
+++[+++OK, but repetitive.+++]+++

The device used a combination of first- and second-generation chips. +
+++[+++Better.+++]+++
====

In general, use a hyphen in compounds formed from an adverb and an adjective, in order to avoid ambiguity as to which word the adverb qualifies.
For example:

[example]
====
I am grateful to my *hard-working* colleagues.
*Not _[line-through]#hard working# colleagues_.*

This benefits *low-paid* employees.
*Not _[line-through]#low paid# employees_.*
====
However, do not use a hyphen when the adverb ends in _-ly_.
In these cases, there is no ambiguity concerning which word the adverb applies to.
For example:

pass:[<!-- vale Google.LyHyphens = NO -->]
[example]
====
The technology is a *closely guarded* secret.
*Not _[line-through]#closely-guarded# secret_.*

This benefits *poorly paid* employees.
*Not _[line-through]#poorly-paid# employees_.*
====
pass:[<!-- vale Google.LyHyphens = YES -->]

== indefinite article
See <<quick-style-guide#a_to_z.a_an,"a" / "an">>

== introduction

== introductory clauses
Always use comma after an link:https://owl.english.purdue.edu/owl/resource/607/03/[introductory clause, phrase, or word].

[example]
====
After a while, you can look into it.

Nevertheless, fields are components.

Meanwhile, you can use a workaround.

Additionally, we need to make the call to the REST service.
====

== jargon
Avoid using jargon.
Try to use inclusive language at all times.

== Latin abbreviations

== lists
An inline list should be introduced by a colon.
Items in the list can be separated by commas.
However, in cases where items in the list themselves contain commas, it is better to use semi-colons as separators, in order to avoid confusion.
For example:

[example]
====
This curry has three vital ingredients: onion, potato, and spinach.

This curry has three vital ingredients: onion, which should be roughly chopped; potato, which should be diced; and fresh spinach leaves, which should be thoroughly washed before use.
====

== menu header
If an AsciiDoc file is intended to be rendered as a section, a page, or tab, it must have a _header block_.
This is used to build the menu in the documentation website.

----
---
title: Title of the article
order: 4
layout: page
---
----

`title`::
  The title to be displayed in the menu.
  The title should be same as the title of the article, but can be a shortened version to keep the menu more tidy.

`order`::
  Order number in the menu.
  If articles are reorganized, the order numbers may need to be reorganized, too.
  It is good practice to make them multiples of 10 or 100, in order to leave space to add new articles without having to renumber all the others.

`layout`::
  The layout can be either `page` or `tabbed-page`.
  In a tabbed page, the sub-articles are displayed in tabs rather than in the menu.
  The default tab content comes from the `index.asciidoc`.

`tab-title`::
  Sets the tab title in `tabbed-page` pages.
  It should be kept short.

== method names
Use empty parentheses at the end of method names to denote that they are methods.
In general, do not list parameter types for methods, unless this is required in order to indicate a specific version of a method.
It may also be necessary to specify a parameter when it is relevant in the context.
For example:

[example]
====
Call `setEnabled(false)` to disable it.
====

== months
Write out names of months in full, if space allows.
If you need to abbreviate month names, use the following abbreviations:

[%header,cols="1,1"]
|===
|Month | Abbreviation
|January | Jan
|February | Feb
|March | Mar
|April | Apr
|May | May
|June | Jun
|July | Jul
|August | Aug
|September | Sep
|October | Oct
|November | Nov
|December | Dec
|===

Do not add a period to the abbreviated names.

== multiplication sign
If you need to show the multiplication sign, use &times; (`\&times;`), not the letter _x_.
One case for using the multiplication sign is to refer to dimensions.
There should be a non-breaking space on either side of the multiplication sign.
For example:

[example]
====
The image size should be at least 150&nbsp;&times;&nbsp;150 pixels. +
+++[+++That is, _150\&nbsp;\&times;\&nbsp;150 pixels_.+++]+++
====
In code, you obviously need to use the symbol that is required by the  language you are using, which is generally the asterisk character (_*_).

== non-breaking space
Use a non-breaking space to prevent the browser from splitting terms in a way that could cause confusion for the reader.
Some examples are:

* between a number and its units
* between numbers and words that define a date
* between a person's title (_Ms_, _Dr_, _Prof._) and their name
* between words separated by a slash ("/") character

A non-breaking space can be written in AsciiDoc as `\&nbsp;`.

[[a_to_z.nouns_as_descriptors]]
== nouns as descriptors
English is very versatile in allowing nouns to be used as if they were adjectives.
For example:

[example]
====
Please close the *office* door quietly.

Select your preferred *keyboard* layout.
====

Bear in mind that when nouns are used like adjectives in this way, they are almost always used in the singular form, not plural.
For example:

[example]
====
She is the manager of a *shoe* shop. +++[+++Not _a shoes shop_.+++]+++

This is the responsibility of the *microchip* manufacturer. +++[+++Not _the microchips manufacturer_.+++]+++
====

== number sign
Do not use the _#_ character to indicate a number.
For example:

[example]
====
[line-through]#See item #3.#
 *[Instead, write _See item number 3_.]
====

== numbers
In text in general, integers between 0 and 9 (inclusive) should be written in words, while other numbers should be written as numerals.
Try to avoid beginning a sentence with numerals.
For example:

[example]
====
The team consisted of one team leader, two senior programmers, and 10 junior programmers.
====

However, in certain contexts, it may be preferable to write all numbers in numerals.
pass:[<!-- vale Microsoft.Units = NO -->]
Such a context might be, for example, statistical or mathematical content, or where units are specified (such as degrees, metres, or kilograms).
pass:[<!-- vale Microsoft.Units = YES -->]
For example:

[example]
====
In a survey, 7 out of 10 developers said that they preferred Python to Perl.

You can calculate the value using `2 * &pi; * r`.

The sample was found to have expanded by 6 mm at the end of the experiment.
====

Similarly, use numerals for

--
* page numbers
* version numbers
* numbers in a technical context, such as size of memory, processor speed, file sizes, etc.
* percentages
* negative numbers
* decimal numbers
* ranges of numbers
--

For a decimal number greater than &ndash;1 and less than 1, put an explicit 0 before the decimal point.
For example:

[example]
====
0.5 +++[+++Not _.5_+++]+++

-0.02 +++[+++Not _-.02_+++]+++
====


Avoid using Roman numerals (for example, _I_, _IV_, _vii_, _ix_).

Write out a number if it is an approximation, rather than an accurate figure.
For example:


[example]
====
There must have been a thousand people at the meeting. +
+++[+++Not _There must have been 1,000 people&hellip;_.+++]+++

You had to write hundreds of lines of code. +
+++[+++Not _You had to write 100s of lines of code._+++]+++
====


pass:[<!-- vale Google.Ordinal = NO -->]
Write out ordinal numbers (_first_, _second_, _third_, etc.) in full.
Do not use _1st_, _2nd_, _3rd_, etc.
pass:[<!-- vale Google.Ordinal = YES -->]

== Oxford comma
See “lists”.

[[a_to_z.parentheses]]
== parentheses

== passive voice

== percentages
Use the required numeral and the percent sign ("%") with no space between them.
If the percentage begins the sentence, write the percentage expression in words.
For example:


====
In *99%* of cases, the methodology works.

*Ten percent* of hacking attempts succeeded.
====

== phrasal verbs

== plurals
Do not use _s_ in parentheses to indicate that there may be one or more of something.
== For example

[example]
====
Inspect the error message[line-through]#(s)# for more detailed information. +++[+++Avoid this form of optional plural.+++]+++
====

This usage can be confusing for the reader.
Instead, choose an alternative wording, even if it is slightly longer.
For example:

[example]
====
Inspect any error messages for more detailed information.
====

== plus
Do not use _plus_ as a synonym for _and_.

[[a_to_z.possessive]]
== possessive
English has two main ways of forming a possessive: the apostrophe and the preposition _of_.

In general, use the apostrophe for people and animals.
For example:

[example]
====
_The team leader's keyboard_
_A manager's salary_
_The employees' well-being_
_The horse's mouth_
====
Use the preposition _of_ for things and ideas.
For example:

[example]
====
_the name of the method_
_the beginning of the process_
_the keyboard of the computer_
_the door of the office_
====
A third possibility is to use one noun as a descriptor of another.
For example:

[example]
====
_the method name_
_the computer keyboard_
_the office door_
====
Notice that, in the last group of examples, the noun that is used as a descriptor is always singular, even if the word it governs is plural.
For example:

[example]
====
_the method names_
_the computer keyboards_
_the office doors_
====
See also <<a_to_z.nouns_as_descriptors, nouns as descriptors>>; <<a_to_z.apostrophe, apostrophe>>.

== procedures
In technical documentation, we very often want to describe the procedures that are necessary in order to perform some task.
Such procedures usually consist of a series of steps.

In most cases, we start with a top-level sentence.
For example:


[example]
====
Create a new project as follows:

To create a new project, follow these steps:
====

Do not start with an incomplete sentence at the top-level which is then completed by the text of each step.
This structure obliges the reader to keep the top-level text in mind in order to interpret the subsequent text correctly.
For example:

[example]
====
To create a new project, you must: +
+++[+++Avoid beginning with an incomplete sentence which is completed by the text of subsequent steps.+++]+++

Log in&hellip;

Make sure you have installed the plugin&hellip;

Create a new app&hellip;
====

Use parallel structures in the steps that make up the procedure.
In other words, structure each step in a similar way to the others.

== product names
Product names, such as List Box, should be capitalized as is usual for proper nouns, not as if they were class names.
Use the class name if you are referring specifically to a class.
For example:

[example]
====
[classname]#ListBox# extends [classname]#ListBoxBase#.
====

However, do not use class names in component documentation, which should be language-independent; that is, neither Java- nor JavaScript-specific.

[[a_to_z.proper_nouns]]
== proper nouns

== punctuation
See the specific entries for each punctuation mark; for example, “commas”, “quotation marks”, etc.

== quotation marks
In general, when you want to put text in quotation marks, use double quotation marks ("&nbsp;").
Avoid using single quotation marks ('&nbsp;'), unless, of course, it is required by some code syntax.

[[a_to_z.relative_clauses]]
== relative clauses
Relative clauses allow us to give more information about a person or thing that we mention in a sentence.
For example:

[example]
====
*Instead of saying:* _I asked Linda Johnson. She works in the same office as me_,

*it is neater to say:* _I asked Linda Johnson, who works in the same office as me_.
====

They are called "relative clauses" because they relate to some entity in the main clause of our sentence.
The word that links the relative clause to the main clause is often a "W" word, such as _which_, _who_, _where_, _when_, or _whose_.
The word _that_ is also often used as the linking word.
For example:

[example]
====
The software is written in Java, which is our preferred language.

Jean Reboulet, who led the design team, attended the meeting.

The conference was held in San Francisco, where the company has its headquarters.

We recommend performing full backups at the weekend, when the system is less busy.

We contacted Sandra Stein, whose team maintains the library.

This is the team that maintains the library.
====

We need to be aware that there are two kinds of relative clause: *defining* and *non-defining*.

Why is this important?
It matters because it has an impact on the punctuation we need to use, and also on the sentence structure.

A *defining relative clause*, as the name suggests, defines an entity in the main clause.
It gives us essential information in order to identify the person or thing that was mentioned.
In other words, without the information in this clause, our sentence would not have the same meaning and might not even make sense at all.
For example:

[example]
====
This is the bug *which our testing team reported*. +
+++[+++The relative clause is essential in order to understand which bug is being talked about.+++]+++

The place *where you parked your car* is private property. +
+++[+++The relative clause identifies the place that was mentioned.+++]+++

====

== screenshots
Every page should have at least one screenshot.
There should at least be a screenshot in an introduction or overview section.

== section
The basic structure of a new section file is as follows:


[example]
====
----
---
title: Title of the section
order: 4
layout: page
---

[[thechapter.thefeature]]
= Fine Feature

[.author]
[name]#Marko Gr&ouml;nroos# <magi@vaadin.com>

The Fine Feature is a feature of a feature...

[[thechapter.thefeature.basic-use]]
== Basic Use
----

&vellip;
====

[[a_to_z.semi-colon]]
== semi-colon (“;”)

== single quotes (&lsquo;&nbsp;&rsquo;)
See “quotation marks”.

== slang
We need to avoid slang for two good reasons.
One reason is that it detracts from the professional style that we are trying to convey with our documentation.
The other reason is that non-native speakers may not be familiar with slang terms.
That would impact the accessibility of our documentation.

[[a_to_z.slash]]
== slash (“/”)
The slash character is often used to indicate one or more possibilities from a group.
The slash character should be preceded and followed by a non-breaking space.
For example:

[example]
====
The library contains routines to facilitate input&nbsp;/&nbsp;output.
====

Try to avoid excessive use of the slash character, particularly when the words _and_ or _or_ would suffice.
For example:

[example]
====
I was responsible for bug-fixing *and* maintenance work. +++[+++Not _bug-fixing&nbsp;/&nbsp;maintenance work_.+++]+++

Please get back to me if you have any questions *or* queries. +++[+++Not _if you have any questions&nbsp;/&nbsp;queries_.+++]+++
====

Avoid using slashes in abbreviations.
For example:

[example]
====
in charge +++[+++Not _i/c_.+++]+++

AC-DC +++[+++Not _AC/DC_, unless in the context of Australian rock groups.+++]+++
====

Do not use the slash character to write fractions, such as _1/2_ or _3/4_, as these may be liable to misinterpretation.

Instead, use the _&frac12;_ (`\&frac12;` or `\&half;` in AsciiDoc), _&frac14;_ (`\&frac14;`), or _&frac34;_ (`\&frac34;`) characters, if appropriate.
If the required character is not available, use a decimal or spell it out.
For example:

[example]
====
The inverse of 8 is *one-eighth*.

The inverse of 8 is *0.125*.
====

== split infinitive
The infinitive of a verb is the form that includes the particle "to".
Examples of infinitives are _to have_, _to hold_, and _to program_.

Traditionally, it was considered bad style to "split" the infinitive by placing an adverb between the particle and the verb. For example:

[example]
====
It is necessary to *fully* understand the process before starting. +++[+++Instead of, for example, _to understand the process fully_.+++]+++

We had to *completely* rebuild the library. +++[+++Instead of, for example, _to rebuild the library completely_.+++]+++
====

Although split infinitives are generally considered to be acceptable these days, it is worth considering whether you could easily write your sentence so as to avoid it.

However, there may be some cases where strictly imposing the ideal of avoiding split infinitives could result in an awkward sentence or even introduce ambiguity.
Clearly, we need to prioritise simplicity, clarity, and accuracy at all times, even if it means we have to compromise on elegance.

== time
Use the _ratio_ character ("&ratio;", `\&ratio;`) as the delimiter in times, rather than a standard colon.
The difference is that the _ratio_ character is vertically centered on the line, whereas the colon character is anchored to the baseline.
For example:

[example]
====
The seminar begins at *11&ratio;00* UTC. +
+++[+++Not _11:00 UTC_.+++]+++
====

[[a_to_z.time_clauses_in_future]]
== time clauses in the future
We often use time clauses to refer to some time in the future.
Such clauses may begin with _when_, _while_, _until_, _as soon as_, _before_, and _after_.
In English, we generally use a present or present perfect tense in this type of clause, in spite of the fact that it refers to a future time.
The remainder of the sentence may use any appropriate future form, or an imperative (instruction) form.
For example:

[example]
====
As soon as you *get* to the office, call me. +++[+++Not _As soon as you will get&hellip;_+++]+++

While I *am* in Scotland, I'll visit Edinburgh Castle. +++[+++Not _While I will be in Scotland&hellip;_+++]+++

When you *have finished* that work, you can start the next task. +++[+++Not _When you will finish&hellip;_ or _When you will have finished&hellip;_+++]+++
====

== underscore
The character "&lowbar;" is called the _underscore_ character.
You can avoid formatting problems in AsciiDoc by using the `\&lowbar;` entity reference.

== units
There is a space between the numeric quantity and the units.
Abbreviated forms of units are written in the singular.
For example:

[example]
====
The maximum permissible weight is 28 *lb*. +++[+++Not _28 lbs_.+++]+++
====

The following are the standard abbreviations for common units:

[cols="1,1"]
|===
|*unit*
|*abbreviation*
|degree
|&deg; (no space)
|feet
|ft
|gigabyte
|GB
|gram
|g
|hour
|h
|inch
|in
|kilobyte
|kB
|kilowatt
|kW
|litre
|l
|megabit
|Mbit
|megabyte
|MB
|megawatt
|MW
|metre
|m
|millimetre
|mm
|minute
|min
|ounce
|oz
|pound (weight)
|lb
|second
|s
|terabyte
|TB
|===

It is very common to use a compound expression with a numeric value and units as a descriptive phrase.
In such cases, use a hyphen to join the compound expression.
Notice that the singular form of the unit is always used.
For example:

[example]
====
A *22-page* book. +++[+++Not _A 22-pages book._+++]+++

A *twenty-mile* journey. +++[+++Not _A twenty-miles journey._+++]+++

A *25,000-ton* ship. +++[+++Not _A 25,000-tons ship._+++]+++
====

== Vaadin versions
Do not use _Vaadin 14_ or other Vaadin version numbers in text.
Instead, use the [role="since:com.vaadin:vaadin@V19"] tag to indicate version numbers.

== x
Do not use the character _x_ as a multiplication sign.
Instead, use the multiplication symbol &times; (`\&times;` in AsciiDoc).
