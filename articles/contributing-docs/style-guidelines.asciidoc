---
title: Style Guide
order: 80
layout: page
---

= Comprehensive Style Guide
:experimental:

This article describes various style guidelines for Vaadin documentation.
The basic markup instructions are described in <<formatting#, Formatting Vaadin Documentation With AsciiDoc>>.

Many of the guidelines are checked by the Vale linter.

=== Abbreviations

You should define any abbreviations that you use by writing it out and having the abbreviation in parentheses.
Commonly known abbreviations do not need to be defined.

[example]
====
* You can use Vaadin with _Contexts and Dependency Injection (CDI)_
* Please read the _FAQ_
====

Commonly known abbreviations are listed in `.github/styles/Vaadin/Abbr.yml`.

pass:[<!-- vale Vaadin.Abbr = YES -->]

See also <<#latin-abbreviations, Latin Abbreviations>>.

== Active Voice

You should prefer active voice in writing.


== Admonitions

Admonition blocks such as `[NOTE]`, `[TIP]`, or `[WARNING]` can be used to emphasize important matter.
They should not, however, be overused or otherwise the text gets restless.
There should be no more than 3 admonitions on a page.

Admonitions should always have a descriptive title.

For example:

[example]
====
  .Do not overuse admonitions
  [WARNING]
  Overusing admonition blocks makes text restless.

.Do not overuse admonitions
[WARNING]
Overusing admonition blocks makes text restless.
====

== Articles

Missing articles are a common problem, especially for Finnish writers.

Please refer to:

// Because of Finnish text
pass:[<!-- vale Vale.Spelling = NO -->]

* http://www.grammarly.com/handbook/grammar/articles/[Grammarly Handbook] about the use of articles (in English)

* https://englantia.wordpress.com/grammar/yksikko-monikko-ja-artikkelit/[Yksikkö, monikko ja artikkelit] (in Finnish)

* http://materiaalit.internetix.fi/fi/kielet/englanti11/e1_lesson2.htm[Articles] (in Finnish)

* etc.

pass:[<!-- vale Vale.Spelling = YES -->]

=== Repeating Articles in Lists

One common issue is whether to repeat articles in lists of two or more items.
In general, you can leave the latter article out.
In the following cases it would be needed:

* There's some ambiguity: _a text field has a caption and input box_ (the _box_ would also refer to the caption: "_caption box_") ->
** _A text field has a caption and an input box_

+
In a similar way, an adjective for an item could cause ambiguity whether it is for the following item or also the next ones: _a nested field and layout_.
* Need to emphasize the list, or that the items are distinct and each is important:
** _You have two ways: the right way and the wrong way_.
** _The Good, the Bad, and the Ugly_



== Capitalization

You should use title or headline case for all titles, be them chapter, section, or sub-section titles.

[example]
====
 = Style Guidelines for Vaadin Documentation
====

For a detailed description of capitalization rules, see for example:

* http://grammar.yourdictionary.com/capitalization/rules-for-capitalization-in-titles.html[Rules for Capitalization in Titles of Articles], Your Dictionary


== Contractions

pass:[<!-- vale Google.We = NO -->]

Do not use link:https://en.wikipedia.org/wiki/Contraction_%28grammar%29#English[contractions], such as _don't_ or _we're_.

====
_Do not_ write contractions, _we are_ particular about that.
====

pass:[<!-- vale Google.We = YES -->]

pass:[<!-- vale Vaadin.Abbr = NO -->]


== Emphasis Styles

Always use the emphasis styles, such as
`+++[+++classname+++]#+++ClassName+++#+++` emphasis for class names and
`+++[+++methodname+++]#+++methodName()+++#+++` for methods.

.Custom emphasis styles
[%header, cols="2,4,2"]
|====
|Style Element | AsciiDoc Example Code | Result
|Class Names | `+++[classname]#Component#+++` | [classname]#Component#
|Interface Names | `+++[interfacename]#EventListener#+++` | [interfacename]#EventListener#
|Method Names | `+++[methodname]#setValue()#+++` | [methodname]#setValue()#
|GUI Buttons | `+++[guibutton]#OK#+++` | [guibutton]#OK#
|GUI Labels | `+++[guilabel]#OK#+++` | [guilabel]#OK#
|File Names | `+++[filename]#readme.txt#+++` | [filename]#readme.txt#
|Other Monospace | `+++`appName`+++` | `appName`
|Key Caps | `+++kbd:[Ctrl + C]+++` | kbd:[Ctrl + C]
|Menu Choices | `+++"Help > Updates"+++` or +
`+++menu:Help[Updates]+++`| "Help > Updates"
|====

pass:[<!-- vale Vaadin.Terms = NO -->]

== Front-End, Front End, or Frontend

You should follow the following convention:

* Use frontend rather than front end (noun) and front-end (adjective).
* Use backend rather than back end (noun) and back-end (adjective).

However:

* Use server-side for adjectives such as in "server-side framework."
* Use server side for nouns such as in "Do it on the server side."
* Same for client-side.

pass:[<!-- vale Vaadin.Terms = YES -->]

=== Heading Formatting

You should not use rich formatting such as bold, italic, or monospace in headings.

[example]
====
* Using the @CssImport Annotation
* Contents of the index.html File
====


== Introductory Clauses

Always use comma after an link:https://owl.english.purdue.edu/owl/resource/607/03/[introductory clause, phrase, or word].

[example]
====
* _After a while, you can look into it._

* _Nevertheless, fields are components._

* _Meanwhile, you can use a workaround._

* _Also, make the call to the REST service._
====

== Introducing a Listing

You should use the word _follows_ or _following_ to introduce a list or code listing.
Examples are introduced with "_for example_".
The sentence should be ended with a colon (not period).

For example:

[example]
====
_For example:_

_You can use the following items:_

_It should now look as follows:_
====

_Avoid_ using the word [line-through]#like# and other similar words.


[[source.one-line-per-sentence]]
== One Line per Sentence

pass:[<!-- vale Microsoft.Adverbs = NO -->]

You should aim to write one line per sentence.
AsciiDoc does not care about line breaks, only paragraph breaks.
This helps in organizing sentences by moving a single line.
For example, in Atom you can do that with kbd:[Ctrl+Up] and kbd:[Ctrl+Down], and in VS Code with kbd:[Alt+Up] and kbd:[Alt+Down].
You can also more easily delete or comment out a sentence.
It also prevents line reflow when editing a single sentence.
The convention thus also helps in viewing documentation diffs, etc.

pass:[<!-- vale Microsoft.Adverbs = YES -->]

[source, AsciiDoc]
----
You should aim to write one line per sentence.
AsciiDoc does not care about line breaks, only paragraph breaks.
This helps in organizing sentences simply by moving one line.
For example, in Atom you can do that with kbd:[Ctrl+Up] and kbd:[Ctrl+Down], and in VS Code with kbd:[Alt+Up] and kbd:[Alt+Down].
You can also more easily delete or outcomment a sentence.
It also prevents line reflow when editing a single sentence.
The convention thus also helps in viewing documentation diffs, etc.

You should also aim to keep sentences short, to fit one line each.
Shorter sentences make text easier to read.
It is not a big problem if some lines are longer – it is just a guideline.
----

You should also aim to keep sentences short, to fit one line each.
Shorter sentences make text easier to read.
It is not a problem if some lines are longer; it is just a guideline.

In Atom, you can press kbd:[Ctrl+Alt+Q] to rewrap the current paragraph or
selection.

== Lists

Lists should begin with a colon (:) after an introductory clause.
If there are more than two items, you should use link:https://en.wikipedia.org/wiki/Serial_comma[serial comma] (or Oxford comma) before the conjunction.

[example]
====
_Vaadin has three kinds of components: fields, layouts, and other components._
====

Usually, if the items require an article (the, a, an), it should only be for the first item, unless emphasis is needed.


== Method Names

Method names should have empty parentheses in the end to denote that they are methods.
Parameter types should not be listed for methods, unless it is especially necessary to indicate the specific version of a method.
Also, you can give a parameter in cases such as the following:

[example]
====
Call [methodname]#setEnabled(false)# to disable it.
====

== Plurals

* _Data_ is singular, http://www.theguardian.com/news/datablog/2010/jul/16/data-plural-singular[not plural].

== Product Names

Product names, such as List Box, should be capitalized like names normally are, and not as class names.
Class name can be used if specifically referring to class, such as "[classname]#ListBox# extends [classname]#ListBoxBase#".
That should not, however, be used in component documentation, which should be language agnostic, neither in Java or JavaScript.


== Screenshots

Every page should have at least one screenshot.
There should be one at least in an introduction or overview.

You should take screenshots should as small as possible, so that writing is not too small in the result that is typically 640 pixels wide.
However, screenshots should have as high resolution as possible, so if it is possible to zoom, zoom should be used.

=== Vaadin Versions

pass:[<!-- vale Vaadin.Versions = NO -->]

Do not use "Vaadin 14" or other Vaadin version number notes in text.
Rather use the `[role="since:com.vaadin:vaadin@V19"]` tag to indicate versions.

pass:[<!-- vale Vaadin.Versions = YES -->]

== Latin Abbreviations

Do not use the following Latin abbreviations, but rather write them in English:

pass:[<!-- vale Vaadin.OneSentencePerLine = NO -->]

e.g.::
Rather use expression such as _such as_, _for example_, or _for instance_.
+
Note that _for example_ http://www.myenglishteacher.net/forexample.html[always requires] surrounding commas, while _such as_ only requires preceding comma when it is used in the beginning of a restrictive clause.
+
[example]
====
* You may find, _for example_, JSF or Flash more suitable for such purposes.

* _For example_, consider that you have the following composite class.

* You may find frameworks _such as_ JSF or Flash more suitable for such purposes.

* Some frameworks, _such as_ JSF or Flash, can be more suitable for such purposes.
====

i.e.::
  Rather use "_that is_", surrounded with commas.
+
[example]
====
The parameter is the class name of the widget set, that is, without
the extension.
====

etc.::
  This abbreviation is sometimes fine to use, but you are nevertheless encouraged to use expressions such as _and so forth_. If used, it should be preceded by comma and followed by period.
+
[example]
====
* You would normally implement some views, _etc_.

* You would normally implement some views, _and so forth_.
====

pass:[<!-- vale Vaadin.OneSentencePerLine = YES -->]


== Voice

TODO

== Words

pass:[<!-- vale Vale.Spelling = NO -->]

* Use _space key_ rather than spacekey. (Note that space key is a generic name and should be lower case)

pass:[<!-- vale Vale.Spelling = YES -->]


=== Other Preferred Terms

pass:[<!-- vale Vale.Spelling = NO -->]
pass:[<!-- vale Vale.Terms = NO -->]
pass:[<!-- vale Vaadin.Terms = NO -->]
pass:[<!-- vale Vaadin.Abbr = NO -->]
pass:[<!-- vale Microsoft.Wordiness = NO -->]

* Application over app
* Asynchronous over async
* Overlay over dropdown
* Time frame over timeframe
* Repository over repo
* npm over NPM
* divider over separator

pass:[<!-- vale Vale.Spelling = YES -->]
pass:[<!-- vale Vale.Terms = YES -->]
pass:[<!-- vale Vaadin.Terms = YES -->]
pass:[<!-- vale Vaadin.Abbr = YES -->]
pass:[<!-- vale Microsoft.Wordiness = NO -->]
