---
title: Submitting Documentation
order: 110
layout: page
---

= Submitting Documentation

To submit additions or corrections to Vaadin documentation, you need to create a pull request in the https://github.com/vaadin/docs[Vaadin Docs GitHub repository].

See <<../../contributing/overview#, Contributing to Projects>> for general instructions on contributing to Vaadin.
You should separate enhancements, fixes, and new features into different pull requests.
Check your changes for basic style violations.


== Making a Pull Request

To submit a contribution, you need to create a feature branch and push that for review.

=== Contributors

As a contributor, you need to:

. Fork the https://github.com/vaadin/docs[`https://github.com/vaadin/docs`] repository in GitHub.
. Clone it locally to edit it.
+
[source,terminal]
----
git clone https://github.com/vaadin/docs.git
----

. Make a new branch for the improvements.
+
[source,terminal]
----
git checkout -b my-feature-branch
----

. Make the changes.
+
[source,terminal]
----
git add [files]
git commit -m "Fixed several typos in Flow documentation"
----

. Push the changes to the branch in your forked repository.
+
[source,terminal]
----
git push --set-upstream origin submitting-to-docs
----

. Create a pull request in the Docs repository.
.. Open the your fork repository page at GitHub in browser.
.. Your change should show there.
+
Click [guibutton]#Compare & pull request#.
.. In the *Open a pull request* form, enter a title for the PR, an optional comment, and click [guibutton]#Create pull request#.
. Make and push fixes requested in the review.
+
Note that you do not need to set the upstream again, but can just `git push` the changes.
+
[source,terminal]
----
git add ...
git commit -m "Fixes from review"
git push
----

=== Vaadin Developers

Vaadin developers with write access to the Docs repository should (like above):

. Clone the https://github.com/vaadin/docs[`https://github.com/vaadin/docs`] repository to edit it.
. Make a new branch for the improvements.
. Make the changes.
** Preview locally while writing.
. Push the changes to the new branch in the Docs repository.
. Create a pull request in the Docs repository.
.. Open the https://github.com/vaadin/docs[Docs repository page] in browser.
.. Your change should show there.
+
Click [guibutton]#Compare & pull request#.
.. In the *Open a pull request* form, enter a title for the PR, an optional comment, and click [guibutton]#Create pull request#.
. Add reviewers
** Review in the development team.
** Component code examples (TypeScript and Java) need to be approved by `tomivirkki`, `DiegoCardoso`, or `yuriy-fix`.
** Can add `jouni` for documentation style review, or ask to do separately outside the development time box.
** No dedicated proofreader is currently available, but `jouni` can be asked for review.
. Make fixes requested in the review.
. Merge the PR by yourself or have the team lead or main author do it.

== Labeling

A pull request is automatically labeled with *AsciiDoc*, *Java*, and *TypeScript* according to the files included in the pull request.
Please check that the action has set the labels correctly.
Once each content type has been reviewed, the labels should be changed to *AsciiDoc OK*, *Java OK*, and *TypeScript OK*, respectively.
This enables having multiple reviewers with different tasks.

== Requirements for Merging

Merging a pull request has the following requirements:

* Labels *AsciiDoc*, *Java*, and *TypeScript* must have been resolved to *AsciiDoc OK*, *Java OK*, and *TypeScript OK*, respectively.
* The PR must have been accepted in review (admin can merge at any time if the above labels are OK).
* Deployment preview build must finish successfully.
* You must have signed the Contributor License Agreement.

The following requirements are optional and not enforced:

* Vale checks are successful

== Merging

For contributions, the reviewer merges the pull request once it has been approved.

Vaadin developers with write access to the repository are able to merge their own pull request once it is reviewed and all checks are successful.
A reviewer should not merge the PR, unless it is obvious that the author does not have more upcoming additions.
This gives the possibility to get comments for new documentation, while keeping on writing it.
