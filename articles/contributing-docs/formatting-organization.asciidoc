---
title: Formatting and Organization
order: 30
layout: page
---

= Formatting and Organization
:experimental:

== Introduction

This article describes the general structure of product or feature
documentation.
It gives a typical outline, give some examples, which you
can use as templates, and list of _aspects_ to consider when documenting product features.

Perhaps the most challenging task for a writer is to think what to write.
Even when you know the product itself in detail, documentation is more than merely describing it.

A reader first wants to see if the product is even useful for his or her purposes.
Hence, describing the purpose and various uses of the product is the most important task, and should be right at the beginning.

The following kind of structure is recommended:

. Introduction
. Getting Started
. Basic use
. Features, components, and sub-components
. Special use cases

The same structure can be used on a large scale for the entire documentation, but it should be applicable to smaller units in a similar way.
Just as a book requires an introduction or overview, so does a chapter, a section, and a sub-section.
At the smallest level, the introduction can be a paragraph or just a sentence.

== Getting Started with Writing a New Section

The first thing you need to do when you write new documentation is to decide where it is going to go.
The next step is to create the new article or section.

=== File Organization

The Vaadin Docs repository has the following basic organization:

----
articles
├── guide              Get Started
├── flow               Flow
├── fusion             Fusion
├── ds                 Design System
├── ce                 Collaboration Engine
└── tools
    ├── designer       Vaadin Designer
    ├── mpr            Multiplatform Runtime
    └── testbench      Vaadin TestBench
----

These form the top-level _product menu_ (except for the general _Get Started_ section).
Each product has its own menu, with articles and sub-sections (folders).

Each AsciiDoc file compiles to a page in the documentation site.
When compiled to PDF or to the print edition, it becomes a section in the book.

.PDF Edition Planned
[NOTE]
Vaadin Docs is currently only compiled for the website.
A PDF edition, which could also be printed as a book, is planned.
The PDF edition may bring extra requirements for the document structure, file naming, IDs, and cross-references.

=== Sections

A section shows as a folder in the menu.
Its source files are contained in a file system folder.
The folder must have an [filename]#index.asciidoc# file that defines the section title and menu order.

----
some-section
    ├── index.asciidoc             Section index (contains title and order)
    ├── overview.asciidoc          Section overview
    ├── some-article.asciidoc
    ├── another.asciidoc
    └── sub-section                A sub-section (folder)
        ├── index.asciidoc         Sub-section index
        ├── overview.asciidoc      Sub-section overview
        └── some-article.asciidoc
----

Most sections should have an overview that gives a short introduction to the topic of the section and an overview of the articles or sub-sections.

The index file may also have content, which is displayed if the section item is clicked and expanded.
That is the case for tabbed pages, where the content of the default tab comes from the index file.

=== Menu Header

Every AsciiDoc file to be rendered as a section, a page, or tab must have a _header block_.
It is used for building the menu in the documentation website.

----
---
title: Title of the article
order: 4
layout: page
---
----

`title`::
The title to be displayed in the menu.
The title should be same as the title in the article, but can be a shortened version to keep the menu more tidy.

`order`::
Order number in the menu.
If articles are reorganized, the order numbers may also need to be reorganized.
It is a good practice to make them spaced by 10 or 100, so that can add articles without changing the number in other articles.

`layout`::
The layout can be either `page` or `tabbed-page`.
In a tabbed page, the sub-articles are displayed in tabs rather than in the menu.
The default tab content comes from the `index.asciidoc`.

`tab-title`::
Sets the tab title in `tabbed-page` pages.
It should be short.

=== Author

Some articles may need to have author displayed.
Authors can mark themselves after the section title with:

----
 [.author]
 [name]#Marko Gr&ouml;nroos# <magi@vaadin.com>
----

For section, this should be in the overview.

Note that for non-ASCII letters, you should use HTML character entity markup.

=== Summary

A basic new section file would be as follows:

----
---
title: Title of the section
order: 4
layout: page
---

[[thechapter.thefeature]]
= Fine Feature

[.author]
[name]#Marko Gr&ouml;nroos# <magi@vaadin.com>

The Fine Feature is a feature of a feature...

[[thechapter.thefeature.basic-use]]
== Basic Use

...
----

[[introduction2]]
== Writing an Introduction

An introduction or overview is the most important part of any documentation.
It gives the reasons to use the product: why would you want to use it?
It can elaborate on this question, by considering major use cases.

Every section and sub-section should also have an introduction.
In small sections, it can be just a single paragraph.
It should come after the section title, and not as a separate sub-section.

An introduction or overview should contain the following:

. <<introduction2.value-proposition>>
. <<introduction2.illustration>>
. <<introduction2.basic-example>>
. <<introduction2.features>>
. <<introduction2.limitations>>

[[introduction2.value-proposition]]
=== Value Proposition

A https://en.wikipedia.org/wiki/Value_proposition[value proposition] is one sentence or a short paragraph (2 to 5 sentences) describing:

* What the product is
* For whom
* For what purpose
** Purpose with regards to usability, documentation, efficiency, etc.
* How it's better than other products.
** Allows integration, privacy, etc.

The basic pattern is:
[example]
====
Vaadin <__Thing__> is a <__category__> for <__an important purpose__>.
====

For example:

[example]
====
Text Field is one of the most commonly used user interface components. It is a _Field_ component that allows entering and editing textual values using the keyboard. You can parse the user input flexibly and format the visible text.
====

[[introduction2.illustration]]
=== Illustration

An illustration gives a visual overview of the product.
It can either be a screenshot or a diagram.
Illustrations should have a short caption that describes the content.

[example]
====
The development toolchain is illustrated in <<figure.mychapter.mysection.toolchain>>.

[[figure.mychapter.mysection.toolchain]]
.Development Toolchain and Process
image::img/toolchain-lo.png[]
====

The ID of a figure should be dot-separated according to the ID structure of the
section and be unique.
The ID should be prefixed with “`figure.`” to distinguish it from other IDs.

Figures can be referenced from text, although it is not necessary for the first image in the overview.

----
  The development toolchain is illustrated in <<figure.mychapter.mysection.toolchain>>.

  [[figure.mychapter.mysection.toolchain]]
  .Development Toolchain and Process
  image::img/toolchain-lo.png[]
----

Illustrations should be stored in a `images` sub-folder under the section folder.
Sources for diagrams should be in an `drawings` sub-folder.

[[introduction2.basic-example]]
=== Tasks and Basic Example

A basic example should cover a typical use case with minimal number of lines.
Such an example can be introduced with a brief description of the tasks involved.

[example]
====
You create a Thing by giving it a description.
Before adding it to a layout, you need to configure it.

For example:

pass:[<!-- vale Vaadin.SourceCode = NO -->]

[source,java]
----
  Thing thing = new Thing("This is a Thing");
  thing.setConfiguration("Diidaa");
  layout.addComponent(thing);
----

pass:[<!-- vale Vaadin.SourceCode = YES -->]

// TODO Broken link to image, would need an image
// The result is shown in <<figure.some-image, "Using the Thing">>.
====

// TODO
// If the illustration is a basic screenshot, the basic example should produce the screenshot.
// The screenshot should be referenced verbally in the text.

[[introduction2.features]]
=== Features

Give a compact list of the most essential features, between around 4 to 10.
In chapter overviews for major products, the list can be a bullet-point list, but if it is smaller section, a paragraph or two is better.

====
*Thing* can have an input prompt and it supports clearing the input programmatically.
You can listen for text changes while they are being typed, not just when the user submits the form.
====

You should deal with each feature so introduced in more depth later in the text.

[[introduction2.limitations]]
=== Limitations (optional)

Limitations are almost as important as the features; readers are accustomed to making trade-offs and even expect that, so it is good to help them with it.
By acknowledging the limitations, you also state that you are aware of them, care about the reader, and do your best to remove them in the future.

====
*Thing* allows editing a single line of plain text. For multi-line editing, you can use Text Area, and to allow editing formatted text, you can use *RichTextArea*.
====

== Aspects

The following is a list of typical topics that you can cover:

* How does it do it (if implementation is relevant)
* Complexity and performance
* Meaning of the terminology
* Appearance in the user interface
* Design alternatives
* Use cases
* Methods of user interaction with the feature
* Related features
* Inheritance and (re)implementation
* Styling
* Security
* Common use patterns
* Internationalization

// from original formatting.asciidoc

== Formatting Vaadin Documentation With AsciiDoc

[[source.one-line-per-sentence]]
=== One Line per Sentence

pass:[<!-- vale Microsoft.Adverbs = NO -->]

You should aim to write one line per sentence. +
AsciiDoc does not care about line breaks, only paragraph breaks.

This helps in reorganizing text by moving sentences around as a single line. +
For example, you can do this in Atom with kbd:[Ctrl+Up] and kbd:[Ctrl+Down]; +
and in VS Code with kbd:[Alt+Up] and kbd:[Alt+Down].

You can also more easily delete or comment out a sentence.

It also prevents line reflow when editing a single sentence.
This facilitates viewing documentation diffs, and so on.

pass:[<!-- vale Microsoft.Adverbs = YES -->]

[source, AsciiDoc]
----
You should aim to write one line per sentence. +
AsciiDoc does not care about line breaks, only paragraph breaks.

This helps in reorganizing text by moving sentences around as a single line. +
For example, you can do this in Atom with kbd:[Ctrl+Up] and kbd:[Ctrl+Down]; +
and in VS Code with kbd:[Alt+Up] and kbd:[Alt+Down].

You can also more easily delete or comment out a sentence.

It also prevents line reflow when editing a single sentence.
This facilitates viewing documentation diffs, and so on.
----
It is also a good idea to keep sentences short, so that they fit one line each. +
Shorter sentences make text easier to read. +

In Atom, you can press kbd:[Ctrl+Alt+Q] to rewrap the current paragraph or
selection.

[[xrefs]]
=== Cross-References

You should always try to make cross-references to relevant related articles, and between corresponding articles in Flow and Fusion. +
The validity of cross-references is checked during Docs compilation, and reported in the test builds at GitHub.

[[xrefs.within-a-page]]
==== Within a Page

If you want to refer to a section or figure, it needs an ID. +
IDs should contain only lowercase letters, numbers, hyphens, and dots (periods).
You should apply a dot-separated hierarchical order.

For example:

[source, AsciiDoc]
----
[[xrefs]]
== Cross-References

[[xrefs.within-a-page]]
=== Within a Page
----

This section can be referenced with:

====
[source, AsciiDoc]
----
See <<xrefs.within-a-page>> for more information.
----

See <<xrefs.within-a-page>> for more information.
====

==== Between Pages
Cross-references between pages need a path to the page. +
For pages in the same folder or product, it is most convenient to use relative paths.

The file reference must be terminated with the hash character (+++#+++), which can be followed by a sub-target within the page. +
The reference also needs to include the title of the reference article or section.

For example:

====
[source, AsciiDoc]
----
See <<style#, Style Guidelines>> for more information.
See <<style#source.one-line-per-sentence, One Line per Sentence>> for even more detailed information.
See <<../contributing/overview#, Contributing to Projects>> for general information about contributing.
----

See <<formatting-organization#, Style Guidelines>> for more information.
See <<formatting-organization#source.one-line-per-sentence, One Line per Sentence>> for even more detailed information.
See <<../contributing/overview#, Contributing to Projects>> for general information about contributing.
====

You can have relative references to other folders, like in the above example.
References to a menu section should be to an `overview` article or equivalent.

.Update headings in cross-references
[NOTE]
If you change any heading text, you have the responsibility to change the cross-reference texts elsewhere in the documentation.

===== Absolute Paths

You can also use absolute paths using the `+++{articles}+++` variable.

====
[source, AsciiDoc]
----
See <<{articles}/contributing-docs/style#, Style Guidelines>>.
----

See <<{articles}/contributing-docs/style#, Style Guidelines>>.
====

=== Lists

AsciiDoc has three types of lists: unordered (bullet) lists, ordered (numbered) lists, and variable lists.

==== Unordered Lists

Unordered lists show as bullet points.

====
[source, AsciiDoc]
----
* Item 1
* Item 2
----
* Item 1
* Item 2
====

==== Numbered Lists

Numbered lists have a sequence 1, 2, ..., and hierarchically a, b, c, ...

====
[source, AsciiDoc]
----
. Item 1
. Item 2
----
. Item 1
. Item 2
====

==== Variable Lists

====
[source, AsciiDoc]
----
`someVariable`::
  This is the description of the item.
`anotherVariable`::
  This is the description of the other item.
----
`someVariable`::
This is the description of the item.
`anotherVariable`::
This is the description of the other item.
====


=== Images

==== Image Basics

Images include screenshots and diagrams.
They should always have a caption and an ID, unless inside a step-by-step list.
The ID should follow the ID hierarchy of the containing section.
It should be prefixed with `figure.`.
Images can be referenced from text.

[source, AsciiDoc]
----
<<figure.images.example>> shows the result.

[[figure.images.example]]
.An example of an image
image::images/mymodule-example.png[width=70%, scaledwidth=100%]
----

It would render as:

[subs="normal"]
====
<<figure.images.example>> shows the result.

[[figure.images.example]]
.An example of an image
image::img/vaadin-logo.png[width=50%, scaledwidth=60%]
====

Images should be located under an [filename]#images# sub-folder.

==== Inline Images

You can display images also inline, without an image frame and caption.
This is recommended in task lists with screenshots, and in other cases where a caption is not needed and an image frame might be distracting.
To do so, have only one colon in `image:`.

For example:

[source, AsciiDoc]
----
. Click the button.
. The image should now look as follows:
image:images/example-image.png[width=30%]
----

// This doesn't work for some reason.
// It does make the other error around line 200 go away.
It would render as:

====

pass:[<!-- vale Vale.Terms = NO -->]

. Click the button.
. The image should now look as follows:
image:img/vaadin-logo.png[width=30%]

pass:[<!-- vale Vale.Terms = YES -->]

====

==== Image Captions

An image caption should not be in title case.

References to images use the caption text in the reference.
However, it is used differently in Vaadin Docs and the print edition.

The website shows it in the link.

[subs="normal"]
====
See the result in <<figure.images.example>>.
====

In print or PDF version, the reference includes "_Figure x.x <caption>_", with the chapter number and figure number in the chapter.

[example]
====
See the result in Figure 1.1, "An example of an image".
====

==== Requirements for Illustrations

Illustrations have the following requirements:

_Always use white background_::
Paper is white, and some of the documentation is exported as PDF or in a print edition.
When taking screenshots, use a white background when necessary.
Make sure the white background does not get transparent when taking screenshots.

_Do not use transparency in images_::
PNG and GIF images allow transparency.
While they may or may not show fine in the website, in PDF the transparent parts are rendered as black.
This makes them ugly, and therefore unusable.

_Use high resolution for screenshots_::
Otherwise, pixels show up ugly when the images are scaled.
You can use the browser zoom feature to enlarge Vaadin UIs.
Scale the images as described in <<contributing.formatting.image.scaling>>.

_Minimize screenshot content_::
Space is precious in the print edition.
Select only the relevant area for the screenshot.
Sometimes, adding some cut context may clarify the screenshot.
Some views or dialog windows can be overly complex or large.
You should consider simplifying them with an image editor.
You can use PhotoShop or Gimp or whatever.

_Fonts must not be too small_::
The text column in the print edition is 82 mm (3.23 inches) wide.
Height of the normal font is 2 mm or 6 points (1/72").
That means around 1/40 of the text column width.
Text in diagrams should not be much smaller than this.
If text is less than half of this, it is unreadable.
+
For example, if an image is 800 pixels wide and scaled as 100%, the normal font should be 20 pixels high.
Text would have to be at least 10 pixels high, and anything smaller would anyhow be blurry.

[[contributing.formatting.image.scaling]]
==== Image Scaling

Images are displayed in at least three formats: website, pocket-book sized print edition, and large size PDF.
There could also be an ePub format.
All images need to be scaled for all these resolutions.

AsciiDoc has two scaling parameters: `width` and `scaledwidth`.

 image::img/mymodule[width=70%]

`width` (optional)::
This parameter is used for the HTML web edition in Vaadin Docs.
The images are automatically limited to the maximum width of the text area.

[[code]]
=== Code Examples

You can display program or other text formatted in monospace letters in a box separated with `----`.

====
For example:
----
  ----
  This is some kind of {code} text.
  ----
----

It would render as:

----
This is some kind of {code} text.
----
====

[[code.file-types]]
==== Source File Types

AsciiDoc supports syntax highlighting for various languages.

====
For example:

pass:[<!-- vale Vaadin.SourceCode = NO -->]

----
  [source, java]
  ----
  Button button = new Button("My Button");
  ----
----

pass:[<!-- vale Vaadin.SourceCode = YES -->]

It would render as:

[source, java]
----
Button button = new Button("My Button");
----
====

[[code.include]]
==== Use Include for Java and TypeScript Code

You should write the code examples in Java or TypeScript files that are compiled.
Some technical cases, where you can't use compiled examples, require writing <<code.inline, inline examples>>.

Java and TypeScript examples are located in the source tree under [filename]#src/main/java/com/vaadin/demo# for Java and `frontend/demo` for TypeScript.

The source tree is organized as follows:

----
docs/
├── articles/           AsciiDoc content
├── frontend/
│   └── demo/           TypeScript examples
│       ├── component/  Vaadin component examples in TypeScript
│       ├── domain/     General definitions <1>
│       ├── fusion/     TypeScript UI examples
│       └── flow/       TypeScript counterparts of Java examples <2>
└── src/
    └── main/java/com/vaadin/demo/ Java examples
        ├── component/  Vaadin component examples in Java
        ├── domain/     General definitions <1>
        ├── flow/       Java UI examples
        └── fusion/     Java backends for Fusion TypeScript examples
----
<1> The general definitions include things like domain objects for example data used in the examples.
<2> See <<code.single.typescript-counterparts, Live Java examples require TypeScript counterpart>>.

Use `include::` to include them in code blocks as follows:

[source, AsciiDoc]
----
  [source,java]
  ----
  include::{root}/src/main/java/com/vaadin/demo/flow/application/events/EventsLambda.java[tags=snippet,indent=0]
  ----
----

The `tags` parameter specifies a tag from where to extract the source code shown in the listing.

The source code has a class with a constructor as follows:

[source]
----
public EventsLambda() {
    // tag::snippet[]
    Button button = new Button("Click me!",
      event -> event.getSource().setText("Clicked!!!"));
    add(button);
    // end::snippet[]
}
----

The above example shows as follows:

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/flow/application/events/EventsLambda.java[tags=snippet,indent=0]
----

==== Listing Multiple Files in a Code Box

You can have multiple files in a code box if you specify them inside an `example` style block.
This is a good practice for showing a UI source code example, while having a data model or resource files available.

====
[source, AsciiDoc]
----
  [.example]
  --
  [source,java]
  ----
  include::{root}/src/main/java/com/vaadin/demo/flow/application/events/EventsLambda.java[tags=snippet,indent=0]
  ----

  [source,java]
  ----
  include::{root}/src/main/java/com/vaadin/demo/flow/application/events/EventsAnon.java[tags=snippet,indent=0]
  ----
  --
----

The above looks as follows:

[.example]
--
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/flow/application/events/EventsLambda.java[tags=snippet,indent=0]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/flow/application/events/EventsAnon.java[tags=snippet,indent=0]
----
--
====

[[code.include.parameters]]
===== Include Parameters

The `include::` statement has the following parameters:

`render`::
Renders a live example, as described in <<code.live, Live Examples>>.
+
A live example of a Java class requires that it has a [classname]#DemoExporter# implementation as a static subclass, and that there is a TypeScript counterpart that includes the used components, as described in <<code.single.typescript-counterparts, Live Java Examples Require TypeScript Counterpart>>.

`hidden`::
Hides the example.
This is necessary for TypeScript counterparts of Java examples, which are only included to load component styles, as described in <<code.single.typescript-counterparts, Live Java Examples Require TypeScript Counterpart>>.

`tags=<name>`::
Specifies tags for extracting a source code snippets.
You can give multiple tags separated by semicolons or `tags=*` to show all tag content.
For a convention, you should use `snippet` for a single snippet in a source file.
+
The tags in source files have format `tag::<name>[]` for a start tag and `end::<name>[]` for an end tag.
You can have the same tag multiple times in a file, in which case the their content is concatenated.
The tags must be enclosed in code comments: `//` or `/* ... */` in Java and TypeScript and `<!-- ... -->` in HTML in TypeScript.

`indent=<spaces>`::
Specifies the indentation of the code inside the listing.
Without the parameter, the indentation in the source listing is used.
You should use `indent=0`.

`group=<name>`::
Groups the file under a group tab.
You should use this for language groups, such as `group=Java` and `group=TypeScript` in corresponding include statements.
You should not use it if you only have a single group, as it would show an unnecessary tab.

[[code.live]]
==== Live Examples

An example is rendered live if the `include::` statement contains a `render` attribute.
You also need to contain the example in a `[.example]` style block.
The optional `.show-code` style shows the code automatically.
Otherwise the reader needs to click to open it.

====
[source, AsciiDoc]
----
  [.example]
  --
  Here is optional text to describe the Java example.
  You could mention things like the [classname]#Button# class.

  [source,java]
  ----
  include::{root}/src/main/java/com/vaadin/demo/flow/application/events/EventsBasic.java[render,tags=snippet,indent=0,group=Java]
  ----

  Here is optional text to describe the TypeScript example.
  You could mention things like the [methodname]#render()# method.

  [source,typescript]
  ----
  include::{root}/frontend/demo/flow/application/events/events-basic.ts[render, indent=0, group=TypeScript]
  ----
  --
----

A Java class used to render a live example requires an inner static demo exporter implementation class, such as in the following:

[source, Java]
----
@Route("application-events-lambda")
public class EventsLambda extends Div {
    ...

    public static class Exporter extends DemoExporter<EventsLambda> { // hidden-source-line
    } // hidden-source-line
}
----

The full listing does not show the lines marked with `// hidden-source-line` when you toggle *Expand code*.

The above example renders as follows:

[.example]
--
Here is optional text to describe the Java example.
You could mention things like the [classname]#Button# class.

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/flow/application/events/EventsBasic.java[render,tags=snippet,indent=0,group=Java]
----

Here is optional text to describe the TypeScript example.
You could mention things like the [methodname]#render()# method.

[source,typescript]
----
include::{root}/frontend/demo/flow/application/events/events-basic.ts[render, tags=snippet, indent=0, group=TypeScript]
----
--
====

===== Example Box Styles

As shown above, an example box shows live and multi-language examples with source code.
The following styles control its behaviour:

`example`::
The basic example box style.

`show-code`::
Automatically shows the code listing.
It is by default initially closed.
+
[source, AsciiDoc]
----
[.example.show-code]
----

`render-only`::
Do not show code listing at all.
+
[source, AsciiDoc]
----
[.example.render-only]
----
+
Notice that this does not disable the language group tabs.
An example box shows them if the include statement has the `group` parameter.


==== Single-Language Examples

You can have examples only in one language.
In such case, you should leave the `group` parameter out, as otherwise the example has an unnecessary group tab.

[[code.single.typescript-counterparts]]
===== Live Java Examples Require TypeScript Counterpart

Styles for any components that are used in an example are only loaded for TypeScript examples.
You therefore always need a TypeScript counterpart for any Java example.
Otherwise, the components are not styled and the example appears broken.
The TypeScript example does not need to be functional, just contain the needed components.

The example should not have a `group` parameter, and the TypeScript example should have parameter `hidden` instead of `render`.

[source, AsciiDoc]
----
  [.example.show-code]
  --
  [source,java]
  ----
  include::{root}/src/main/java/com/vaadin/demo/flow/application/events/EventsBasic.java[render,tags=snippet,indent=0,group=Java]
  ----

  [source,typescript]
  ----
  include::{root}/frontend/demo/flow/application/events/events-basic.ts[hidden, indent=0, group=TypeScript]
  ----
  --
----

The above renders, with the TypeScript code hidden, as follows:

[.example.show-code]
--
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/flow/application/events/EventsBasic.java[render,tags=snippet,indent=0,group=Java]
----

[source,typescript]
----
include::{root}/frontend/demo/flow/application/events/events-basic.ts[hidden, indent=0, group=TypeScript]
----
--

[[code.inline]]
=== Inline Examples

Certain technical examples must be unique, so it is not possible to use `include::`, described later. +
For example, examples of Java annotations like [classname]#@Theme# that can only be defined for a single class in an application cannot be inline. +
Java examples in Vaadin Docs run in a single Vaadin application, so they cannot have more unique definitions.

==== Code Formatting Conventions

You should keep line length at maximum of around 63 characters.

=== AsciiDoc Resources

* http://asciidoctor.org/docs/asciidoc-syntax-quick-reference/[AsciiDoc Syntax Quick Reference]

* http://asciidoctor.org/docs/asciidoc-writers-guide/[AsciiDoc Writer's Guide]

* http://asciidoctor.org/docs/user-manual/[AsciiDoctor Manual]

// From original style-guidelines.asciidoc

== Screenshots

Every page should have at least one screenshot.
There should be one at least in an introduction or overview.

You should make screenshots as small as possible, while making sure that the text is readable in the result, which is typically 640 pixels wide.
However, screenshots should have as high a resolution as possible, to facilitate zooming.

