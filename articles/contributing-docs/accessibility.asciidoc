---
title: Accessibility
order: 60
layout: page
---

= Accessibility
:experimental:

It’s important that we should remember at all times that not everybody reads web pages in the same way.
For this reason, web content needs to be structured and formatted in a way that is easily understood by screen readers.

What does this mean in practice?
Here are a few principles that are worth bearing in mind.
It will not always be possible to follow these principles absolutely but, nevertheless, they are good aims.

pass:[<!-- vale Vale.Repetition = NO -->]

Spell out words like _and_ and _plus_, rather than using symbols such as “&” and “+”.

pass:[<!-- vale Vale.Repetition = YES -->]

Screen readers may vary in how they interpret such symbols.

Do not use hard carriage returns and tab characters to format sentences and paragraphs.
These may not work as intended when windows are resized or text is enlarged.

Avoid using terms like _on the left_, _above_ or _below_ to describe the location of something on the screen; these terms are not useful for screen readers.

Graphics can be very useful as a way of conveying information quickly and succinctly.
However, we need to be conscious that not everybody will be able to see graphics clearly or at all.

For that reason, we should also employ alternative ways of communicating the information shown in any given graphic.
Take care that a reader can obtain the same information in either way &ndash; text or graphic.

As much as possible, be guided by these principles:

== Use Short, Simple Sentences
Consider this example:

[example]
====
Vaadin components do support client-side validation to increase the responsiveness of the application, but the developer should be aware that these should be used purely for convenience, since they are easily circumvented in the browser.
====

This could be made more easily digestible as follows:

[example]
====
Vaadin components support client-side validation to increase the responsiveness of the application.
However, as a developer, you use this only for convenience, as it is easy to circumvent client-side validation in the browser.
====

== Keep the Verb near the Subject
Try not to separate the subject from the verb with too many words. +
Consider the following sentence:

[example]
====
Data coming from a data store (such as a database) and inserted as HTML into DOM elements (for example, setting innerHTML for elements or using HTML mode in component captions) should also be escaped.
====

This could be improved as follows:

[example]
====
If you insert data from a data store into DOM elements as HTML, take care to escape the data first.
This would be necessary if, for example, you were using data from a database to set innerHTML, or using HTML mode in component captions.
====

== One Verb in a Sentence
It is a good aim to try to have just one verb in each sentence.
However, where there is a strong logical connection between clauses (such as indicated by words like “while”, “when”, “because”, “so”, “since” and “although”), it may be more appropriate to keep multiple verbs in a sentence.

The request is not available in background threads, so the isAuthenticated() method shows authentication state only in Vaadin request processing threads, otherwise it would always return false.

This could be improved as follows:

The request is not available in background threads.
For this reason, the isAuthenticated() method shows the authentication state only in Vaadin request processing threads.
In other cases, it returns false.

== One Sentence in a Line
Try to have just one sentence in each line.

For instance, if the developer sets a component to be disabled, this effect is set both on the server and the client. On the client, an attacker can circumvent this (attackers have full control over anything in the browser), but the server will block any attempt to interact with the component and a warning is printed to the server logs.

This could be improved as follows:

For example, if the developer sets a component to disabled, it is disabled on both the server and the client.
An attacker can circumvent this on the client, because attackers have full control over anything in the browser.
However, the server blocks any attempt to interact with the disabled component.
The server also prints a warning to the server logs.

== Parallel Language Structures
When explaining or describing things that occur in some kind of list or sequence, try to use the same, or equivalent, language structures or terminology to talk about each item in the list. For example, consider the following structure that describes a list of things:

[example]
====
The first item is… +
Next we have… +
And now we come to the last object, which is…
====

The reader can more easily see the logical structure of the description in this improved version:
[example]
====
The first item is… +
The second item is… +
The last item is…
====

