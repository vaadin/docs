---
title: Word List
order: 40
layout: page
---

= Word List
:experimental:

include::../_custom-styles.asciidoc[]

pass:[<!-- vale Vaadin.Headings = NO -->]

pass:[<!-- vale Vale.Spelling = NO -->]

== Word List and Quick Reference

== Miscellaneous Terms

=== "3D"
Abbreviation of _three dimensions_ or _three-dimensional_. +
*Not* _3-D_. +
For example:

[example]
====
The image is visible in _3D_.
The system displays a _3D_ image.
====

== A

[[word-list.a_an]]
=== "a", "an"

The choice of whether to use _a_ or _an_ depends on the *sound* of the following element, not purely on whether that element begins with a vowel.

If the *sound* of the next item is a vowel sound, use _an_;
otherwise, use _a_. +
For example:


[example]
====
_She decided to do *a* university course._ +
+++[+++_University_ begins with a consonant sound.+++]+++

_It was *an* unusual choice._ +
+++[+++_Unusual_ begins with a vowel sound.+++]+++

_We stayed in *a* hotel on the Left Bank._ +
+++[+++_Hotel_ begins with a consonant sound.+++]+++

_It was *an* honest mistake._ +
+++[+++_Honest_ begins with a vowel sound.+++]+++
====
The same principle applies to acronyms.

Decide on how the acronym is usually read &#8211; as a word or as individual letters &#8211; and select _a_ or _an_ based on the resulting initial sound. +

For example:

[example]
====
_The product comes from *a* US company._

_Send me *an* SMS when you are ready._ +
+++[+++_SMS_ is read as _ess_em_ess_, so it begins with a vowel sound.+++]+++

_He is a former member of *a* SWAT team._ +
+++[+++_SWAT_ is generally pronounced as one word &#8211; _swat_.+++]+++
====

=== "above"
Do not use _above_ to indicate the position of an item on a page.
Various devices, screen readers and browsers may position elements in different places.
Instead, use _previous_ or _earlier_.

=== "add-in"

=== "add-on"

=== “advice”

"Advice" is an uncountable noun.
For that reason, it can't be used with the indefinite article (_[line-through]#an advice#_) and it can't be plural (_[line-through]#advices#_). +
If you want to use the indefinite article, you need to introduce another word, such as _piece_ or _bit_.
For example:

[example]
====
_The developer gave me a good *piece of advice*._
====

You can use quantifier phrases such as _some_ and _a lot of_. +
For example:

[example]
====
_The user guide contains *a lot of good advice*._
====

=== "agnostic"
This term is sometimes used to indicate the absence of a dependence on some other software component, such as an operating system or platform. +
It is better to use a clearer term, such as _platform-independent_.

=== "aka"
This is an abbreviation of _also known as_.
It has its origins in police usage and, hence, conveys an inappropriate tone for software documentation.

Instead, use parentheses or the word _or_. +
For example:

[example]
====
_The company specializes in software as a service *(SaaS)*._ +
_Each instantiated object of the class has a separate copy, *or instance*._
====

=== "a.m.", "p.m."
Write these in lower case, with periods.
Insert a non-breaking space (`\&nbsp;` in AsciiDoc) between the  time in numerals and _a.m._ or _p.m._ +
For example:

[example]
====
_The meeting started at 9&ratio;15 about *a.m*._ +
_We received the email at 5&ratio;00 *p.m.* yesterday._
====

=== "alright"
Avoid using [line-through]#_alright_#. +
Instead, use _all right_.

=== "alternate", "alternative"
_Alternate_ is a verb that describes something that switches repeatedly between two states, or conveys the concept of _every other_.

_Alternative_ is a noun or an adjective that indicates two possible options. +
For example:

[example]
====
_The weather *alternated* between sunny and cloudy._

_An *alternative* to installing the software using a package manager is to download it as an AppImage._
====

=== "America"
Do not use _America_ or _American_ as synonyms for _United States_ or _US_.
In general, use _US_, as both a noun and an adjective.

[example]
====
_If you live in the *US*, contact our San Francisco support desk._

_You need to comply with *US* data protection legislation._
====

=== ampersand ("&amp;")
Do not use the ampersand character in place of _and_ in general text, unless space is limited.

=== "and&nbsp;/&nbsp;or"
Insert a non-breaking space (`\&nbsp;` in AsciiDoc) before and after  the slash ("/") character in _and&nbsp;/&nbsp;or_.

See <<style#a_to_z.slash,slash ("/")>>.

=== "anti-malware"

=== "antialiasing"

=== "antivirus"

=== "app"
Use _application_, rather than _app_.

=== "approximately"
Write this in full; do not use [line-through]#_approx_#.

=== "arabic"
Use lowercase _arabic_ to refer to the system of numerals.

[[word-list.as_if_or_like]]
=== "as if" or "like"?
Consider this sentence:

[example]
====
_It looks as if it`'s going to rain._
====

Here, the clause _it`'s going to rain_ contains a finite (complete) verb (_is going to rain_).

In this situation, we should use _as if_ to connect the two parts of the sentence.
It is not correct to say, _It looks like it`'s going to rain_, although this is a very common grammatical error.

Here is another sentence:

[example]
====
_It looks like rain._
====

Here, the noun phrase _rain_ does not contain a finite verb.
In this situation, we should use _like_ to connect the two parts of the sentence.

Another way of thinking of this is to say that _as&nbsp;if_ "expects" to be followed by a verb clause.
In contrast, the word _like_ "expects" to be followed by a noun or a noun phrase.

Some other examples:

[example]
====
_Treat the issue *as if* it were a bug._ +
+++[+++Verb clause+++]+++

_They treated me *like* a VIP._ +
+++[+++Noun phrase+++]+++
====

[[word-list.as_or_like]]
=== “as” or “like”?
_As_ "expects" to be followed by a verb clause. +
On the other hand, _like_ "expects" to be followed by a noun phrase (that is a phrase that has the grammatical function of a noun). +
For example:

[example]
====
_Edit the file *as* you would normally._ +
+++[+++Not _[line-through]#like# you would_.+++]+++

_Make the amendments *as* described below._ +
+++[+++Not _[line-through]#like# described_.+++]+++

_**As** I have already mentioned, the software is open-source._ +
+++[+++Not _[line-through]#like# I have already mentioned_.+++]+++
====

=== "as such"
_As such_ does *not* mean _for that reason_.

Instead, it means _in its role as the previously mentioned thing_. +
For example:

[example]
====
_This software is the most capable of its peer group and, *as such*, is an excellent buy._ +
+++[+++That is, _as the most capable of its peer group&hellip;_.+++]+++

_I was the chief designer on this project and, *as such*, I take full responsibility for design defects._ +
+++[+++That is, _as the chief designer&hellip;_.+++]+++
====

_As such_ is often incorrectly used in place of phrases like _so_ or _consequently_.
Here are some examples of *incorrect* usage:

[example]
====
_Developers appreciate the convenience of the toolkit and, [line-through]#as such#, it is a popular choice._ +
+++[+++Incorrect+++]+++

_The team were in a hurry to complete the project and, [line-through]#as such#, made several poor decisions._ +
+++[+++Incorrect+++]+++
====

=== "ASCII"

=== "aspect ratio"

=== "assembly language"
Use _assembly language_, not [line-through]#_assembler_#.

=== “asynchronous”
The adjective is _asynchronous_.
The adverb is _asynchronously_. +
Do not use _async_.

=== "authenticate"

=== "auto-"
No general rule exists on whether to hyphenate a word that begins with the prefix _auto-_. +
It is best to check in the dictionary.

If the word is not given either in this guide or in the Merriam-Webster online dictionary, do not invent it yourself; use another term, for example with the adverb _automatically_.

=== "autosave"
// Conflict between MS style: autosave; Vale.Spelling style: auto-save

=== “awesome”
In its literal meaning, _awesome_ is used to describe something that causes awe, a feeling of respect blended with fear or wonder.

[example]
====
_The launch of the huge rocket on a pillar of smoke and flames was an awesome sight._ +
_The enormously powerful waterfall is really an awesome spectacle._
====

In modern informal speech, _awesome_ has been diverted from its literal meaning to be a synonym for _very good_. +
Please avoid this usage in technical documentation.

== B
=== "back button"

=== "backup", "back up"
The noun and adjective are _backup_.
The verb is _to back up_.
For example:

[example]
====
_Confirm that the *backup* completed successfully._ +
+++[+++Noun+++]+++

_It is vital to have reliable *backup* procedures in place._ +
+++[+++Adjective+++]+++

_You should back up all your files regularly._ +
+++[+++Verb+++]+++

_The data is subsequently *backed up* to the cloud._ +
+++[+++Verb+++]+++
====

=== “back end”

=== "backward compatibility"
The noun is _backward compatibility_.
The adjective is _backward-compatible_.

=== "backspace"

=== "bandwidth"

=== "base64"

=== "below"
Do not use _below_ to indicate the position of an item on the screen, as different devices and browsers may position elements differently.

Consider using _later_ or _in the following_.

=== "beta"
The word _beta_ should be written in lowercase, unless it appears differently as part of a defined product name.

=== "big data"
The noun phrase is _big data_.
The adjective phrase is _big-data_.

=== "big-endian"

=== "blacklist"
Do not use the term _blacklist_.
Instead, use _deny list_. +
The opposite is _allow list_, not _whitelist_.

=== "blind"
Avoid using _blind_ in an idiomatic or metaphorical sense.

To refer to people, use, for example, _a blind person_ or _a visually impaired person_ (whichever is more accurate in the context).

See also <<word-list.color_blind,color blind>>.

=== "Bluetooth"
_Bluetooth_ is a proper noun, so it should be capitalized.

=== "Boolean"
Capitalize _Boolean_ in general use.

=== "bot"

=== “both”
"Both" is an emphatic word that applies specifically to two stated things. +
It cannot be used for more than two. +
For example:

[example]
====
_This functionality is available in both Eclipse and NetBeans._
====

It is incorrect to say, for example:

[example]
====
_This functionality is available in both Eclipse, NetBeans, and IntelliJ IDEA._
====

To apply similar emphasis to more than two things, it would be necessary to say something like:

[example]
====
_This functionality is available in all of Eclipse, NetBeans, and IntelliJ IDEA._

However, it might be more elegant to say, for example: +
_Eclipse, NetBeans, and IntelliJ IDEA all have this functionality._
====

=== "breakpoint"
// MS

=== "browsable"

=== "built-in"
The adjective is _built-in_ when it is used attributively (that is, *before* the noun that it describes). +
When it is used predicatively (that is, *after* a verb such as _be_, _seem_, _look_), the adjective phrase is _built in_.
For example:

[example]
====
_The device has a *built-in* DVD drive._ +
+++[+++The adjective is used attributively.+++]+++

_The DVD drive is *built in*._ +
+++[+++The adjective is used predicatively.+++]+++

_The device has a DVD drive *built in*._ +
+++[+++The adjective is used predicatively.+++]+++
====
//-

== C

=== "cache", "cached", "caching"

=== "callback", "call back"
The noun and adjective are _callback_. The verb is _call back_.

=== "call-out", "call out"
The noun and adjective are _call-out_. The verb is _call out_.

=== "cancel"
_canceled_, _canceling_, _cancellation_.
// MS

=== "catalog"
Use _catalog_, not _[line-through]#catalogue#_.

=== "cell phone"
Do not use [line-through]#_cell phone_#. +
Instead, use _mobile_ or _mobile phone_.

=== "cent"
The _cent_ symbol (_&cent;_) can be written as `\&cent;` in AsciiDoc.

=== "chat"
_Chat_ may refer to different activities, depending on the context. +
Use _chat_ to refer to exchanging text messages in real time, if the context makes the meaning clear. +
Use _voice chat_ to refer to communicating by voice.

=== "check"
Do not use _check_ to refer to selecting a checkbox in the user interface. +
Instead, use _select_.

=== "check mark"
In the UI, a _check mark_ is a visual indication that an item is selected.

=== "checkbox"
The spelling is _checkbox_.

Use _select_ and _clear_ to refer to user interaction with checkboxes.

=== "click"
_Click_ is both a verb and a noun. +
More-specific variants are _left-click_, _right-click_, and _double-click_ (all hyphenated). +
For example:

[example]
====
_Enter the required details and *click* [guibutton]#OK#._

_**Right-clicking** on the dropdown presents the user with more options._
====

=== “client side”
When used as a noun phrase, _client side_ has no hyphen:

[example]
====
_The validation is handled on the client side._
====

When used as an adjective phrase, it should be written with a hyphen to avoid ambiguity:

[example]
====
_Client-side processing handles the validation._
====

=== "client&nbsp;/&nbsp;server"
Use non-breaking spaces before and after the slash ("/") character.
In AsciiDoc, this would be written as `client\&nbsp;/\&nbsp;server`.

=== "cloud"

=== "codebase"
The spelling is _codebase_; not _[line-through]#code base#_.

=== colon (“:”)
The function of a colon in a sentence is to signal the beginning of an explanation or a list. +
Often, we can think of it as saying +
_and this is it&hellip;_ +
or +
_and the following is what I'm talking about&hellip;_. +
Some examples of this are:

[example]
====
_There can be only one reason he is late**:** he has missed the flight._ +
_Annabel has three valuable characteristics**:** she is clever, she is conscientious, and she is honest._ +
_On seeing the results of my work, I felt only one emotion**:** pride._
====

A colon is also commonly used to introduce a list, particularly at the end of a sentence. +
For example:

[example]
====
_The parameter can be of several types**:** integer, boolean, or string._ +
_Three cities are in the running to stage the next Olympics**:** Beijing, Chicago, and Melbourne._
====

A colon should not be used to join two full clauses outside the uses mentioned here. +
If you are looking for the right punctuation to join two clauses that have some logical relationship, consider using a <<grammar#grammar.semi-colon, semi-colon>>. +
Do not use a comma for this purpose.
(See <<grammar#grammar.comma_splice, comma splice>>.)

Vaadin uses US English in its documentation.
US usage allows a colon to be followed by a sentence beginning with a capital letter, if that sentence is the first of two or more sentences that are governed by the same colon.

[example]
====
_There may be several reasons to learn Esperanto**: I**t is completely regular, so you do not need to learn a lot of exceptions.
It is not associated with any specific country, so has no political baggage.
Finally, it is just fun to learn._
====

However, if the colon governs only one sentence, begin the sentence with a lowercase letter:

[example]
====
_I can give you one good reason to learn Esperanto**: i**t is fun to learn._
====

[[word-list.color_blind]]
=== "color-blind"
Use the term _color-blind_ only in its literal sense, to refer to a person who is unable to distinguish certain colors.

=== "combo box"

pass:[<!-- vale Vale.Spelling = NO -->]

Not _combobox_.

pass:[<!-- vale Vale.Spelling = YES -->]

=== "command line"
When it is used as a noun phrase, write _command line_.
When it is used as an adjective phrase, write _command-line_.
For example:

[example]
====
_You can invoke the tool from the command line._ +
+++[+++Noun phrase+++]+++

pass:[<!-- vale write-good.ThereIs = NO -->]
_There are several command-line options._ +
+++[+++Adjective phrase+++]+++
====

However, see <<word-list.command_line_interface,"command line interface">>

[[word-list.command_line_interface]]
=== "command line interface"
This is a common, easily recognized phrase, so it is unnecessary to hyphenate _command line_ here.

In the first reference in the document, write this as _command line interface ("CLI")_.
In subsequent occurrences, it is acceptable to write it as _CLI_.

=== "command prompt"
In the context of the command line interface, the _command prompt_  indicates the location where the user may enter a command.
Typical command prompts are "$ " (in Unix-like systems) and "C:\> " (in Windows-based systems).

=== "consist of"
This indicates that one thing is made up of one or more other things, and nothing else.
If you want to say that one thing is made up of one or more things *plus* some other things, use _include_.
For example:

[example]
====
_The course consists of six modules._ +
+++[+++In other words, there are six (and only six) modules in the course.+++]+++

_The course includes two modules on object-oriented design._ +
+++[+++In this case, the two modules on object-oriented design are just a part of the course.+++]+++
====

pass:[<!-- vale Vale.Spelling = NO -->]

=== "config"

pass:[<!-- vale Vale.Spelling = YES -->]

Avoid this as an abbreviation for _configuration_.
Spell it out in full.

=== "CPU"

=== "CSS"
It is acceptable to use _CSS_, rather than write out _cascading style sheets_ in full. +
Do not use the extension _.css_ to refer to a file type.

=== "cross-site request forgery"
On the first mention, write this as _cross-site request forgery (CSRF)_.
On subsequent mentions, _CSRF_ is sufficient.

=== "CSV"
Do not use the extension _.csv_ to refer to a file type. +
Instead, use the capitalized abbreviation _CSV_. +
For example:

[example]
====

pass:[<!-- vale Vale.Spelling = NO -->]

_You can download this as a *CSV* file._ +
+++[+++Not _a .csv file_.+++]+++

pass:[<!-- vale Vale.Spelling = YES -->]

====

== D

=== “data”
Although _data_ is, strictly speaking, a plural Latin form, the generally accepted convention is to treat it as singular. For example:

[example]
====
_We need to ensure that the data is encrypted._ +
+++[+++Not _the data are encrypted_+++]+++
====

=== "daylight saving time"

=== "decrement"
The verb _decrement_ means to decrease an integer by a specified value.
It is the opposite of _increment_.

=== definite article (“the”)

=== "deprecate"
In the context of software development, if something is _deprecated_, it means that it is *recommended* not to use this thing. +
It does not mean that it is not possible to use it.

The term _deprecated_ is often used in situations where that particular thing is scheduled to become unavailable at some point in the future.

=== "desire"
Do not use _desire_ as a synonym for _want_. +
Instead, use _want_.

=== "determinate progress bar"
A _determinate progress bar_ is a progress indicator that informs the user how much of a process has been completed, and how much remains to be done.

=== "DevOps"
An abbreviation of _development operations_.
Write it as _DevOps_.

=== "dialog"
A _dialog_ or _dialog box_ is an element of the user interface. +
A _dialogue_ is a conversation between two people.

=== "different"
Use _different from_, rather than _different than_ or _different to_.

=== "direction keys"
Do not use the term _direction keys_. +
Instead, use _arrow keys_.

=== "directory"
Use _directory_, instead of _folder_, unless there is a good reason to do otherwise. +
One such reason might be that the tool under discussion uses the term _folder_ in its user interface.

=== "distributed denial-of-service"
On the first mention, write _distributed denial-of-service (DDOS)_.
On subsequent mentions, it is sufficient to write _DDOS_.

=== "DNS"
_DNS_ is an abbreviation of _Domain Name System_ (not _Server_), which is a protocol. +
A server that operates this system is a _DNS server_. +
A client of such a server is a _DNS client_.

=== "document"
Write this in full. +
Do not write _doc_.

=== "domain name registrar"

=== "dos and don'ts"

=== “dropdown”
Use _overlay_ rather than _dropdown_.

=== "due to"
Avoid using _due to_. +
Instead, use _because of_ or _as a result of_.

== E
=== "e-book"

=== "e-commerce"

pass:[<!-- vale Google.Latin = NO -->]


pass:[<!-- vale Microsoft.Foreign = NO -->]

=== "e.g."
Avoid using _e.g._ +
Instead, write _for example_.

pass:[<!-- vale Microsoft.Foreign = YES -->]


pass:[<!-- vale Google.Latin = YES -->]

=== “either”
Like the word _both_, the word _either_ is used in the context of two things. +
For example:

[example]
====
_The parameter can be *either* an integer or a boolean._
====

It is not correct to use _either_ where there is a choice between more than two things. +
For example, this is incorrect:

[example]
====
_The parameter can be *[line-through]#either#* an integer, a boolean or a string._ +
====

In such a case, we could say, for example:

[example]
====
_The parameter can be an integer, a boolean, or a string._
====

For added emphasis, we could also say:

[example]
====
_The parameter can be any of an integer, a boolean, or a string._
====

For clarity, _either_ should be placed as close as possible to the point where choice occurs. +
For example:
[example]
====

pass:[<!-- vale Vale.Spelling = NO -->]

_You can choose *either* to ignore the message or to fix the problem before continuing._ +
+++[+++This is OK, because the choice is either to ignore or to fix.+++]+++

_You can *[line-through]#either#* choose to ignore the message or to fix the problem before continuing._ +
+++[+++Inappropriate, because the choice is not whether to choose or not to choose.+++]+++

====

=== "element"
Use _element_, rather than _tag_, when referring to HTML elements.

=== "email"

=== "end user"
The noun is _end user_. The adjective phrase is _end-user_.
For example:

[example]
====
_The choice of license depends on the number of *end users*._ +
_This will minimize the level of *end-user* support that you need to provide._
====

=== "enter"
In the context of IT systems, _to enter_ refers to inputting a specific piece of data to the system.
For example:

[example]
====
_Enter your user ID and press [guibutton]#OK#._
====

=== "Esc key"

=== "etc."
This abbreviation is always terminated by a period.

Do not use _etc._ in situations where it is not clear exactly what it means. +
For example:

[example]
====
_Always be sure to include the currency symbol, such as "$", "£", "€", **etc**._ +
+++[+++Here, it is clear that _etc._ refers to all the other possible currency symbols.+++]+++

_Check that the problem was not caused by a misspelt variable name, **[line-through]#etc.#**_ +
+++[+++In this case, it is unclear what other issues might have caused the problem.+++]+++
====

== F
=== "F1", "F2", "F3", etc.

=== "FAQ"
_FAQ_ is an abbreviation for _frequently asked question_.
The term is sufficiently well known for it not to need explanation. +
The plural is _FAQs_.

=== "fast-forward"
_Fast-forward_ can be a noun, an adjective or a verb.

=== "fewer"
_Fewer_ (not _less_) should be used with countable nouns.
For example:

[example]
====
_There were *fewer* problems with this version of the software._ +
+++[+++Not _[line-through]#less# problems_.+++]+++

_**Fewer and fewer** people use landlines these days._ +
+++[+++Not _[line-through]#less and less# people_.+++]+++
====

=== "fiber optics"

=== "field"
Use the term _field_ in the context of databases. +
Do not use _field_ in the context of the UI. +
Instead, use, for example, _box_.

=== "filename"

=== "firewall"

=== "firmware"

=== "floating-point"
_Floating-point_ is an adjective.

=== "following"
_Following_ may be used with some more specific term.
For example:

[example]
====
_the *following* example_ +
_the *following* text_ +
_the *following* procedure_
====

However, it may not always be necessary to be so specific. +
We may use the expression _the following_ as a noun phrase on its own. +
For example:

[example]
====
_**The following** is an example of how to use this functionality._ +
_It may be instantiated using the default parameters, as in *the following*:_
====

=== "font size"

=== "for example"
Use _for example_ in preference to _e.g._

If you use _for example_ in the middle of a sentence, use a semi-colon if there is a possibility of doubt as to which part of the sentence it relates to. +
For example:

[example]
====
_There are some differences between US and UK spelling, *for example*, the preference for_ z _or_ s _in verbs that end in -ize._ +
+++[+++On first reading, the reader may hesitate over which part of the sentence _for example_ refers to.+++]+++

_There are some differences between US and UK spelling; for example, the preference for_ z _or_ s _in verbs that end in_ -ize. +
+++[+++The semi-colon makes it easier for the reader to interpret the sentence correctly on first reading.+++]+++
====

[[word-list.former]]
=== “former”
The word _former_ identifies the first of *two* options previously mentioned.
(_Former_ is often used in conjunction with _latter_, which indicates the *last* of two options previously mentioned.) +
It is not correct to use _former_ in a situation where more than two options have been mentioned. +
For example:

[example]
====
_Anil spends his spare time playing squash and doing crosswords. The *former* helps him to stay fit; the *latter* keeps his brain sharp._
====

_Former_ is also used as an adjective to indicate that a person or place had a certain role in the past.
For example:

[example]
====
_Anne is a *former* systems analyst who now acts as a security consultant to the company._ +
+++[+++That is, Anne used to be a systems analyst.+++]+++

_The company has its offices in a *former* bakery._ +
+++[+++That is, the company's offices used to be a bakery.+++]+++
====

=== "forward compatibility"
The noun is _forward compatibility_. +
The adjective is _forward-compatible_.

=== "freeze"
Do not use _freeze_ to refer to a situation when a program stops responding. +
Instead, write _stops responding_.

=== “front end”
The noun phrase is _front end_. +
The adjective is _front-end_. +
For example:

[example]
====
_Processing takes place at the *front end*._ +
_**Front-end** processing is kept to a minimum._
====

== G

=== "Gbps"
Abbreviation of _gigabits per second_. +
Do not use _Gb/s_.

=== "GDPR"
On the first mention, use _the General Data Protection Regulation (GDPR)_. +
On subsequent mentions, use _the GDPR_.

=== "GIF"
Do not use the extension _.gif_ to refer to a file type.

=== "gray"
//

== H

=== "half"
In compound phrases with _half_, use a hyphen.
For example:

[example]
====
_half-life_ +
_half-length_ +
_half-price_
====

=== "handheld"
// MS

=== "hang"
Do not use _hang_ to refer to a situation when a program stops responding. +
Instead, write _stops responding_.

=== "hard disk"

=== "hard drive"

=== "hard-code"
The verb is _hard_code_. +
The adjective is _hard-coded_.
// MS

=== “he” / “she” / “they”
It is important to avoid using gender-specific pronouns (unless there is a significant reason for doing so). +
Do not overuse _he&nbsp;/&nbsp;she_ or _he or she_, as this quickly becomes tedious.

The generally accepted approach is to use the pronoun _they_. +
For example:

[example]
====
_Each person must do what *they* think best._ +
+++[+++Not _what he or she thinks best_.+++]+++
====

However, if you can easily avoid the issue by using the plural, do so. +
For example:

====
_**People** must do what *they* think best._
====

=== "hexadecimal"
Write out _hexadecimal_ in full. +
Do not abbreviate it to _hex_.

=== “hierarchy”

=== “his” / “her” / “their”

=== "hit"
Do not use _hit_ to refer to pressing a key. +
Instead, use _press_.

=== "home page"

=== “hopefully”
Do not use _hopefully_ to mean _it is hoped that_. +
For example:

[example]
====
_[line-through]#Hopefully#, the new version will be released at the beginning of July._
====

Instead, use _<the subject of the sentence> hopes to_. +
If you must use a passive construction, write _it is hoped that_. +
For example:

[example]
====
_The company hopes to release the new version at the beginning of July._ +
*or* +
_It is hoped that the new version will be released at the beginning of July._
====

=== "host name"
// MS

=== "hyperlink"
Use _hyperlink_ in preference to _link_.

== I

pass:[<!-- vale Microsoft.Foreign = NO -->]


pass:[<!-- vale Google.Latin = NO -->]

=== "i.e."
Avoid using _i.e._ +
Instead, use _that is_.

=== "I/O"
It's OK to write _I/O_, with no spaces. +
If you expand it to _input&nbsp;/&nbsp;output_, insert non-breaking spaces (`\&nbsp;`) around the slash character.

=== “if” clauses in the future
Clauses that refer to conditions in the future use the present tense. +
The "result" clause uses the appropriate future form or imperative form. +
For example:

_If there *are* any further releases, you will receive an advisory email._ +
+++[+++Not _If there will be&hellip;._+++]+++

_Send us a message via our contact page if you *have* any problems._ +
+++[+++Not _If you will have&hellip;._]

See also <<grammar#grammar.time_clauses_in_future, time clauses in the future>>

=== "if" or "whether"
Use _if_ in clauses that express a simple conditional meaning. +
Use _whether_ in clauses that express uncertainty between two possibilities.
Sometimes, either is acceptable. +
For example:

[example]
====
_Let me know *if* you need help._ +
+++[+++This is a simple condition; that is, if the situation arises that you need help, let me know.+++]+++

_Let me know *whether* the fix works._ +
+++[+++That is, let me know which of the situations is true: does the fix work, or doesn't it work?+++]+++
====

=== “in order to”
Use _in order to_ for clarity, especially after verbs that are followed by the infinitive (_to_) form, such as _need_, _want_, _start_. +
For example:

[example]
====
_This the information you *[line-through]#need to use#* the components correctly._ +
+++[+++The reader may misinterpret this on first reading.+++]+++

_This the information you *need in order to use* the components correctly._ +
+++[+++Slightly more verbose, but clearer.+++]+++
====

=== "indent"
_Indent_ is a verb that means to apply a greater left (and sometimes right) margin to text than that of the preceding material. +
The purpose of indentation is to show some distinction between one piece of text and the next.

Do not use _outdent_, as it is often unclear what exactly this means in a given situation.
Look for a different way to express this idea.

=== "indeterminate progress bar"
An _indeterminate progress bar_ is a progress indicator in a situation where it is not possible to determine and show how much of the process remains to run.

=== “information”
"Information" is an <<grammar#grammar.countable_entities,uncountable>> noun.
In other words, we cannot talk about _[line-through]#one information#_, _[line-through]#two informations#_, etc. +
For the same reason, we cannot say _[line-through]#an information#_, as this implies a quantity of one. +

If we want to talk about quantity in relation to information, there are several options:

- use an intermediary word, such as _piece_ or _bit_
- use a quantifier, such as _a lot of_, _lots of_, _some_, _a little_, etc.

=== "input"
Do not use _input_ as a verb. +
Instead, write _enter_.

=== "internet"

=== "Internet of Things"
On the first mention, write as _Internet of Things (IoT)_. +
On subsequent mentions, write as _IoT_.

=== "insertion point"
The point on the screen where the user enters data.

=== "italics"
The noun is _italics_. +
The adjective is _italic_. +
The verb is _italicize_.

=== “its” or “it’s”
The possessive form of _it_ is _its_, with no apostrophe. +
This is logical and consistent with the other possessive adjectives: +
_I_ -> _my_ +
_you_ -> _your_ +
_he_ -> _his_ +
_she_ -> _her_ +
_they_ -> _their_ +
etc. +
Possessive adjectives have no apostrophes.

_It's_ (with the apostrophe) is a contracted form, similar to _I'm_, _you're_, _he's_, etc. +
Here, the apostrophe performs its classical role of indicating that letters have been omitted. +
_It's_ can mean _it is_ or _it has_; the context will always tell us which meaning is intended.

[example]
====
_**It's** easy to make a mistake._ +
+++[+++_It's_ must mean _it is_, since _It has easy&hellip;_ makes no sense at all.+++]+++

_**It's** been a difficult day._ +
+++[+++_It's_ must mean _it has_, since _It is been&hellip;_ makes equally little sense.+++]+++
====

See also <<style#style.contractions, contractions>>.

== J
=== "JavaScript"

=== "JPEG"
Do not use the filename extension _.jpg_ to refer to a file type.

=== "justified"
Text that is _justified_ is aligned on the left and on the right.

== K

=== "Kbps"
Abbreviation for _kilobits per second_. +
Don't use _kb/s_.

=== "key"
Don't use this as a synonym for "crucial".

=== "key-value pair"
Use a hyphen, rather than an en-dash.

=== "keypress"

=== "keystroke"

=== "keyword"

=== "knowledge base"

== L

=== “-l-” or “-ll-”?
In US English (which is used in Vaadin documentation), if a verb ends in the letter _l_, the final _l_ is not usually doubled when a suffix (_-ing_, _-ed_, _-er_) is added. +
The exception is when the final syllable is stressed. +
For example:

[example]
====
_cancel_, _canceling_, _canceled_ +
_travel_, _traveling_, _traveled_ +
_excel_, _excelling_, _excelled_
====

=== "labeled"

=== “latter”
See <<word-list.former,"former">>

=== "layout", "lay out"
The noun is _layout_. +
The verb is _lay out_.

=== "lead"
The past simple and past participle of _lead_ is _led_. For example:

[example]
====
_This situation led to a number of problems._ +
_He has led the company since 2006._
====

=== "leverage"
Avoid using this as a verb. +
Consider using _take advantage of_ or _make effective use of_.

=== “like” or “as”?
See <<word-list.as_or_like, "as" or "like"?>>

=== "list box"

=== "livestream"
//-

=== "login"
The noun is _login_. +
The verb is _to log in (to)_.

=== "lower"
Do not use _lower_ to refer to earlier versions of software. +
Instead, use _earlier_.

== M

=== "macOS"
Use _macOS_, even at the beginning of a sentence.

=== "mailbox"

=== "markup"
The noun is _markup_. +
The verb is _to mark up_.

=== "master&nbsp;/&nbsp;slave"
Avoid this term. +
Instead, consider using _primary&nbsp;/&nbsp;subordinate_.
// MS

=== "matrix"
The plural is _matrices_.

=== "Mbps"
Abbreviation of _megabits per second_. +
Not _Mb/s_.

=== "metadata"

=== "method"
As our documentation deals extensively with Java objects and methods, avoid using _method_ to mean _way_ or _process_.

=== "MIME"
It is usually unnecessary to write out this term in full. +
However, if it is required for some reason, it is _multipurpose internet mail extensions_.

=== "mobile"
Use _mobile_, _mobile phone_, or _mobile device_. +
Do not use _cell phone_.

=== "movable"
Do not use _[line-through]#moveable#_.

=== "much"
_Much_ is frequently used in questions and negative statements, but not usually in positive statements. +
In positive statements, use an alternative expression, such as _a lot of_, _a great deal of_, or _a large amount of_. +
For example:

[example]
====
_Is there *much* difference between version 1 and version 2?_ +
_No, there is *not much* difference between version 1 and version 2._ +
_Yes, there is *[line-through]#much#* difference between version 1 and version 2._ +
_Yes, there is *a lot of* difference between version 1 and version 2._
====

=== "multifactor authentication"


== N

=== "N/A"
Use this abbreviation of _not applicable_ in tables or other contexts where space is limited.

=== "name server"

=== "namespace"

=== "NAT"
Abbreviation of _network address translation_.

=== "needed"
Don't use _needed_ attributively (that is, before the noun phrase that it describes).
Instead, use _required_.
For example:

[example]
====
_Edit the code and make the *required* changes._ +

_Edit the code and make the *[line-through]#needed#* changes._ +
+++[+++Do not use _needed_ attributively.+++]+++

_Edit the code and make the changes that are *needed*._ +
+++[+++It is OK to use _needed_ predicatively.+++]+++
====

=== "network"
Write _network_ out in full. +
Do not shorten it to [line-through]#_net_#.

=== "NoSQL"

=== “npm”

=== "null"
In general contexts, use the term _null_ to refer to a null value.

== O

=== "OAuth 2.0"

=== "of"
Do not add _of_ to prepositions where it is not necessary.
For example:

[example]
====
_[line-through]#inside of the parentheses#_ +
+++[+++Instead, write _inside the parentheses_.+++]+++

_[line-through]#off of the premises#_ +
+++[+++Instead, write _off the premises_.+++]+++
====

=== "OK"
Write _OK_, not _[line-through]#okay#_.

=== "on-premises"
Write _on-premises_ in full, not _[line-through]#on-prem#_.

=== "once"
Do not use _once_ to mean _after_, as it can be confusing. +
Use _after_ or _when_. +
For example:

[example]
====
_[line-through]#Once# you have created the object, you need to initialize it._

Instead, write +
_When you have created&hellip;_ +
or +
_After you have created&hellip;_
====

=== "open source"
As this is a common phrase, it is unnecessary to use a hyphen, even when it is used as an adjective phrase.

=== "OS"
Is it unnecessary to write out this abbreviation of _operating system_ in full.

=== "over"
Do not use _over_ in the sense of _more than_.
Instead, use _more than_.

=== “overlay”


== P

=== "parent-child"

=== "PDF"
Do not use the extension _.pdf_ to refer to a file type.

=== "per"
Use _per_ instead of the slash character ("/") to refer to a rate.
For example:

[example]
====
_bits per second_ +
+++[+++Not _bits/second_.+++]+++

_words per minute_ +
+++[+++Not _words/minute_.+++]+++
====

=== "persist"
The verb _persist_ does not take an object (that is, it is intransitive). +
For example:

[example]
====
_We want the user ID to *persist* between sessions._ +
+++[+++That is, the user ID should be retained.+++]+++

We want to [line-through]#*persist the user ID*# between sessions. +
+++[+++The verb _persist_ does not take an object.+++]+++
====

=== "please"
Do not use _please_ in the context of instructions. +
It is unnecessary.

=== "plugin"

=== "PNG"
Do not use the file extension _.png_ to refer to a file type.

=== "post"
Do not use _post_ as a synonym for _after_. +
Instead, use _after_.

=== "postal code"
Use _postal code_ rather than _postcode_ or _zip code_.

=== “practice”
In US English, _practice_ is a noun and a verb.

=== "precondition"

=== "press"
Use the verb _press_ to refer to pressing a key or key combination. +
Do not use _hit_ in this context.

== Q


== R

=== "real time"
The noun phrase is _real time_. +
The adjective phrase is _real-time_. +
For example:

[example]
====
_The data is retrieved in real time._ +
_Real-time processing takes place at the frontend._
====

=== "regular expression"
Do not use _[line-through]#regex#_.

=== “repository”
Do not use _[line-through]#repo#_.

=== “respectively”
The adverb _respectively_ is used in a well-defined grammatical context. +
It has the function of distributing meaning over a defined set of entities. +
For example:

[example]
====
_The research department, marketing department, and customer services department are located in San Francisco, New York, and New Orleans *respectively*._
====
Do not use _respectively_ in any other construction.

=== "REST"
It is unnecessary to write out this abbreviation of  _representational state transfer_ in full.

=== "runtime"
//-

== S

=== "(s)", "(es)"
Do not append _(s)_ or _(es)_ to a singular word in order to indicate that the item in question may or may not be plural. +
For example:

[example]
====
_Select the *file[line-through]##(s)##* that you wish to upload._
====
Instead, either use the plural word only, or explicitly give both forms. +
For example:

[example]
====
_Select the *files* that you wish to upload._ +
or +
_Select the *file or files* that you wish to upload._ +
+++[+++It is usually unnecessary to be so explicit.+++]+++
====

[[word-list.s_or_z]]
=== “-ise” or “-ize”
In US English, the suffix _-ize_ is generally preferred over _-ise_. +
// An exception is _improvise_.

pass:[<!-- vale Vale.Spelling = NO -->]

=== “separator”
Use _divider_ rather than _separator_.

=== “server side”

=== "service level agreement"
On the first mention, write it as _service level agreement (SLA)_. +
On subsequent mentions, write it as _SLA_.

=== "setup"
The noun and adjective are _setup_. +
The verb is _to set up_.

=== "SHA-1"

=== "ship"
Do not use _ship_ to refer to software releases. +
Instead, use _release_.

=== "sign-in"
The noun and adjective are _sign-in_. +
The verb is _to sign in (to)_ (not _to sign [line-through]#into#_).

=== "smartphone"
Do not use the term [line-through]#_smartphone_#. +
Instead, use _mobile_ or _mobile phone_.

=== “software as a service”
At the first mention, write _software as a service (SaaS)_. +
On subsequent mentions, write _SaaS_.

=== "space key"

=== "specification"
Write _specification_ out in full. +
Do not abbreviate it to [line-through]#_spec_#.

=== "ssh", "SSH"
_ssh_ is the terminal utility. +
_SSH_ is the associated communications protocol.

=== "startup"
The noun and adjective are _startup_. +
The verb is _to start up_.

=== "status bar"

=== "style sheet"

=== "subclass"
_Subclass_ is a noun and a verb.

=== "subcomponent"

=== "subnet"

=== "sync"
The verb forms are _sync_, _syncing_, _synced_.

== T

=== "tar"
Do not use the extension _.tar_ to refer to a file type. +
For example:

[example]
====
_a *tar* file_
====

=== “that”
If the word _that_ is optional, include it for clarity. +
The goal, as always, is to help the reader to interpret each phrase and sentence correctly at the first reading. +
For example:

[example]
====
_&hellip; to *[line-through]#guarantee your software#* works correctly_,

_&hellip; to guarantee *that* your software works correctly_.
====

[[word-list.that_or_which]]
=== “that” or “which”?
In defining relative clauses (see <<grammar#grammar.relative_clauses,relative clauses>>), we can use either _that_ or _which_. +
For example:

[example]
====
_The company *that* developed the software provides excellent support._ +
or +
_The company *which* developed the software provides excellent support._
====

However, in non-defining relative clauses (see <<grammar#grammar.relative_clauses,relative clauses>>), we cannot use _that_. +
For example:

[example]
====
_I emailed technical support at BrilSoft, which developed the software._ +
+++[+++Not _&hellip; at BrilSoft, that developed the software_.+++]+++
====

=== “their” or “they’re”?
Because the pronunciation of _their_ and _they're_ is identical, it is easy to write the wrong form. +
This error is less likely to happen in our technical documentation, as we have made the decision not to use contracted forms. +
In general, the form _they're_ should not be used in our technical documentation.

=== “time frame”
Use _time frame_ rather than _timeframe_.

=== "time out"
The verb is _time out_. +
The noun and adjective are _time-out_.

=== "time stamp"
The noun is _time stamp_. +
The adjective and verb are _time-stamp_.

=== "time zone"
If a time zone has an unambiguous name, write it out in full, capitalized on the first use. +
Use _Coordinated Universal Time (UTC)_ rather than _Greenwich Mean Time (GMT)_. +
For example:

[example]
====
_The first backup was set to run at 09&ratio;00 *Coordinated Universal Time (UTC)*._ +
_The second backup was set to run at 23&ratio;00 *UTC*._
====

If the time zone does not have a name, or to guard against misunderstanding, use the form _UTC-n_ or _UTC+n_. +
For example:

[example]
====
_The videoconference is scheduled for 14&ratio;30 *UTC-7*._ +
_The system went down at 21&ratio;43 *UTC+9*._
====

=== "toolkit"

=== "touchscreen"

=== "trailing"
Use _trailing_ to refer to characters that occur at the end of a string. +
The opposite of _trailing_ is _leading_.

=== "trojan"
Use _trojan_ or _trojan horse_.
//-

== U

=== "United Kingdom"
Use _the United Kingdom_ or _the UK_ to refer to the sovereign state. +
Do not use _Great Britain_, _Britain_, or _England_ in this sense.

=== “unique”
Something is either unique or it is not.
There can be no degrees of uniqueness. +
Hence, avoid using such expressions as _very unique_ or _rather unique_.

=== "unzip"
Do not use _unzip_. +
Instead, use _extract_.

=== "uppercase"

=== "URL"
The plural is _URLs_.

=== "US"
Do not use _U.S._

=== "username"

=== "UTF"
_UTF-8_, _UTF-16_, _UTF-32_.

=== "utilize"
Avoid _utilize_. +
Instead, use _use_.

== V

=== "v."
Use _v._ as the abbreviation for _version_. +
For example:

[example]
====
Atom v. 1.57.0
====

However, the exception is Vaadin's own software, since historically  a capital _V_ is used in this context. +
For example:

[example]
====
_Vaadin 21_ +
_This was introduced in *V 20*._
====

=== "via"
Avoid using _via_.

=== "vice versa"
Avoid using _vice versa_, as it is often unclear exactly what is meant. +
Use more-specific language.

=== "videoconference"

=== "voicemail"

=== "vs"
Write _versus_ in full, or abbreviate it to _vs_ without a final period. +
Avoid using _versus_ in the sense of _compared with_ or _as opposed to_.

== W

=== "W3C"

=== "was" or "were"?
In English, the subjunctive mood has largely fallen out of use. +
However, it still exists in certain set constructions. +
For example:

[example]
====
_If I *were* you&hellip;_ +
+++[+++Not _If I was you&hellip;_.]
====

In other constructions, using a subjunctive form is generally optional. +
For example:

[example]
====
_If he *were* here, he could explain it to you._ +
_If he *was* here, he could explain it to you._ +
+++[+++Both of these are acceptable.+++]+++

_It is necessary that you *be* here._ +
_It is necessary that you *are* here._ +
+++[+++Both of these are acceptable.+++]+++

_It is important that she *have* experience._ +
_It is important that she *has* experience._ +
+++[+++Both of these are acceptable.+++]+++
====

In some cases, you can avoid the issue by using alternative forms. +
For example:

[example]
====
_It is necessary *for you to be* here._ +
_It is important that she *should have* experience._
====

=== "web"
Use _web_ when referring to the World Wide Web.

=== "web-based"

=== "webpage"

=== "website"

=== "well-being"

=== “which” or “that”?
See <<word-list.that_or_which,"that" or "which"?>>

=== "while"
Use _while_ in expressions of time. +
Do not use _while_ as a synonym for _although_ or _whereas_. +
For example:

[example]
====
_**[line-through]#While#** it is possible to write code using an ordinary text editor, using an IDE has significant advantages._ +
_**Although** it is possible to write code using an ordinary text editor, using an IDE has significant advantages._

_The previous version was written in C+\+, *[line-through]#while#* the current version is Java-based._ +
_The previous version was written in C++, *whereas* the current version is Java-based._
====

=== "white paper"

=== "who" or "that"?
Use _who_, rather than [line-through]#_that_#, in relative clauses that refer to people.
For example:

[example]
====
_Users *who* require training._
+++[+++Not _Users [line-through]#that# require training_.+++]+++
====

=== "whom"
In general, try to avoid using _whom_.
It can sound pretentious.

However, it is sometimes difficult to avoid elegantly. +
For example:

[example]
====
_**[line-through]#To whom#** were you talking?_ +
+++[+++This is grammatically correct, but it sounds pretentious.+++]+++

_**Who** were you talking to?_ +
+++[+++This sounds much more natural.+++]+++
====

Sometimes it is preferable to use _whom_ in order to avoid an awkward sentence. +
For example:

[example]
====
_This is the customer *for whom* we selected the appropriate product, rewrote the core module, and delivered training to the sales and marketing staff._

_This is the customer *[line-through]#who#* we selected the appropriate product, rewrote the core module, and delivered training to the sales and marketing staff [line-through]#*for*#. +
+++[+++Here, the preposition _for_ is so far from its associated relative pronoun (_who_) that the reader is likely to lose track of the meaning.+++]+++
====

=== “whose” or “who's”?
Although these two words sound exactly the same, they have completely different meanings.

_Whose_ means _of whom_ or _of which_. +
For example:

[example]
====
_This is the user *whose* account was blocked._ +
+++[+++That is, the user _of whom_ the account was blocked.+++]+++

_This is the server *whose* hard disk failed._
====

_Who&apos;s_ is a contraction of _who is_ or _who has_. +
We do not use <<style#style.contractions,contractions>> in Vaadin technical documentation.

=== "Wi-Fi"

=== "wildcard"

=== "will"
Try to avoid using the future form _will_ unless you really are talking about the future. +
A common case is when talking about the behavior of software. +
For example:

[example]
====
_Press [guibutton]#OK#. A new dialog [line-through]#will open#._

_If there is no authenticated user, the method [line-through]#will return# null._
====

Instead, write

[example]
====
_Press [guibutton]#OK#. A new dialog opens._

_If there is no authenticated user, the method returns null._
====

=== "wireframe"

=== "workspace"

=== "workstation"
//-

== X
=== "x-axis"

=== "x-coordinate"

== Y
=== "y-axis"

=== "y-coordinate"

=== "YAML"
Do not use the extension _.yaml_ to refer to a file type.

== Z

=== "z-axis"

=== "z-coordinate"

=== "zero"
The plural of _zero_ is _zeros_.

=== "zip"
Do not use the extension _.zip_ to refer to a file type.
