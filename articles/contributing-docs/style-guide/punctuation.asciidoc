---
title: Punctuation
order: 90
layout: page
---

= Punctuation
:experimental:

include::../_custom-styles.asciidoc[]

== Capitalization
We should capitalize only when there is a good reason for doing so.
Otherwise, capitalization can creep into lots of areas where it has no place.

One situation where this often happens is in the context of common abbreviations and acronyms. +
We might think that, because capital letters are used in an acronym, we should also use capital letters when the term is written out in full. +
This is usually not the case, unless the term is a proper noun. (See <<style#style.proper_nouns,Proper Nouns>>.)

[%header,cols="1,2"]
|===
|Abbreviation |Full expression
|CLI |command line interface
|MFA |multi-factor authentication
|SaaS |software as a service
|JDK |Java Development Kit +++[+++proprietary name+++]+++
|===

== Colon (“:”)
The function of a colon in a sentence is to signal the beginning of an explanation or a list. +
Often, we can think of it as saying, _and it is this..._ or _and this is what I'm talking about..._. +
Some examples of this are:

[example]
====
_There can be only one reason he is late**:** he has missed the flight._ +
_Annabel has three valuable characteristics**:** she is clever, she is conscientious, and she is honest._ +
_On seeing the results of my work, I felt only one emotion**:** pride._
====

A colon is also commonly used to introduce a list, particularly at the end of a sentence. +
For example:

[example]
====
_The parameter can be of several types**:** integer, boolean, or string._ +
_Three cities are in the running to stage the next Olympics**:** Beijing, Chicago, and Melbourne._
====

A colon should not be used to join two full clauses outside the uses mentioned here. +
If you are looking for the right punctuation to join two clauses that have some logical relationship, consider using a <<punctuation.semi-colon, semi-colon>>. +
Do not use a comma for this purpose.
(See <<punctuation.comma_splice,Comma Splice>>.)

Vaadin uses US English in its documentation.
US usage allows a colon to be followed by a sentence beginning with a capital letter, if that sentence is the first of two or more sentences that are governed by the same colon.

[example]
====
_There may be several reasons to learn Esperanto**: I**t is completely regular, so you do not need to learn a lot of exceptions.
It is not associated with any specific country, so has no political baggage.
Finally, it is just fun to learn._
====

However, if the colon governs only one sentence, begin the sentence with a lowercase letter:

[example]
====
_I can give you one good reason to learn Esperanto**: i**t is fun to learn._
====

[[punctuation.comma_splice]]
== Comma Splice
Consider the following (incorrectly punctuated) sentence:

[example]
====
_You should never divide by zero, this will cause a runtime error._ +
+++[+++Incorrect+++]+++
====

In this example, we have two complete clauses, as each one has a subject and a finite (full) verb.
It is an error to join the two clauses with a comma. This error is often called a _comma splice_.
(_Splice_ means _join_.)

We have several options to rectify this error.
The simplest option is to make each clause a sentence on its own:

[example]
====
_You should never divide by zero.
This will cause a runtime error._
====

This solution is grammatically correct.
However, it does not show the logical connection between the two clauses. A better option would be to use different punctuation.
A semi-colon would serve the purpose:

[example]
====
_You should never divide by zero; this will cause a runtime error._
====

Unlike a comma, a semi-colon can be used to join two complete clauses.
Moreover, it implies a logical connection between them, although the specific logic is left to the reader's interpretation. (See <<punctuation.semi-colon,Semi-Colon>>.)

Another option would be to use an appropriate conjunction.
As its name suggests, a conjunction is a joining word.
Some common conjunctions are: _and_, _but_, _or_, _because_, _as_ and _so_.
Conjunctions often imply some kind of logical connection between the clauses that they join.

In our example, we want to express a concept of causation.
_Because_ and _as_ would be suitable options:

[example]
====
_You should never divide by zero, because this will cause a runtime error._ +
_You should never divide by zero, as this will cause a runtime error._
====

Although the meaning of these two versions is the same, in fact, by convention, we use _as_ more often than _because_ to express this kind of causation.
Consequently, the second version is the best of the options that we have discussed.

== Commas
In a small number of situations, commas are mandatory in English.
These include:

* non-defining <<grammar#grammar.relative_clauses,relative clauses>>
* noun phrases in <<grammar#grammar.apposition,apposition>>
* after introductory <<grammar#grammar.adverb_phrases,adverb phrases>>
* delimiting two or more adjectives before noun
* delimiting items in a list

== Double Quotes (“)
See <<punctuation.quotation-marks,Quotation Marks>>.

== Em Dash ("&mdash;")
In US English, a pair of _em_ dashes (so called because they have the same width as the letter _M_) are used to indicate a fragment of text in parenthesis. The pair of _em_ dashes imply a more significant break in the structure of the sentence than one marked by a comma or brackets.
There should be no space either before or after an _em_ dash.
For example:

[example]
====
The tool does not fix the bug&mdash;if only it were that simple&mdash;but it does help you to identify its location.

You can use a dropdown or a combo&mdash;personally, I prefer the latter&mdash;but, either way, the user needs to be able to select from the available options.
====

A single _em_ dash can be used to add an afterthought or aside.
For example:

[example]
====
You can use whichever IDE you prefer&mdash;it is entirely up to you.

Make sure your code is well commented&mdash;you will thank yourself when you revisit it six months later.
====

Avoid using the _em_ dash too much; it can quickly become distracting and even irritating.
Very often, a comma or semi-colon is a more appropriate choice of punctuation, especially in more formal writing, such as technical documentation.
The two previous examples could also be written as:

[example]
====
You can use whichever IDE you prefer; it is entirely up to you.

Make sure your code is well commented; you will thank yourself when you revisit it six months later.
====

== En Dash ("&#8211;")
The _en_ dash (so called because it has the same width as the letter _N_) is commonly used to indicate a range of values.
When used in this way, it is not preceded or followed by a space.
For example:

[example]
====
Select a number in the range 0&#8211;255.

The parameter should be a string of 8&#8211;10 characters.

The license enables you to use the software on 1&#8211;3 computers.

He was chief designer (2003&#8211;9), and subsequently CEO of the company (2009&#8211;12).

The office is open Monday&#8211;Friday.
====

We can also describe ranges by using the words _from_ and _between_.
These forms should not be mixed with the _en_ dash.
Use one form or the other, but not both.
For example:

[example]
====
You can use the license on between 1 and 3 workstations. +
+++[+++Not _between 1&#8211;3 workstations_.+++]+++

The parameter should be a string of from 8 to 10 characters. +
+++[+++Not _a string of from 8&#8211;10 characters_.+++]+++
====

== Headings
You should use title or headline case for all headings and chapter, section, or sub-section titles.

[example]
====
= Style Guidelines for Vaadin Documentation
====

For a detailed description of capitalization rules, see for example:

* http://grammar.yourdictionary.com/capitalization/rules-for-capitalization-in-titles.html[Rules for Capitalization in Titles of Articles]: Your Dictionary

== Hyphen (“-”)

pass:[<!-- vale Vale.Spelling = NO -->]

An issue that often causes confusion is whether or not to use a hyphen in compound words (such as _start-up_ and _onboarding_) and words that include a prefix (such as _presales_ and _multifactor_).
English has no hard-and-fast rules about this; it is simply a question of accepted usage.

pass:[<!-- vale Vale.Spelling = YES -->]

In general, use the Merriam-Webster online dictionary as a guide.
If the full compound word or prefixed word exists in the dictionary, use the form that the dictionary gives.
If the full compound word or prefixed word does *not* exist in the dictionary, use a hyphen.
For example:

====
start-up (noun) +
+++[+++This is the form given in the dictionary.+++]+++

setup (noun) +
+++[+++This is the form given in the dictionary.+++]+++

log-in (noun)
*[Neither _log-in_ nor _login_ is given in the dictionary, so use a hyphen.]*
====

Sometimes, we want to mention a series of items, all hyphenated on the same base word.
In such cases, we can reduce repetition by applying distributed hyphenated descriptive words to the base word.
For example:

[example]
====
The device used a combination of first-generation and second-generation chips. +
+++[+++OK, but repetitive.+++]+++

The device used a combination of first- and second-generation chips. +
+++[+++Better.+++]+++
====

In general, use a hyphen in compounds formed from an adverb and an adjective, in order to avoid ambiguity as to which word the adverb qualifies.
For example:

[example]
====
I am grateful to my *hard-working* colleagues.
*Not _[line-through]#hard working# colleagues_.*

This benefits *low-paid* employees.
*Not _[line-through]#low paid# employees_.*
====

pass:[<!-- vale Vale.Spelling = NO -->]

However, do not use a hyphen when the adverb ends in _-ly_.

pass:[<!-- vale Vale.Spelling = YES -->]

In these cases, there is no ambiguity concerning which word the adverb applies to.
For example:

pass:[<!-- vale Google.LyHyphens = NO -->]
[example]
====
The technology is a *closely guarded* secret.
*Not _[line-through]#closely-guarded# secret_.*

This benefits *poorly paid* employees.
*Not _[line-through]#poorly-paid# employees_.*
====
pass:[<!-- vale Google.LyHyphens = YES -->]

[[punctuation.lists]]
== Lists
Items in a list can be separated by commas. +
If a list contains three or more items, and the last item is preceded by a conjunction (_and_, _or_), place a comma before the conjunction. +
This use of a comma is called the _Oxford comma_. +
For example:

[example]
====
_The team includes analysts, developers**,** and testers._

_Leave a comment in the forum if you have any doubts, queries**,** or suggestions._
====

In cases where items in the list themselves contain commas, it is better to use semi-colons as item separators, in order to avoid confusion. +
For example:

[example]
====
This curry has three vital ingredients: onion, potato, and spinach.

This curry has three vital ingredients: onion, which should be roughly chopped**;** potato, which should be diced**;** and fresh spinach leaves, which should be thoroughly washed before use.
====

== Non-Breaking Space
Use a non-breaking space to prevent the browser from splitting terms in a way that could cause confusion for the reader.
Some examples are:

* between a number and its units
* between numbers and words that define a date
* between a person's title (_Ms_, _Dr_, _Prof._) and their name
* between words separated by a slash ("/") character

A non-breaking space can be written in AsciiDoc as `\&nbsp;`.

[[punctuation.oxford-comma]]
== Oxford Comma
See <<punctuation.lists,Lists>>.

== Product Names
Product names, such as List Box, should be capitalized as is usual for proper nouns, not as if they were class names.
Use the class name if you are referring specifically to a class.
For example:

[example]
====
[classname]`ListBox` extends [classname]`ListBoxBase`.
====

However, do not use class names in component documentation, which should be language-independent; that is, neither Java- nor JavaScript-specific.

[[punctuation.quotation-marks]]
== Quotation Marks
In general, when you want to put text in quotation marks, use double quotation marks ("&nbsp;").
Avoid using single quotation marks ('&nbsp;'), unless, of course, it is required by some code syntax.

[[punctuation.semi-colon]]
== Semi-Colon (“;”)

== Single Quotes (&lsquo;&nbsp;&rsquo;)
See <<punctuation.quotation-marks,Quotation Marks>>.

