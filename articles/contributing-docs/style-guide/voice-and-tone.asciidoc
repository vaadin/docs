---
title: Voice and Tone
order: 50
layout: page
---

= Voice and Tone
:experimental:

== Voice
By _voice_, we mean how we say what we need to say.
When we write documentation, we have certain things that we need to communicate to our reader. But there are an infinite number of ways that we could express our message.

As people, we all develop ways of talking to others which say a lot about who we are and how we see the world.
In our documentation, as well as providing important information as clearly as possible, we would like people to carry away a consistent and favorable impression of who we are and what we stand for as a company.

When we write documentation, we are, at that moment, the company.
If that sounds like a lot of responsibility, do not worry.
It is not so difficult, and nobody is expected to be a prize-winning author. We just need to remember to write like a real, helpful human being who cares about the reading audience.

As part of our voice, we want the reader to have the feeling that we are keen to give them all the information they need, in as readable and efficient a way as possible.

How can we convey that impression?
One thing we can do is to get to each point as soon as we can.
Not only does this make the information easier to assimilate, it also facilitates scanning.

Scanning is the process by which a reader quickly overviews the text to evaluate the content.
They do this in order to find out whether it really does contain the information that they want.
And, if it does, they often also want to go directly to the most relevant part of the text for their purposes.
We can make that process easier by making the essence of each point as prominent as possible.
That means putting it near the beginning of the relevant paragraph.
We can also make sure that each new point appears in a new paragraph, which also helps the process of scanning.

Consider the following text:

[example]
====
In contrast to Vaadin Flow applications, where all application logic (including authentication and authorization) is processed on server side, Vaadin Fusion applications involve the orchestration of server and client-side security.
While the technical details are taken care of by the framework, it is important to understand how to design the application so that the server responds to client requests in a secure way.
====

This is good, but we could improve it by moving the most important points to a position near the beginning, and simplifying the language a little, as follows:

[example]
====
In Vaadin Fusion applications, we need to coordinate server and client-side security.
This differs from Vaadin Flow applications, where all application logic (including authentication and authorizations) runs on the server side.
We need to design the application so that the server responds to client requests in a secure way, even though the framework takes care of the technical details.
====
