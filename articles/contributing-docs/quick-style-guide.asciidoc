---
title: Quick Style Guide
order: 70
layout: page
---

= Quick Style Guide
:experimental:

++++
<style>
.line-through {
  text-decoration: line-through;
}

.sect2 > .paragraph,
.sect2 > .exampleblock {
  margin-left: 1em;
}
.sect2 > h3 {
  font-size: var(--docs-font-size-h4);
}
.exampleblock.exampleblock {
  border-radius: var(--docs-border-radius-l);
  padding: var(--docs-space-m);
  margin: var(--docs-paragraph-margin) 0;
  border: 1px solid var(--docs-divider-color-2);
}
.exampleblock > .content > :first-child {
  margin-top: 0;
}


.exampleblock > .content > :last-child,
.exampleblock > .content > .paragraph:last-child > p:last-child {
  margin-bottom: 0;
}
</style>
++++

pass:[<!-- vale Vaadin.Headings = NO -->]

pass:[<!-- vale Vale.Spelling = NO -->]

== Word List and Quick Reference

== Miscellaneous Terms

=== "3D"
Abbreviation of _three dimensions_ or _three-dimensional_. +
*Not* _3-D_. +
For example:

[example]
====
The image is visible in _3D_.
The system displays a _3D_ image.
====

== A

[[a_to_z.a_an]]
=== "a", "an"

The choice of whether to use _a_ or _an_ depends on the *sound* of the following element, not purely on whether that element begins with a vowel.

If the *sound* of the next item is a vowel sound, use _an_;
otherwise, use _a_. +
For example:


[example]
====
_She decided to do *a* university course._ +
+++[+++_University_ begins with a consonant sound.+++]+++

_It was *an* unusual choice._ +
+++[+++_Unusual_ begins with a vowel sound.+++]+++

_We stayed in *a* hotel on the Left Bank._ +
+++[+++_Hotel_ begins with a consonant sound.+++]+++

_It was *an* honest mistake._ +
+++[+++_Honest_ begins with a vowel sound.+++]+++
====
The same principle applies to acronyms.
Decide on how the acronym is usually read &ndash; as a word or as individual letters &ndash; and select _a_ or _an_ based on the resulting initial sound.
For example:

[example]
====
_The product comes from *a* US company._

_Send me *an* SMS when you are ready._ +
+++[+++_SMS_ is read as _ess_em_ess_, so it begins with a vowel sound.+++]+++

_He is a former member of *a* SWAT team._ +
+++[+++_SWAT_ is generally pronounced as one word &ndash; _swat_.+++]+++
====

=== "above"
Do not use _above_ to indicate the position of an item on a page.
Various devices, screen readers and browsers may position elements in different places.
Instead, use _previous_ or _earlier_.

=== "add-in"

=== "add-on"

=== “advice”

"Advice" is an uncountable noun.
For that reason, it can't be used with the indefinite article (_[line-through]#an advice#_) and it can't be plural (_[line-through]#advices#_). +
If you want to use the indefinite article, you need to introduce another word, such as _piece_ or _bit_.
For example:

[example]
====
_The developer gave me a good *piece of advice*._
====

You can use quantifier phrases such as _some_ and _a lot of_. +
For example:

[example]
====
_The user guide contains *a lot of good advice*._
====

=== "agnostic"
This term is sometimes used to indicate the absence of a dependence on some other software component, such as an operating system or platform. +
It is better to use a clearer term, such as _platform-independent_.

=== "aka"
This is an abbreviation of _also known as_.
It has its origins in police usage and, hence, conveys an inappropriate tone for software documentation.

Instead, use parentheses or the word _or_. +
For example:

[example]
====
_The company specializes in software as a service *(SaaS)*._ +
_Each instantiated object of the class has a separate copy, *or instance*._
====

=== "a.m.", "p.m."
Write these in lower case, with periods.
Insert a non-breaking space (`\&nbsp;` in AsciiDoc) between the  time in numerals and _a.m._ or _p.m._ +
For example:

[example]
====
_The meeting started at 9&ratio;15 about *a.m*._ +
_We received the email at 5&ratio;00 *p.m.* yesterday._
====

=== "alright"
Avoid using [line-through]#_alright_#. +
Instead, use _all right_.

=== "alternate", "alternative"
_Alternate_ is a verb that describes something that switches repeatedly between two states, or conveys the concept of _every other_.

_Alternative_ is a noun or an adjective that indicates two possible options. +
For example:

[example]
====
_The weather *alternated* between sunny and cloudy._

_An *alternative* to installing the software using a package manager is to download it as an AppImage._
====

=== "America"
Do not use _America_ or _American_ as synonyms for _United States_ or _US_.
In general, use _US_, as both a noun and an adjective.

[example]
====
_If you live in the *US*, contact our San Francisco support desk._

_You need to comply with *US* data protection legislation._
====

=== ampersand ("&amp;")
Do not use the ampersand character in place of _and_ in general text, unless space is limited.

=== "and&nbsp;/&nbsp;or"
Insert a non-breaking space (`\&nbsp;` in AsciiDoc) before and after  the slash ("/") character in _and&nbsp;/&nbsp;or_.

See <<a_to_z.slash,slash ("/")>>.

=== "anti-malware"

=== "antialiasing"

=== "antivirus"

=== "approximately"
Write this in full; do not use [line-through]#_approx_#.

=== "arabic"
Use lowercase _arabic_ to refer to the system of numerals.

[[a_to_z.as_if_or_like]]
=== "as if" or "like"?
Consider this sentence:

[example]
====
_It looks as if it`'s going to rain._
====

Here, the clause _it`'s going to rain_ contains a finite (complete) verb (_is going to rain_).

In this situation, we should use _as if_ to connect the two parts of the sentence.
It is not correct to say, _It looks like it`'s going to rain_, although this is a very common grammatical error.

Here is another sentence:

[example]
====
_It looks like rain._
====

Here, the noun phrase _rain_ does not contain a finite verb.
In this situation, we should use _like_ to connect the two parts of the sentence.

Another way of thinking of this is to say that _as&nbsp;if_ "expects" to be followed by a verb clause.
In contrast, the word _like_ "expects" to be followed by a noun or a noun phrase.

Some other examples:

[example]
====
_Treat the issue *as if* it were a bug._ +
+++[+++Verb clause+++]+++

_They treated me *like* a VIP._ +
+++[+++Noun phrase+++]+++
====

[[a_to_z.as_or_like]]
=== “as” or “like”?
_As_ "expects" to be followed by a verb clause. +
On the other hand, _like_ "expects" to be followed by a noun phrase (that is a phrase that has the grammatical function of a noun). +
For example:

[example]
====
_Edit the file *as* you would normally._ +
+++[+++Not _[line-through]#like# you would_.+++]+++

_Make the amendments *as* described below._ +
+++[+++Not _[line-through]#like# described_.+++]+++

_**As** I have already mentioned, the software is open-source._ +
+++[+++Not _[line-through]#like# I have already mentioned_.+++]+++
====

=== "as such"
_As such_ does *not* mean _for that reason_.

Instead, it means _in its role as the previously mentioned thing_. +
For example:

[example]
====
_This software is the most capable of its peer group and, *as such*, is an excellent buy._ +
+++[+++That is, _as the most capable of its peer group&hellip;_.+++]+++

_I was the chief designer on this project and, *as such*, I take full responsibility for design defects._ +
+++[+++That is, _as the chief designer&hellip;_.+++]+++
====

_As such_ is often incorrectly used in place of phrases like _so_ or _consequently_.
Here are some examples of *incorrect* usage:

[example]
====
_Developers appreciate the convenience of the toolkit and, [line-through]#as such#, it is a popular choice._ +
+++[+++Incorrect+++]+++

_The team were in a hurry to complete the project and, [line-through]#as such#, made several poor decisions._ +
+++[+++Incorrect+++]+++
====

=== "ASCII"

=== "aspect ratio"

=== "assembly language"
Use _assembly language_, not [line-through]#_assembler_#.

=== “asynchronous”
The adjective is _asynchronous_.
The adverb is _asynchronously_.

=== "authenticate"

=== "auto-"
No general rule exists on whether to hyphenate a word that begins with the prefix _auto-_. +
It is best to check in the dictionary.

If the word is not given either in this guide or in the Merriam-Webster online dictionary, do not invent it yourself; use another term, for example with the adverb _automatically_.

=== "autosave"
// Conflict between MS style: autosave; Vale.Spelling style: auto-save

=== “awesome”
In its literal meaning, _awesome_ is used to describe something that causes awe, a feeling of respect blended with fear or wonder.

[example]
====
_The launch of the huge rocket on a pillar of smoke and flames was an awesome sight._ +
_The enormously powerful waterfall is really an awesome spectacle._
====

In modern informal speech, _awesome_ has been diverted from its literal meaning to be a synonym for _very good_. +
Please avoid this usage in technical documentation.

== B
=== "back button"

=== "backup", "back up"
The noun and adjective are _backup_.
The verb is _to back up_.
For example:

[example]
====
_Confirm that the *backup* completed successfully._ +
+++[+++Noun+++]+++

_It is vital to have reliable *backup* procedures in place._ +
+++[+++Adjective+++]+++

_You should back up all your files regularly._ +
+++[+++Verb+++]+++

_The data is subsequently *backed up* to the cloud._ +
+++[+++Verb+++]+++
====

=== “back end”

=== "backward compatibility"
The noun is _backward compatibility_.
The adjective is _backward-compatible_.

=== "backspace"

=== "bandwidth"

=== "base64"

=== "below"
Do not use _below_ to indicate the position of an item on the screen, as different devices and browsers may position elements differently.

Consider using _later_ or _in the following_.

=== "beta"
The word _beta_ should be written in lowercase, unless it appears differently as part of a defined product name.

=== "big data"
The noun phrase is _big data_.
The adjective phrase is _big-data_.

=== "big-endian"

=== "blacklist"
Do not use the term _blacklist_.
Instead, use _deny list_. +
The opposite is _allow list_, not _whitelist_.

=== "blind"
Avoid using _blind_ in an idiomatic or metaphorical sense.

To refer to people, use, for example, _a blind person_ or _a visually impaired person_ (whichever is more accurate in the context).

See also <<a_to_z.color_blind,color blind>>.

=== "Bluetooth"
_Bluetooth_ is a proper noun, so it should be capitalized.

=== "Boolean"
Capitalize _Boolean_ in general use.

=== "bot"

=== “both”
"Both" is an emphatic word that applies specifically to two stated things. +
It cannot be used for more than two. +
For example:

[example]
====
_This functionality is available in both Eclipse and NetBeans._
====

It is incorrect to say, for example:

[example]
====
_This functionality is available in both Eclipse, NetBeans, and IntelliJ IDEA._
====

To apply similar emphasis to more than two things, it would be necessary to say something like:

[example]
====
_This functionality is available in all of Eclipse, NetBeans, and IntelliJ IDEA._

However, it might be more elegant to say, for example: +
_Eclipse, NetBeans, and IntelliJ IDEA all have this functionality._
====

=== "breakpoint"
// MS

=== "browsable"

=== "built-in"
The adjective is _built-in_ when it is used attributively (that is, *before* the noun that it describes). +
When it is used predicatively (that is, *after* a verb such as _be_, _seem_, _look_), the adjective phrase is _built in_.
For example:

[example]
====
_The device has a *built-in* DVD drive._ +
+++[+++The adjective is used attributively.+++]+++

_The DVD drive is *built in*._ +
+++[+++The adjective is used predicatively.+++]+++

_The device has a DVD drive *built in*._ +
+++[+++The adjective is used predicatively.+++]+++
====
//-

== C

=== "cache", "cached", "caching"

=== "callback", "call back"
The noun and adjective are _callback_. The verb is _call back_.

=== "call-out", "call out"
The noun and adjective are _call-out_. The verb is _call out_.

=== "cancel"
_canceled_, _canceling_, _cancellation_.
// MS

=== "catalog"
Use _catalog_, not _[line-through]#catalogue#_.

=== "cell phone"
Do not use [line-through]#_cell phone_#. +
Instead, use _mobile_ or _mobile phone_.

=== "cent"
The _cent_ symbol (_&cent;_) can be written as `\&cent;` in AsciiDoc.

=== "chat"
_Chat_ may refer to different activities, depending on the context. +
Use _chat_ to refer to exchanging text messages in real time, if the context makes the meaning clear. +
Use _voice chat_ to refer to communicating by voice.

=== "check"
Do not use _check_ to refer to selecting a checkbox in the user interface. +
Instead, use _select_.

=== "check mark"
In the UI, a _check mark_ is a visual indication that an item is selected.

=== "checkbox"
The spelling is _checkbox_.

Use _select_ and _clear_ to refer to user interaction with checkboxes.

=== "click"
_Click_ is both a verb and a noun. +
More-specific variants are _left-click_, _right-click_, and _double-click_ (all hyphenated). +
For example:

[example]
====
_Enter the required details and *click* [guibutton]#OK#._

_**Right-clicking** on the dropdown presents the user with more options._
====

=== “client side”
When used as a noun phrase, _client side_ has no hyphen:

[example]
====
_The validation is handled on the client side._
====

When used as an adjective phrase, it should be written with a hyphen to avoid ambiguity:

[example]
====
_Client-side processing handles the validation._
====

=== "client&nbsp;/&nbsp;server"
Use non-breaking spaces before and after the slash ("/") character.
In AsciiDoc, this would be written as `client\&nbsp;/\&nbsp;server`.

=== "cloud"

=== "codebase"
The spelling is _codebase_; not _[line-through]#code base#_.

=== colon (“:”)
The function of a colon in a sentence is to signal the beginning of an explanation or a list. +
Often, we can think of it as saying, _and it is this..._ or _and this is what I'm talking about..._. +
Some examples of this are:

[example]
====
_There can be only one reason he is late**:** he has missed the flight._ +
_Annabel has three valuable characteristics**:** she is clever, she is conscientious, and she is honest._ +
_On seeing the results of my work, I felt only one emotion**:** pride._
====

A colon is also commonly used to introduce a list, particularly at the end of a sentence. +
For example:

[example]
====
_The parameter can be of several types**:** integer, boolean, or string._ +
_Three cities are in the running to stage the next Olympics**:** Beijing, Chicago, and Melbourne._
====

A colon should not be used to join two full clauses outside the uses mentioned here. +
If you are looking for the right punctuation to join two clauses that have some logical relationship, consider using a <<a_to_z.semi-colon, semi-colon>>. +
Do not use a comma for this purpose.
(See <<a_to_z.comma_splice, comma splice>>.)

Vaadin uses US English in its documentation.
US usage allows a colon to be followed by a sentence beginning with a capital letter, if that sentence is the first of two or more sentences that are governed by the same colon.

[example]
====
_There may be several reasons to learn Esperanto**: I**t is completely regular, so you do not need to learn a lot of exceptions.
It is not associated with any specific country, so has no political baggage.
Finally, it is just fun to learn._
====

However, if the colon governs only one sentence, begin the sentence with a lowercase letter:

[example]
====
_I can give you one good reason to learn Esperanto**: i**t is fun to learn._
====

[[a_to_z.color_blind]]
=== "color-blind"
Use the term _color-blind_ only in its literal sense, to refer to a person who is unable to distinguish certain colors.

=== "combo box"
pass:[<!-- vale Vale.Spelling = NO -->]
Not _combobox_.
pass:[<!-- vale Vale.Spelling = YES -->]

=== "command line"
When it is used as a noun phrase, write _command line_.
When it is used as an adjective phrase, write _command-line_.
For example:

[example]
====
_You can invoke the tool from the command line._ +
+++[+++Noun phrase+++]+++

pass:[<!-- vale write-good.ThereIs = NO -->]
_There are several command-line options._ +
+++[+++Adjective phrase+++]+++
====

However, see <<a_to_z.command_line_interface,"command line interface">>

[[a_to_z.command_line_interface]]
=== "command line interface"
This is a common, easily recognized phrase, so it is unnecessary to hyphenate _command line_ here.

In the first reference in the document, write this as _command line interface ("CLI")_.
In subsequent occurrences, it is acceptable to write it as _CLI_.

=== "command prompt"
In the context of the command line interface, the _command prompt_  indicates the location where the user may enter a command.
Typical command prompts are "$ " (in Unix-like systems) and "C:\> " (in Windows-based systems).

=== "consist of"
This indicates that one thing is made up of one or more other things, and nothing else.
If you want to say that one thing is made up of one or more things *plus* some other things, use _include_.
For example:

[example]
====
_The course consists of six modules._ +
+++[+++In other words, there are six (and only six) modules in the course.+++]+++

_The course includes two modules on object-oriented design._ +
+++[+++In this case, the two modules on object-oriented design are just a part of the course.+++]+++
====

=== "config"
Avoid this as an abbreviation for _configuration_.
Spell it out in full.

=== "cons"
See <<a_to_z.pros_and_cons,"pros and cons">>.

=== "CPU"

=== "CSS"
It is acceptable to use _CSS_, rather than write out _cascading style sheets_ in full. +
Do not use the extension _.css_ to refer to a file type.

=== "cross-site request forgery"
On the first mention, write this as _cross-site request forgery (CSRF)_.
On subsequent mentions, _CSRF_ is sufficient.

=== "CSV"
Do not use the extension _.csv_ to refer to a file type. +
Instead, use the capitalized abbreviation _CSV_. +
For example:

[example]
====
_You can download this as a *CSV* file._ +
+++[+++Not _a .csv file_.+++]+++
====

== D

=== “data”
Although _data_ is, strictly speaking, a plural Latin form, the generally accepted convention is to treat it as singular. For example:

[example]
====
_We need to ensure that the data is encrypted._ +
+++[+++Not _the data are encrypted_+++]+++
====

=== "daylight saving time"

=== "decrement"
The verb _decrement_ means to decrease an integer by a specified value.
It is the opposite of _increment_.

=== definite article (“the”)

=== "deprecate"
In the context of software development, if something is _deprecated_, it means that it is *recommended* not to use this thing. +
It does not mean that it is not possible to use it.

The term _deprecated_ is often used in situations where that particular thing is scheduled to become unavailable at some point in the future.

=== "desire"
Do not use _desire_ as a synonym for _want_. +
Instead, use _want_.

=== "determinate progress bar"
A _determinate progress bar_ is a progress indicator that informs the user how much of a process has been completed, and how much remains to be done.

=== "DevOps"
An abbreviation of _development operations_.
Write it as _DevOps_.

=== "dialog"
A _dialog_ or _dialog box_ is an element of the user interface. +
A _dialogue_ is a conversation between two people.

=== "different"
Use _different from_, rather than _different than_ or _different to_.

=== "direction keys"
Do not use the term _direction keys_. +
Instead, use _arrow keys_.

=== "directory"
Use _directory_, instead of _folder_, unless there is a good reason to do otherwise. +
One such reason might be that the tool under discussion uses the term _folder_ in its user interface.

=== "distributed denial-of-service"
On the first mention, write _distributed denial-of-service (DDOS)_.
On subsequent mentions, it is sufficient to write _DDOS_.

=== "DNS"
_DNS_ is an abbreviation of _Domain Name System_ (not _Server_), which is a protocol. +
A server that operates this system is a _DNS server_. +
A client of such a server is a _DNS client_.

=== "document"
Write this in full. +
Do not write _doc_.

=== "domain name registrar"

=== "dos and don'ts"

=== “dropdown”

=== "due to"
Avoid using _due to_. +
Instead, use _because of_ or _as a result of_.

== E
=== "e-book"

=== "e-commerce"

=== "e.g."
Avoid using _e.g._ +
Instead, write _for example_.

=== “either”
Like the word _both_, the word _either_ is used in the context of two things. +
For example:

[example]
====
_The parameter can be *either* an integer or a boolean._
====

It is not correct to use _either_ where there is a choice between more than two things. +
For example, this is incorrect:

[example]
====
_The parameter can be *[line-through]#either#* an integer, a boolean or a string._ +
====

In such a case, we could say, for example:

[example]
====
_The parameter can be an integer, a boolean, or a string._
====

For added emphasis, we could also say:

[example]
====
_The parameter can be any of an integer, a boolean, or a string._
====

For clarity, _either_ should be placed as close as possible to the point where choice occurs. +
For example:

[example]
====
_You can choose *either* to ignore the message or to fix the problem before continuing._ +
+++[+++Fine, because the choice is between ignoring and fixing.+++]+++

_You can *[line-through]#either#* choose to ignore the message or to fix the problem before continuing._ +
+++[+++Inappropriate, because the choice is not whether to choose or not to choose.+++]+++

====

=== "element"
Use _element_, rather than _tag_, when referring to HTML elements.

=== "email"

=== "end user"
The noun is _end user_. The adjective phrase is _end-user_.
For example:

[example]
====
_The choice of licence depends on the number of *end users*._ +
_This will minimize the level of *end-user* support that you need to provide._
====

=== "enter"
In the context of IT systems, _to enter_ refers to inputting a specific piece of data to the system.
For example:

[example]
====
_Enter your user ID and press [guibutton]#OK#._
====

=== "Esc key"

=== "etc."
This abbreviation is always terminated by a period.

Do not use _etc._ in situations where it is not clear exactly what it means. +
For example:

[example]
====
_Always be sure to include the currency symbol, such as "$", "£", "€", **etc**._ +
+++[+++Here, it is clear that _etc._ refers to all the other possible currency symbols.+++]+++

_Check that the problem was not caused by a misspelt variable name, **[line-through]#etc.#**_ +
+++[+++In this case, it is unclear what other issues might have caused the problem.+++]+++
====

== F
=== "F1", "F2", "F3", etc.

=== "FAQ"
_FAQ_ is an abbreviation for _frequently asked question_.
The term is sufficiently well known for it not to need explanation. +
The plural is _FAQs_.

=== "fast-forward"
_Fast-forward_ can be a noun, an adjective or a verb.

=== "fewer"
_Fewer_ (not _less_) should be used with countable nouns.
For example:

[example]
====
_There were *fewer* problems with this version of the software._ +
+++[+++Not _[line-through]#less# problems_.+++]+++

_**Fewer and fewer** people use landlines these days._ +
+++[+++Not _[line-through]#less and less# people_.+++]+++
====

=== "fiber optics"

=== "field"
Use the term _field_ in the context of databases. +
Do not use _field_ in the context of the UI. +
Instead, use, for example, _box_.

=== "filename"

=== "firewall"

=== "firmware"

=== "floating-point"
_Floating-point_ is an adjective.

=== "following"
_Following_ may be used with some more specific term.
For example:

[example]
====
_the *following* example_ +
_the *following* text_ +
_the *following* procedure_
====

However, it may not always be necessary to be so specific. +
We may use the expression _the following_ as a noun phrase on its own. +
For example:

[example]
====
_**The following** is an example of how to use this functionality._ +
_It may be instantiated using the default parameters, as in *the following*:_
====

=== "font size"

=== "for example"
Use _for example_ in preference to _e.g._

If you use _for example_ in the middle of a sentence, use a semi-colon if there is a possibility of doubt as to which part of the sentence it relates to. +
For example:

[example]
====
_There are some differences between US and UK spelling, *for example*, the preference for_ z _or_ s _in verbs that end in -ize._ +
+++[+++On first reading, the reader may hesitate over which part of the sentence _for example_ refers to.+++]+++

_There are some differences between US and UK spelling; for example, the preference for_ z _or_ s _in verbs that end in_ -ize. +
+++[+++The semi-colon makes it easier for the reader to interpret the sentence correctly on first reading.+++]+++
====

[[a_to_z.former]]
=== “former”
The word _former_ identifies the first of *two* options previously mentioned.
(_Former_ is often used in conjunction with _latter_, which indicates the *last* of two options previously mentioned.) +
It is not correct to use _former_ in a situation where more than two options have been mentioned. +
For example:

[example]
====
_Anil spends his spare time playing squash and doing crosswords. The *former* helps him to stay fit; the *latter* keeps his brain sharp._
====

_Former_ is also used as an adjective to indicate that a person or place had a certain role in the past.
For example:

[example]
====
_Anne is a *former* systems analyst who now acts as a security consultant to the company._ +
+++[+++That is, Anne used to be a systems analyst.+++]+++

_The company has its offices in a *former* bakery._ +
+++[+++That is, the company's offices used to be a bakery.+++]+++
====

=== "forward compatibility"
The noun is _forward compatibility_. +
The adjective is _forward-compatible_.

=== "freeze"
Do not use _freeze_ to refer to a situation when a program stops responding. +
Instead, write _stops responding_.

=== “front end”
The noun phrase is _front end_. +
The adjective is _front-end_. +
For example:

[example]
====
_Processing takes place at the *front end*._ +
_**Front-end** processing is kept to a minimum._
====

== G

=== "Gbps"
Abbreviation of _gigabits per second_. +
Do not use _Gb/s_.

=== "GDPR"
On the first mention, use _the General Data Protection Regulation (GDPR)_. +
On subsequent mentions, use _the GDPR_.

=== "GIF"
Do not use the extension _.gif_ to refer to a file type.

=== "gray"
//

== H

=== "half"
In compound phrases with _half_, use a hyphen.
For example:

[example]
====
_half-life_ +
_half-length_ +
_half-price_
====

=== "handheld"
// MS

=== "hang"
Do not use _hang_ to refer to a situation when a program stops responding. +
Instead, write _stops responding_.

=== "hard disk"

=== "hard drive"

=== "hard-code"
The verb is _hard_code_. +
The adjective is _hard-coded_.
// MS

=== “he” / “she” / “they”
It is important to avoid using gender-specific pronouns (unless there is a significant reason for doing so). +
Do not overuse _he&nbsp;/&nbsp;she_ or _he or she_, as this quickly becomes tedious.

The generally accepted approach is to use the pronoun _they_. +
For example:

[example]
====
_Each person must do what *they* think best._ +
+++[+++Not _what he or she thinks best_.+++]+++
====

However, if you can easily avoid the issue by using the plural, do so. +
For example:

====
_**People** must do what *they* think best._
====

=== "hexadecimal"
Write out _hexadecimal_ in full. +
Do not abbreviate it to _hex_.

=== “hierarchy”

=== “his” / “her” / “their”

=== "hit"
Do not use _hit_ to refer to pressing a key. +
Instead, use _press_.

=== "home page"

=== “hopefully”
Do not use _hopefully_ to mean _it is hoped that_. +
For example:

[example]
====
_[line-through]#Hopefully#, the new version will be released at the beginning of July._
====

Instead, use _<the subject of the sentence> hopes to_. +
If you must use a passive construction, write _it is hoped that_. +
For example:

[example]
====
_The company hopes to release the new version at the beginning of July._ +
*or* +
_It is hoped that the new version will be released at the beginning of July._
====

=== "host name"
// MS

=== "hyperlink"
Use _hyperlink_ in preference to _link_.

== I

=== "i.e."
Avoid using _i.e._ +
Instead, use _that is_.

=== "I/O"
It's OK to write _I/O_, with no spaces. +
If you expand it to _input&nbsp;/&nbsp;output_, insert non-breaking spaces (`\&nbsp;`) around the slash character.

=== “if” clauses in the future
Clauses that refer to conditions in the future use the present tense. +
The "result" clause uses the appropriate future form or imperative form. +
For example:

_If there *are* any further releases, you will receive an advisory email._ +
+++[+++Not _If there will be&hellip;._+++]+++

_Send us a message via our contact page if you *have* any problems._ +
+++[+++Not _If you will have&hellip;._]

See also <<a_to_z.time_clauses_in_future, time clauses in the future>>

=== "if" or "whether"
Use _if_ in clauses that express a simple conditional meaning. +
Use _whether_ in clauses that express uncertainty between two possibilities.
Sometimes, either is acceptable. +
For example:

[example]
====
_Let me know *if* you need help._ +
+++[+++This is a simple condition; that is, if the situation arises that you need help, let me know.+++]+++

_Let me know *whether* the fix works._ +
+++[+++That is, let me know which of the situations is true: does the fix work, or doesn't it work?+++]+++
====

=== “in order to”
Use _in order to_ for clarity, especially after verbs that are followed by the infinitive (_to_) form, such as _need_, _want_, _start_. +
For example:

[example]
====
_This the information you *[line-through]#need to use#* the components correctly._ +
+++[+++The reader may misinterpret this on first reading.+++]+++

_This the information you *need in order to use* the components correctly._ +
+++[+++Slightly more verbose, but clearer.+++]+++
====

=== "indent"
_Indent_ is a verb that means to apply a greater left (and sometimes right) margin to text than that of the preceding material. +
The purpose of indentation is to show some distinction between one piece of text and the next.

Do not use _outdent_, as it is often unclear what exactly this means in a given situation.
Look for a different way to express this idea.

=== "indeterminate progress bar"
An _indeterminate progress bar_ is a progress indicator in a situation where it is not possible to determine and show how much of the process remains to run.

=== “information”
"Information" is an <<a_to_z.countable_entities,uncountable>> noun.
In other words, we cannot talk about _[line-through]#one information#_, _[line-through]#two informations#_, etc. +
For the same reason, we cannot say _[line-through]#an information#_, as this implies a quantity of one. +

If we want to talk about quantity in relation to information, there are several options:

- use an intermediary word, such as _piece_ or _bit_
- use a quantifier, such as _a lot of_, _lots of_, _some_, _a little_, etc.

=== "input"
Do not use _input_ as a verb. +
Instead, write _enter_.

=== "internet"

=== "Internet of Things"
On the first mention, write as _Internet of Things (IoT)_. +
On subsequent mentions, write as _IoT_.

=== "insertion point"
The point on the screen where the user enters data.

=== "italics"
The noun is _italics_. +
The adjective is _italic_. +
The verb is _italicize_.

=== “its” or “it’s”
The possessive form of _it_ is _its_, with no apostrophe. +
This is logical and consistent with the other possessive adjectives: +
_I_ -> _my_ +
_you_ -> _your_ +
_he_ -> _his_ +
_she_ -> _her_ +
_they_ -> _their_ +
etc. +
Possessive adjectives have no apostrophes.

_It's_ (with the apostrophe) is a contracted form, similar to _I'm_, _you're_, _he's_, etc. +
Here, the apostrophe performs its classical role of indicating that letters have been omitted. +
_It's_ can mean _it is_ or _it has_; the context will always tell us which meaning is intended.

[example]
====
_**It's** easy to make a mistake._ +
+++[+++_It's_ must mean _it is_, since _It has easy&hellip;_ makes no sense at all.+++]+++

_**It's** been a difficult day._ +
+++[+++_It's_ must mean _it has_, since _It is been&hellip;_ makes equally little sense.+++]+++
====

See also <<a_to_z.contractions, contractions>>.

== J
=== "JavaScript"

=== "JPEG"
Do not use the filename extension _.jpg_ to refer to a file type.

=== "justified"
Text that is _justified_ is aligned on the left and on the right.

== K

=== "Kbps"
Abbreviation for _kilobits per second_. +
Don't use _kb/s_.

=== "key"
Don't use this as a synonym for "crucial".

=== "key-value pair"
Use a hyphen, rather than an en-dash.

=== "keypress"

=== "keystroke"

=== "keyword"

=== "knowledge base"

== L

=== “-l-” or “-ll-”?
In US English (which is used in Vaadin documentation), if a verb ends in the letter _l_, the final _l_ is not usually doubled when a suffix (_-ing_, _-ed_, _-er_) is added. +
The exception is when the final syllable is stressed. +
For example:

[example]
====
_cancel_, _canceling_, _canceled_ +
_travel_, _traveling_, _traveled_ +
_excel_, _excelling_, _excelled_
====

=== "labeled"

=== “latter”
See <<a_to_z.former,"former">>

=== "layout", "lay out"
The noun is _layout_. +
The verb is _lay out_.

=== "lead"
The past simple and past participle of _lead_ is _led_. For example:

[example]
====
_This situation led to a number of problems._ +
_He has led the company since 2006._
====

=== "leverage"
Avoid using this as a verb. +
Consider using _take advantage of_ or _make effective use of_.

=== “like” or “as”?
See <<a_to_z.as_or_like, "as" or "like"?>>

=== "list box"

=== "livestream"
//-

=== "login"
The noun is _login_. +
The verb is _to log in (to)_.

=== "lower"
Do not use _lower_ to refer to earlier versions of software. +
Instead, use _earlier_.

== M

=== "macOS"
Use _macOS_, even at the beginning of a sentence.

=== "mailbox"

=== "markup"
The noun is _markup_. +
The verb is _to mark up_.

=== "master&nbsp;/&nbsp;slave"
Avoid this term. +
Instead, consider using _primary&nbsp;/&nbsp;subordinate_.
// MS

=== "matrix"
The plural is _matrices_.

=== "Mbps"
Abbreviation of _megabits per second_. +
Not _Mb/s_.

=== "metadata"

=== "method"
As our documentation deals extensively with Java objects and methods, avoid using _method_ to mean _way_ or _process_.

=== "MIME"
It is usually unnecessary to write out this term in full. +
However, if it is required for some reason, it is _multipurpose internet mail extensions_.

=== "mobile"
Use _mobile_, _mobile phone_, or _mobile device_. +
Do not use _cell phone_.

=== "movable"
Do not use _[line-through]#moveable#_.

=== "much"
_Much_ is frequently used in questions and negative statements, but not usually in positive statements. +
In positive statements, use an alternative expression, such as _a lot of_, _a great deal of_, or _a large amount of_. +
For example:

[example]
====
_Is there *much* difference between version 1 and version 2?_ +
_No, there is *not much* difference between version 1 and version 2._ +
_Yes, there is *[line-through]#much#* difference between version 1 and version 2._ +
_Yes, there is *a lot of* difference between version 1 and version 2._
====

=== "multifactor authentication"


== N

=== "N/A"
Use this abbreviation of _not applicable_ in tables or other contexts where space is limited.

=== "name server"

=== "namespace"

=== "NAT"
Abbreviation of _network address translation_.

=== "needed"
Don't use _needed_ attributively (that is, before the noun phrase that it describes).
Instead, use _required_.
For example:

[example]
====
_Edit the code and make the *required* changes._ +

_Edit the code and make the *[line-through]#needed#* changes._ +
+++[+++Do not use _needed_ attributively.+++]+++

_Edit the code and make the changes that are *needed*._ +
+++[+++It is OK to use _needed_ predicatively.+++]+++
====

=== "network"
Write _network_ out in full. +
Do not shorten it to [line-through]#_net_#.

=== "NoSQL"

=== “npm”

=== "null"
In general contexts, use the term _null_ to refer to a null value.

== O

=== "OAuth 2.0"

=== "of"
Do not add _of_ to prepositions where it is not necessary.
For example:

[example]
====
_[line-through]#inside of the parentheses#_ +
+++[+++Instead, write _inside the parentheses_.+++]+++

_[line-through]#off of the premises#_ +
+++[+++Instead, write _off the premises_.+++]+++
====

=== "OK"
Write _OK_, not _[line-through]#okay#_.

=== "on-premises"
Write _on-premises_ in full, not _[line-through]#on-prem#_.

=== "once"
Do not use _once_ to mean _after_, as it can be confusing. +
Use _after_ or _when_. +
For example:

[example]
====
_[line-through]#Once# you have created the object, you need to initialize it._

Instead, write +
_When you have created&hellip;_ +
or +
_After you have created&hellip;_
====

=== "open source"
As this is a common phrase, it is unnecessary to use a hyphen, even when it is used as an adjective phrase.

=== "OS"
Is it unnecessary to write out this abbreviation of _operating system_ in full.

=== "over"
Do not use _over_ in the sense of _more than_.
Instead, use _more than_.

=== “overlay”


== P

=== "parent-child"

=== "PDF"
Do not use the extension _.pdf_ to refer to a file type.

=== "per"
Use _per_ instead of the slash character ("/") to refer to a rate.
For example:

[example]
====
_bits per second_ +
+++[+++Not _bits/second_.+++]+++

_words per minute_ +
+++[+++Not _words/minute_.+++]+++
====

=== "persist"
The verb _persist_ does not take an object (that is, it is intransitive). +
For example:

[example]
====
_We want the user ID to *persist* between sessions._ +
+++[+++That is, the user ID should be retained.+++]+++

We want to [line-through]#*persist the user ID*# between sessions. +
+++[+++The verb _persist_ does not take an object.+++]+++
====

=== "please"
Do not use _please_ in the context of instructions. +
It is unnecessary.

=== "plugin"

=== "PNG"
Do not use the file extension _.png_ to refer to a file type.

=== "post"
Do not use _post_ as a synonym for _after_. +
Instead, use _after_.

=== "postal code"
Use _postal code_ rather than _postcode_ or _zip code_.

=== “practice”
In US English, _practice_ is a noun and a verb.

=== "precondition"

=== "press"
Use the verb _press_ to refer to pressing a key or key combination. +
Do not use _hit_ in this context.

[[a_to_z.pros_and_cons]]
=== "pros and cons"

== Q


== R

=== "real time"
The noun phrase is _real time_. +
The adjective phrase is _real-time_. +
For example:

[example]
====
_The data is retrieved in real time._ +
_Real-time processing takes place at the frontend._
====

=== "regular expression"
Do not use _[line-through]#regex#_.

=== “repository”
Do not use _[line-through]#repo#_.

=== “respectively”
The adverb _respectively_ is used in a well-defined grammatical context. +
It has the function of distributing meaning over a defined set of entities. +
For example:

[example]
====
_The research department, marketing department, and customer services department are located in San Francisco, New York, and New Orleans *respectively*._
====
Do not use _respectively_ in any other construction.

=== "REST"
It is unnecessary to write out this abbreviation of  _representational state transfer_ in full.

=== "runtime"
//-

== S

=== "(s)", "(es)"
Do not append _(s)_ or _(es)_ to a singular word in order to indicate that the item in question may or may not be plural. +
For example:

[example]
====
_Select the *file[line-through]##(s)##* that you wish to upload._
====
Instead, either use the plural word only, or explicitly give both forms. +
For example:

[example]
====
_Select the *files* that you wish to upload._ +
or +
_Select the *file or files* that you wish to upload._ +
+++[+++It is usually unnecessary to be so explicit.+++]+++
====

[[a_to_z.s_or_z]]
=== “-ise” or “-ize”
In US English, the suffix _-ize_ is generally preferred over _-ise_. +
// An exception is _improvise_.

=== “separator”
// Not sure why this is here

=== “server side”

=== "service level agreement"
On the first mention, write it as _service level agreement (SLA)_. +
On subsequent mentions, write it as _SLA_.

=== "setup"
The noun and adjective are _setup_. +
The verb is _to set up_.

=== "SHA-1"

=== "ship"
Do not use _ship_ to refer to software releases. +
Instead, use _release_.

=== "sign-in"
The noun and adjective are _sign-in_. +
The verb is _to sign in (to)_ (not _to sign [line-through]#into#_).

=== "smartphone"
Do not use the term [line-through]#_smartphone_#. +
Instead, use _mobile_ or _mobile phone_.

=== “software as a service”
At the first mention, write _software as a service (SaaS)_. +
On subsequent mentions, write _SaaS_.

=== "space key"

=== "specification"
Write _specification_ out in full. +
Do not abbreviate it to [line-through]#_spec_#.

=== "ssh", "SSH"
_ssh_ is the terminal utility. +
_SSH_ is the associated communications protocol.

=== "startup"
The noun and adjective are _startup_. +
The verb is _to start up_.

=== "status bar"

=== "style sheet"

=== "subclass"
_Subclass_ is a noun and a verb.

=== "subnet"

=== "sync"
The verb forms are _sync_, _syncing_, _synced_.

== T

=== "tar"
Do not use the extension _.tar_ to refer to a file type. +
For example:

[example]
====
_a *tar* file_
====

=== “that”
If the word _that_ is optional, include it for clarity. +
The goal, as always, is to help the reader to interpret each phrase and sentence correctly at the first reading. +
For example:

[example]
====
_&hellip; to *[line-through]#guarantee your software#* works correctly_,

_&hellip; to guarantee *that* your software works correctly_.
====

[[a_to_z.that_or_which]]
=== “that” or “which”?
In defining relative clauses (see <<a_to_z.relative_clauses,relative clauses>>), we can use either _that_ or _which_. +
For example:

[example]
====
_The company *that* developed the software provides excellent support._ +
or +
_The company *which* developed the software provides excellent support._
====

However, in non-defining relative clauses (see <<a_to_z.relative_clauses,relative clauses>>), we cannot use _that_. +
For example:

[example]
====
_I emailed technical support at BrilSoft, which developed the software._ +
+++[+++Not _&hellip; at BrilSoft, that developed the software_.+++]+++
====

=== “their” or “they’re”?
Because the pronunciation of _their_ and _they're_ is identical, it is easy to write the wrong form. +
This error is less likely to happen in our technical documentation, as we have made the decision not to use contracted forms. +
In general, the form _they're_ should not be used in our technical documentation.

=== “time frame”

=== "time out"
The verb is _time out_. +
The noun and adjective are _time-out_.

=== "time stamp"
The noun is _time stamp_. +
The adjective and verb are _time-stamp_.

=== "time zone"
If a time zone has an unambiguous name, write it out in full, capitalized on the first use. +
Use _Coordinated Universal Time (UTC)_ rather than _Greenwich Mean Time (GMT)_. +
For example:

[example]
====
_The first backup was set to run at 09&ratio;00 *Coordinated Universal Time (UTC)*._ +
_The second backup was set to run at 23&ratio;00 *UTC*._
====

If the time zone does not have a name, or to guard against misunderstanding, use the form _UTC-n_ or _UTC+n_. +
For example:

[example]
====
_The videoconference is scheduled for 14&ratio;30 *UTC-7*._ +
_The system went down at 21&ratio;43 *UTC+9*._
====

=== "toolkit"

=== "touchscreen"

=== "trailing"
Use _trailing_ to refer to characters that occur at the end of a string. +
The opposite of _trailing_ is _leading_.

=== "trojan"
Use _trojan_ or _trojan horse_.
//-

== U

=== "United Kingdom"
Use _the United Kingdom_ or _the UK_ to refer to the sovereign state. +
Do not use _Great Britain_, _Britain_, or _England_ in this sense.

=== “unique”
Something is either unique or it is not.
There can be no degrees of uniqueness. +
Hence, avoid using such expressions as _very unique_ or _rather unique_.

=== "unzip"
Do not use _unzip_. +
Instead, use _extract_.

=== "uppercase"

=== "URL"
The plural is _URLs_.

=== "US"
Do not use _U.S._

=== "username"

=== "UTF"
_UTF-8_, _UTF-16_, _UTF-32_.

=== "utilize"
Avoid _utilize_. +
Instead, use _use_.

== V

=== "v."
Use _v._ as the abbreviation for _version_. +
For example:

[example]
====
Atom v. 1.57.0
====

However, the exception is Vaadin's own software, since historically  a capital _V_ is used in this context. +
For example:

[example]
====
_Vaadin 21_ +
_This was introduced in *V 20*._
====

=== "via"
Avoid using _via_.

=== "vice versa"
Avoid using _vice versa_, as it is often unclear exactly what is meant. +
Use more-specific language.

=== "videoconference"

=== "voicemail"

=== "vs"
Write _versus_ in full, or abbreviate it to _vs_ without a final period. +
Avoid using _versus_ in the sense of _compared with_ or _as opposed to_.

== W

=== "W3C"

=== "was" or "were"?
In English, the subjunctive mood has largely fallen out of use. +
However, it still exists in certain set constructions. +
For example:

[example]
====
_If I *were* you&hellip;_ +
+++[+++Not _If I was you&hellip;_.]
====

In other constructions, using a subjunctive form is generally optional. +
For example:

[example]
====
_If he *were* here, he could explain it to you._ +
_If he *was* here, he could explain it to you._ +
+++[+++Both of these are acceptable.+++]+++

_It is necessary that you *be* here._ +
_It is necessary that you *are* here._ +
+++[+++Both of these are acceptable.+++]+++

_It is important that she *have* experience._ +
_It is important that she *has* experience._ +
+++[+++Both of these are acceptable.+++]+++
====

In some cases, you can avoid the issue by using alternative forms. +
For example:

[example]
====
_It is necessary *for you to be* here._ +
_It is important that she *should have* experience._
====

=== "web"
Use _web_ when referring to the World Wide Web.

=== "web-based"

=== "webpage"

=== "website"

=== "well-being"

=== “which” or “that”?
See <<a_to_z.that_or_which,"that" or "which"?>>

=== "while"
Use _while_ in expressions of time. +
Do not use _while_ as a synonym for _although_ or _whereas_. +
For example:

[example]
====
_**[line-through]#While#** it is possible to write code using an ordinary text editor, using an IDE has signficant advantages._ +
_**Although** it is possible to write code using an ordinary text editor, using an IDE has signficant advantages._

_The previous version was written in C+\+, *[line-through]#while#* the current version is Java-based._ +
_The previous version was written in C++, *whereas* the current version is Java-based._
====

=== "white paper"

=== "who" or "that"?
Use _who_, rather than [line-through]#_that_#, in relative clauses that refer to people.
For example:

[example]
====
_Users *who* require training._
+++[+++Not _Users [line-through]#that# require training_.+++]+++
====

=== "whom"
In general, try to avoid using _whom_.
It can sound pretentious.

However, it is sometimes difficult to avoid elegantly. +
For example:

[example]
====
_**[line-through]#To whom#** were you talking?_ +
+++[+++This is grammatically correct, but it sounds pretentious.+++]+++

_**Who** were you talking to?_ +
+++[+++This sounds much more natural.+++]+++
====

Sometimes it is preferable to use _whom_ in order to avoid an awkward sentence. +
For example:

[example]
====
_This is the customer *for whom* we selected the appropriate product, rewrote the core module, and delivered training to the sales and marketing staff._

_This is the customer *[line-through]#who#* we selected the appropriate product, rewrote the core module, and delivered training to the sales and marketing staff [line-through]#*for*#. +
+++[+++Here, the preposition _for_ is so far from its associated relative pronoun (_who_) that the reader is likely to lose track of the meaning.+++]+++
====

=== “whose” or “who's”?
Although these two words sound exactly the same, they have completely different meanings.

_Whose_ means _of whom_ or _of which_. +
For example:

[example]
====
_This is the user *whose* account was blocked._ +
+++[+++That is, the user _of whom_ the account was blocked.+++]+++

_This is the server *whose* hard disk failed._
====

_Who&apos;s_ is a contraction of _who is_ or _who has_. +
We do not use <<a_to_z.contractions,contractions>> in Vaadin technical documentation.

=== "Wi-Fi"

=== "wildcard"

=== "wireframe"

=== "workspace"

=== "workstation"
//-

== X
=== "x-axis"

=== "x-coordinate"

== Y
=== "y-axis"

=== "y-coordinate"

=== "YAML"
Do not use the extension _.yaml_ to refer to a file type.

== Z

=== "z-axis"

=== "z-coordinate"

=== "zero"
The plural of _zero_ is _zeros_.

=== "zip"
Do not use the extension _.zip_ to refer to a file type.


== Concept List

== abbreviations
Do not terminate abbreviations with a period if the last letter of the unabbreviated form is included in the abbreviation.
For example:

[example]
====
_Mr Smith_ +
_Mrs Smith_ +
_Ms Smith_ +
_Prof. Smith_ +
_Dr Smith_ +
_St Petersburg_ +
_Microsoft Corp._ +
_M. Duval_
+++[+++abbreviation of the French word _monsieur_+++]+++ +
and so on.
====

In general, plurals of abbreviations are formed by adding a lowercase _s_.
Do not use apostrophe _s_ (_`'s_) for this purpose. +
For example:

[example]
====
_SOPs_ +
+++[+++abbreviation for _standard operating procedures_; not _SOP`'s_+++]+++

_APIs_ +
+++[+++Not _API`'s_.+++]+++
====

== admonitions
Admonition blocks such as `[NOTE]`, `[TIP]`, or `[WARNING]` can be used to emphasize important issues.
However, do not overuse them, as this can interfere with the flow of the text . +
There should be no more than three admonitions on a page.

Use a descriptive title for admonitions. +
For example:

[example]
====
  .Do not overuse admonitions
  [WARNING]
  Overusing admonition blocks interrupts the flow.


.Do not overuse admonitions
[WARNING]
Overusing admonition blocks interrupts the flow.
====

[[a_to_z.adverb_phrases]]
== adverb phrases
If you begin a sentence with an adverb phrase, place a comma after the phrase. +
For example:

[example]
====
_**Unfortunately,** we cannot reproduce the bug._ +
_**As you can see,** the screen layout is logical._ +
_**This morning,** I spoke to our customer services manager._
====

== ampersand ("&amp;")
Do not use the ampersand character in place of _and_ in general text, unless space is limited.

== angle brackets
In general text,the name for the _<_ and _>_ characters is _angle brackets_. +
In other contexts, the same characters are known as the _less than_ and _greater than_ symbols.

[[a_to_z.apostrophe]]
== apostrophe (`')
The apostrophe has a specific function: to indicate when one or more letters have been omitted.
For that reason, it is used in contracted forms of verbs.

In general, in our technical documentation, we avoid using contracted forms.
They are correct English, but they are more appropriate to less formal writing.

Nevertheless, to show the function of the apostrophe in contractions in general, here are some examples:

[example]
====
_I am_ -> _I'm_ +
+++[+++The letter _a_ is omitted.+++]+++

_She is_ -> _She's_ +
+++[+++The letter _i_ is omitted.+++]+++

_They are not_ -> _They aren't_ +
+++[+++The letter _o_ is omitted.+++]+++
====

In some cases this logical system of contraction has been adapted, by convention and usage.
For example:

[example]
====
_He will not_ -> _He won't_ +
+++[+++A little illogical, but it is the accepted contraction.+++]+++

_We shall not_ -> _We shan't_ +
+++[+++And not, for example, [line-through]#_sha'n't_#.+++]+++
====

The other standard use of the apostrophe in English is to indicate possession.

In fact, this has its logic. In Old English, the possessive case of a noun was formed by adding _-es_ to it.

In modern English, the _e_ has been dropped from that suffix; this omission is now marked by that apostrophe.

The possessive form of a *single* noun is formed by adding _`'s_.
For example:

[example]
====
_The developer`'s guide_

_The boss`'s office_
====

The possessive of a *plural* is formed by the following process:

* write the ordinary plural form
* if that plural form already ends in _s_ (the commonest case), place the apostrophe *after* that _s_
* in the few irregular cases where the plural form does not end in _s_ (for example, _men_, _women_, _children_, _sheep_), add _`'s_, as for a single noun

For example:

[example]
====
_The employees`' salaries_ +
_The bosses`' salaries_ +
_The women`'s records_ +
_The mice`'s tails_
====

For when to form a possessive using an apostrophe, and when to use _of_, see <<a_to_z.possessive, possessive>>.

[[a_to_z.apposition]]
== apposition
Consider this sentence:

[example]
====
_The CEO, Nick Smith, spoke to a company employee._
====

In this sentence, _The CEO_ and _Nick Smith_ identify the same entity (in this case, a person).
In other words, _Nick Smith_ is another name for _the CEO_.

In the terminology, the phrase _Nick Smith_ is "in apposition" with _the CEO_. +
Notice that the phrase that is in apposition is delimited by commas.

Now, consider this sentence:

[example]
====
_The CEO, Nick Smith, spoke to company employee Susan Rae._
====

In this case, _company employee_ and _Susan Rae_ do *not* identify the same entity. +
It is likely that there is only one _Susan Rae_ in this context, but there are, no doubt, many company employees. In other words, _Susan Rae_ is not another name for _company employee_.

Hence, _Susan Rae_ is *not* in apposition with _company employee_ and, for that reason, is not delimited by commas here.

Let's look at an example that is more relevant to the context of technical documentation. +
Here is some information about the parameters of a method.

[example]
====
_The method takes a single parameter: `duration`._ +
_The method`'s parameter, `duration`, specifies the time in milliseconds that the animation should run._
====

Here, as there is only one parameter, _the method`'s parameter_ and _duration_ refer to the same entity. _Duration_ is in apposition with _the method`'s parameter_, and so is delimited by commas.

Now, here is some similar information but, this time, the method takes more than one parameter.

[example]
====
_The method takes two parameters: `startTime` and `duration`._

_The parameter `duration` specifies the time in milliseconds that the animation should run._
====

Here, _parameter_ and _duration_ do not mean the same thing.
For this reason, _duration_ is not in apposition with _parameters_, so it is *not* delimited by commas.

== articles
Missing and misused articles (_a_, _an_, _the_) are a very common problem, especially for speakers of languages which do not have articles, such as Finnish, Russian, and Japanese.

Although the basic concept of articles is quite simple, there are some special cases and exceptions that can complicate the issue.
You may find the following useful:

// Because of Finnish text
pass:[<!-- vale Vale.Spelling = NO -->]

* http://www.grammarly.com/handbook/grammar/articles/[Grammarly Handbook] about the use of articles (in English)

* https://englantia.wordpress.com/grammar/yksikko-monikko-ja-artikkelit/[Yksikkö, monikko ja artikkelit] (in Finnish)

* http://materiaalit.internetix.fi/fi/kielet/englanti11/e1_lesson2.htm[Articles] (in Finnish)

pass:[<!-- vale Vale.Spelling = YES -->]

== asterisk
The _*_ character is called an _asterisk_. +
Do not use the term _star_.

== at
The symbol _@_ is called the _at_ character.

This comes from traditional accounting notation where the cost of multiple items at a specific cost would be given as, for example, _10 apples&nbsp;@&nbsp;5&nbsp;cents&nbsp;=&nbsp;50&nbsp;cents_, which would be read as _10&nbsp;apples *at* 5&nbsp;cents equals 50&nbsp;cents_.

== author
In some articles, it may be necessary to show the author. +
Authors can identify themselves after the section title as follows:

----
 [.author]
 [name]#Marko Gr&ouml;nroos# <magi@vaadin.com>
----


For section, this should be in the overview.
// Not sure what this means?

Note that for non-ASCII characters, you should use HTML character entity markup.

== backslash
The "\" character is called _backslash_.

== braces
The _{_ and _}_ characters are called _braces_.

== brackets
The _[_ and _]_ characters are called _brackets_ or _square brackets_.

For the _(_ and _)_ characters, see <<a_to_z.parentheses,parentheses>>.

== capitalization
We should capitalize only when there is a good reason for doing so.
Otherwise, capitalization can creep into lots of areas where it has no place.

One situation where this often happens is in the context of common abbreviations and acronyms. +
We might think that, because capital letters are used in an acronym, we should also use capital letters when the term is written out in full. +
This is usually not the case, unless the term is a proper noun. (See <<a_to_z.proper_nouns, proper nouns>>.)

[%header,cols="1,2"]
|===
|Abbreviation |Full expression
|CLI |command line interface
|MFA |multi-factor authentication
|SaaS |software as a service
|JDK |Java Development Kit +++[+++proprietary name+++]+++
|===

== caret
The _^_ symbol is called a _caret_.

== code

== colon (“:”)
The function of a colon in a sentence is to signal the beginning of an explanation or a list. +
Often, we can think of it as saying, _and it is this..._ or _and this is what I'm talking about..._. +
Some examples of this are:

[example]
====
_There can be only one reason he is late**:** he has missed the flight._ +
_Annabel has three valuable characteristics**:** she is clever, she is conscientious, and she is honest._ +
_On seeing the results of my work, I felt only one emotion**:** pride._
====

A colon is also commonly used to introduce a list, particularly at the end of a sentence. +
For example:

[example]
====
_The parameter can be of several types**:** integer, boolean, or string._ +
_Three cities are in the running to stage the next Olympics**:** Beijing, Chicago, and Melbourne._
====

A colon should not be used to join two full clauses outside the uses mentioned here. +
If you are looking for the right punctuation to join two clauses that have some logical relationship, consider using a <<a_to_z.semi-colon, semi-colon>>. +
Do not use a comma for this purpose.
(See <<a_to_z.comma_splice, comma splice>>.)

Vaadin uses US English in its documentation.
US usage allows a colon to be followed by a sentence beginning with a capital letter, if that sentence is the first of two or more sentences that are governed by the same colon.

[example]
====
_There may be several reasons to learn Esperanto**: I**t is completely regular, so you do not need to learn a lot of exceptions.
It is not associated with any specific country, so has no political baggage.
Finally, it is just fun to learn._
====

However, if the colon governs only one sentence, begin the sentence with a lowercase letter:

[example]
====
_I can give you one good reason to learn Esperanto**: i**t is fun to learn._
====

== colloquial expressions
Avoid using colloquial expressions in Vaadin technical documentation, as they may be unfamiliar to people whose native language is not English.

[[a_to_z.comma_splice]]
== comma splice
Consider the following (incorrectly punctuated) sentence:

[example]
====
_You should never divide by zero, this will cause a runtime error._ +
+++[+++Incorrect+++]+++
====

In this example, we have two complete clauses, as each one has a subject and a finite (full) verb.
It is an error to join the two clauses with a comma. This error is often called a _comma splice_.
(_Splice_ means _join_.)

We have several options to rectify this error.
The simplest option is to make each clause a sentence on its own:

[example]
====
_You should never divide by zero.
This will cause a runtime error._
====

This solution is grammatically correct.
However, it does not show the logical connection between the two clauses. A better option would be to use different punctuation.
A semi-colon would serve the purpose:

[example]
====
_You should never divide by zero; this will cause a runtime error._
====

Unlike a comma, a semi-colon can be used to join two complete clauses.
Moreover, it implies a logical connection between them, although the specific logic is left to the reader's interpretation. (See <<a_to_z.semi-colon, semi-colon>>.)

Another option would be to use an appropriate conjunction.
As its name suggests, a conjunction is a joining word.
Some common conjunctions are: _and_, _but_, _or_, _because_, _as_ and _so_.
Conjunctions often imply some kind of logical connection between the clauses that they join.

In our example, we want to express a concept of causation.
_Because_ and _as_ would be suitable options:

[example]
====
_You should never divide by zero, because this will cause a runtime error._ +
_You should never divide by zero, as this will cause a runtime error._
====

Although the meaning of these two versions is the same, in fact, by convention, we use _as_ more often than _because_ to express this kind of causation.
Consequently, the second version is the best of the options that we have discussed.

== commas
There are a small number of situations where commas are mandatory in English.
These include:

* non-defining <<a_to_z.relative_clauses,relative clauses>>
* noun phrases in <<a_to_z.apposition,apposition>>
* after introductory <<a_to_z.adverb_phrases,adverb phrases>>
* delimiting two or more adjectives before noun
* delimiting items in a list

== conditional

== congratulations
Avoid congratulating the reader, for example, for successfully working through a tutorial and completing the process that the tutorial describes.
It sounds patronizing.

[[a_to_z.contractions]]
== contractions
Contractions (or "contracted verb forms") are those where one or more letters are omitted. For example:

[example]
====
She's on her way to the meeting. [_She's_ is a contraction of _she is_.]

They'll be here on Friday. [_They'll_ is a contraction of _they will_.]
====

In general use, contractions are perfectly acceptable and correct. In fact, using contractions can help to make a non-native speaker's English sound much more natural.

However, contractions are not generally appropriate in formal contexts, such as academic works and legal documents.
We have made the decision not to use contractions in our technical documentation, perhaps sacrificing a little friendliness of tone in the interests of simplicity of language.

== control-key combinations
If your audience includes macOS users, provide the appropriate key-naming terminology.
Spell out _Control_ and _Command_, rather than abbreviating them.
For example:

[example]
====
Press [guibutton]#Control+S# ([guibutton]#Command+S# on Macintosh) to save.
====

[[a_to_z.countable_entities]]
== countable (and uncountable) entities
Some entities have the characteristic of existing as separate objects, such that we can count them. +
For example, books are objects that exist separately from each other, so that it makes sense to talk about _one book_, _two books_, and so on. +
We call this category of objects _countable_.

We view some other entities as existing in bulk, as amounts of something, rather than a number of separate objects that we can count. +
For example, we apply the label _air_ to a contiguous body of gaseous substances. It does not usually make sense to talk about _one air_ or _two airs_. +
The same applies to entities such as _sugar_, _water_ and aluminum. +
We call this category of entities _uncountable_.

From the point of view of grammar, it is important to consider whether or not some entity is countable. +
For example, the indefinite articles, _a_ and _an_, convey the meaning of _one_ of something. +
Hence, it makes sense to use them with countable nouns, but not with uncountable ones. +
There is no meaning in the phrases _an air_ or _a water_.

Similarly, countable nouns, by definition, can be plural. +
Uncountable nouns, again by definition, cannot be plural.

However, there is a small trap here. +
Many nouns cannot be categorically defined as either countable or uncountable; it depends on their meaning in the given context.

For example, _time_ as a concept is uncountable. +
It would not make sense to say, for example:

[example]
====
_I'm sorry I haven't got *[line-through]#a time#* to talk to you now._
====
On the other hand, _time_ is countable when it means an occasion or a period. +
For example:

[example]
====
_I remember *a time* when 1 Mbyte was a lot of memory._ +
_How many *times* have I asked you not to do that?_
====

Consider, too, the difference between:

[example]
====
_I don't like *coffee*._ +
and +
_Would you like *a coffee*?_ +
_How many *coffees* have you had this morning?_
====

== cultural references

== currency
Place currency symbols before the numeric amount. For example:

====
$25.50

€3

&yen;45.00
====

In general, in the absence of other information, we assume that the dollar ($) symbol indicates US dollars.
It is not necessary to specify this.

However, where it is required to distinguish between dollar currencies of different states, it should be written as in the following examples:

====
US$4.50

AUS$19.10

CA$200

HK$99.99
====

There is no hard-and-fast rule for forming country codes in this context.
Just make sure that it is clear which country is being referred to.

== dangling participles
Participles are formed from verbs. Present participles end in _-ing_; past participles often end in _-ed_, though there are many irregular forms. Some examples:

[cols="1,1,1"]
|===
|*infinitive*
|*present participle*
|*past participle*
|to bring
|bringing
|brought
|to have
|having
|had
|to lead
|leading
|led
|to walk
|walking
|walked
|to write
|writing
|written
|===

Participles are often used as convenient concise forms. For example:

====
*Being* the project leader, Hannah Jones chaired the meeting. +++[+++A more concise form of: _As she is the project leader, Hannah Jones chaired the meeting._+++]+++

I was given a spec *written* on the back of an envelope. +++[+++An alternative form of: _I was given a spec that was written on the back of an envelope._+++]+++

*Having* caught a terrible cold, I phoned my colleagues to postpone the meeting. +++[+++In other words: _As I had caught a terrible cold, I postponed the meeting._+++]+++
====

Participles can work well when used in this way, but we need to be careful that our sentence is unambiguous. Consider the last example again:

====
Having caught a terrible cold, I phoned my colleagues to postpone the meeting.
====

Who had caught the cold?
Was it me or was it my colleagues?
Clearly, it was me, but how do we know this?
We know because *we assume that the next noun phrase after the participle clause indicates the person or thing that the participle refers to*.

Look at these similar sentences:

====
Being corrupt, the file was rejected. +++[+++Since the next noun phrase after the participle phrase is _the file_, it is clear that it is the file that is corrupt.+++]+++

Being corrupt, I rejected the file. +++[+++In this case, basing our understanding purely on the word order, we might interpret this to mean that I am the one who is corrupt.+++]+++
====

In most cases of such poorly chosen word order, we can probably guess at the intended meaning.
However, our goal is that our readers should correctly interpret our material on the first reading.

When the structure of the sentence leaves it unclear to whom or what the participle refers, this is called a "dangling" or "unrelated" participle.

Here are some other examples of poorly chosen, and hence distracting, word order, with some suggestions for improvement:

[cols="1,1"]
|===
|*"Dangling participle" version*
|*Improved version*
|*Being* a public holiday, the office was closed.
|As it was a public holiday, the office was closed.
|*Having* crashed three times in one week, we decided to replace the server.
|As the server had crashed three times in one week, we decided to replace it.
|===

== dash (“–”)

== dates
In our documentation, we use the format `<month> <day number>, <year>`. We do not use the ordinal abbreviation suffixes _-st_, _-nd_, _-rd_ or _-th_.
Nor do we write the word _the_ between the month name and the day number.
For example:

[example]
====
June 15, 2020

May 1, 2022
====

Avoid expressing dates using variations of the _mm/dd/yyyy_ or _dd/mm/yyyy_ formats.
There are different conventions for these formats around the world, so that the possibility of confusion and misunderstanding is high.
Instead, write out dates using month names, as described earlier.

== days
Write out the days of the week in full, if space allows this.
Otherwise, abbreviate the names to three characters, as follows:

[%header,cols="2,1,1"]
|===
|Day | 3-letter abbreviation | 2-letter abbreviation
|Sunday | Sun | Su
|Monday | Mon | Mo
|Tuesday | Tue | Tu
|Wednesday | Wed | We
|Thursday | Thu | Th
|Friday | Fri | Fr
|Saturday | Sat | Sa
|===

== definite article (“the”)

== double quotes (“)
See “quotation marks”

== em dash ("&mdash;")
In US English, a pair of _em_ dashes (so called because they have the same width as the letter _M_) are used to indicate a fragment of text in parenthesis. The pair of _em_ dashes imply a more significant break in the structure of the sentence than one marked by a comma or brackets.
There should be no space either before or after an _em_ dash.
For example:

[example]
====
The tool does not fix the bug&mdash;if only it were that simple&mdash;but it does help you to identify its location.

You can use a dropdown or a combo&mdash;personally, I prefer the latter&mdash;but, either way, the user needs to be able to select from the available options.
====

A single _em_ dash can be used to add an afterthought or aside.
For example:

[example]
====
You can use whichever IDE you prefer&mdash;it is entirely up to you.

Make sure your code is well commented&mdash;you will thank yourself when you revisit it six months later.
====

Avoid using the _em_ dash too much; it can quickly become distracting and even irritating.
Very often, a comma or semi-colon is a more appropriate choice of punctuation, especially in more formal writing, such as technical documentation.
The two previous examples could also be written as:

[example]
====
You can use whichever IDE you prefer; it is entirely up to you.

Make sure your code is well commented; you will thank yourself when you revisit it six months later.
====

== emphasis
Use the emphasis styles, such as
`+++[+++classname+++]#+++ClassName+++#+++` emphasis for class names and
`+++[+++methodname+++]#+++methodName()+++#+++` for methods.

.Custom emphasis styles
[%header, cols="2,4,2"]
|====
|Style Element | AsciiDoc Example Code | Result
|Class Names | `+++[classname]#Component#+++` | [classname]#Component#
|Interface Names | `+++[interfacename]#EventListener#+++` | [interfacename]#EventListener#
|Method Names | `+++[methodname]#setValue()#+++` | [methodname]#setValue()#
|GUI Buttons | `+++[guibutton]#OK#+++` | [guibutton]#OK#
|GUI Labels | `+++[guilabel]#OK#+++` | [guilabel]#OK#
|File Names | `+++[filename]#readme.txt#+++` | [filename]#readme.txt#
|Other Monospace | `+++`appName`+++` | `appName`
|Key Caps | `+++kbd:[Ctrl + C]+++` | kbd:[Ctrl + C]
|Menu Choices | `+++"Help > Updates"+++` or
`+++menu:Help[Updates]+++`| "Help > Updates"
|====

== en dash ("&ndash;")
The _en_ dash (so called because it has the same width as the letter _N_) is commonly used to indicate a range of values.
When used in this way, it is not preceded or followed by a space.
For example:

[example]
====
Select a number in the range 0&ndash;255.

The parameter should be a string of 8&ndash;10 characters.

The licence enables you to use the software on 1&ndash;3 computers.

He was chief designer (2003&ndash;9), and subsequently CEO of the company (2009&ndash;12).

The office is open Monday&ndash;Friday.
====

We can also describe ranges by using the words _from_ and _between_.
These forms should not be mixed with the _en_ dash.
Use one form or the other, but not both.
For example:

[example]
====
You can use the licence on between 1 and 3 workstations. +
+++[+++Not _between 1&ndash;3 workstations_.+++]+++

The parameter should be a string of from 8 to 10 characters. +
+++[+++Not _a string of from 8&ndash;10 characters_.+++]+++
====

== euro
The _euro_ symbol (&euro;) is represented as `\&euro;` in AsciiDoc.
In amounts of money, place the _euro_ symbol immediately *before* the numeric quantity, in the same way as for, for example, the dollar or pound symbol.

== exclamation mark ("!")
Avoid using exclamation marks in technical documentation, unless it is as part of some code syntax.
Its use in normal text is distracting and detracts from the professional tone.
For example:

[example]
====
You have now created your component! +++[+++Avoid this usage.+++]+++

`#!/bin/bash` +++[+++The exclamation mark is part of the script syntax.+++]+++
====

== future tense
Avoid using the future tense to describe the expected behavior of something.
Instead, use the present tense.
For example:

[example]
====
When the compilation is complete, the program *displays* summary information.
*Not _[line-through]#will display#_.*

Run the code in debug mode. Execution *pauses* at the breakpoint that you have specified.
*Not _[line-through]#will pause#_.*
====

== headings
You should use title or headline case for all headings and chapter, section, or sub-section titles.

[example]
====
 = Style Guidelines for Vaadin Documentation
====

For a detailed description of capitalization rules, see for example:

* http://grammar.yourdictionary.com/capitalization/rules-for-capitalization-in-titles.html[Rules for Capitalization in Titles of Articles]: Your Dictionary

== hyphen (“-”)
There is often confusion about whether or not to use a hyphen in compound words (such as _start-up_ and _onboarding_) and words that include a prefix (such as _presales_ and _multifactor_).
English has no hard-and-fast rules about this; it is simply a question of accepted usage.

In general, use the Merriam-Webster online dictionary as a guide.
If the full compound word or prefixed word exists in the dictionary, use the form that the dictionary gives.
If the full compound word or prefixed word does *not* exist in the dictionary, use a hyphen.
For example:

====
start-up (noun) +
+++[+++This is the form given in the dictionary.+++]+++

setup (noun) +
+++[+++This is the form given in the dictionary.+++]+++

log-in (noun)
*[Neither _log-in_ nor _login_ is given in the dictionary, so use a hyphen.]*
====

Sometimes, we want to mention a series of items, all hyphenated on the same base word.
In such cases, we can reduce repetition by applying distributed hyphenated descriptive words to the base word.
For example:

[example]
====
The device used a combination of first-generation and second-generation chips. +
+++[+++OK, but repetitive.+++]+++

The device used a combination of first- and second-generation chips. +
+++[+++Better.+++]+++
====

In general, use a hyphen in compounds formed from an adverb and an adjective, in order to avoid ambiguity as to which word the adverb qualifies.
For example:

[example]
====
I am grateful to my *hard-working* colleagues.
*Not _[line-through]#hard working# colleagues_.*

This benefits *low-paid* employees.
*Not _[line-through]#low paid# employees_.*
====
However, do not use a hyphen when the adverb ends in _-ly_.
In these cases, there is no ambiguity concerning which word the adverb applies to.
For example:

pass:[<!-- vale Google.LyHyphens = NO -->]
[example]
====
The technology is a *closely guarded* secret.
*Not _[line-through]#closely-guarded# secret_.*

This benefits *poorly paid* employees.
*Not _[line-through]#poorly-paid# employees_.*
====
pass:[<!-- vale Google.LyHyphens = YES -->]

== indefinite article
See <<a_to_z.a_an,"a" / "an">>

== introduction

== introductory clauses
Always use comma after an link:https://owl.english.purdue.edu/owl/resource/607/03/[introductory clause, phrase, or word].

[example]
====
After a while, you can look into it.

Nevertheless, fields are components.

Meanwhile, you can use a workaround.

Additionally, we need to make the call to the REST service.
====

== jargon
Avoid using jargon.
Try to use inclusive language at all times.

== Latin abbreviations

== lists
An inline list should be introduced by a colon.
Items in the list can be separated by commas.
However, in cases where items in the list themselves contain commas, it is better to use semi-colons as separators, in order to avoid confusion.
For example:

[example]
====
This curry has three vital ingredients: onion, potato, and spinach.

This curry has three vital ingredients: onion, which should be roughly chopped; potato, which should be diced; and fresh spinach leaves, which should be thoroughly washed before use.
====

== menu header
If an AsciiDoc file is intended to be rendered as a section, a page, or tab, it must have a _header block_.
This is used to build the menu in the documentation website.

----
---
title: Title of the article
order: 4
layout: page
---
----

`title`::
  The title to be displayed in the menu.
  The title should be same as the title of the article, but can be a shortened version to keep the menu more tidy.

`order`::
  Order number in the menu.
  If articles are reorganized, the order numbers may need to be reorganized, too.
  It is good practice to make them multiples of 10 or 100, in order to leave space to add new articles without having to renumber all the others.

`layout`::
  The layout can be either `page` or `tabbed-page`.
  In a tabbed page, the sub-articles are displayed in tabs rather than in the menu.
  The default tab content comes from the `index.asciidoc`.

`tab-title`::
  Sets the tab title in `tabbed-page` pages.
  It should be kept short.

== method names
Use empty parentheses at the end of method names to denote that they are methods.
In general, do not list parameter types for methods, unless this is required in order to indicate a specific version of a method.
It may also be necessary to specify a parameter when it is relevant in the context.
For example:

[example]
====
Call `setEnabled(false)` to disable it.
====

== months
Write out names of months in full, if space allows.
If you need to abbreviate month names, use the following abbreviations:

[%header,cols="1,1"]
|===
|Month | Abbreviation
|January | Jan
|February | Feb
|March | Mar
|April | Apr
|May | May
|June | Jun
|July | Jul
|August | Aug
|September | Sep
|October | Oct
|November | Nov
|December | Dec
|===

Do not add a period to the abbreviated names.

== multiplication sign
If you need to show the multiplication sign, use &times; (`\&times;`), not the letter _x_.
One case for using the multiplication sign is to refer to dimensions.
There should be a non-breaking space on either side of the multiplication sign.
For example:

[example]
====
The image size should be at least 150&nbsp;&times;&nbsp;150 pixels. +
+++[+++That is, _150\&nbsp;\&times;\&nbsp;150 pixels_.+++]+++
====
In code, you obviously need to use the symbol that is required by the  language you are using, which is generally the asterisk character (_*_).

== non-breaking space
Use a non-breaking space to prevent the browser from splitting terms in a way that could cause confusion for the reader.
Some examples are:

* between a number and its units
* between numbers and words that define a date
* between a person's title (_Ms_, _Dr_, _Prof._) and their name
* between words separated by a slash ("/") character

A non-breaking space can be written in AsciiDoc as `\&nbsp;`.

[[a_to_z.nouns_as_descriptors]]
== nouns as descriptors
English is very versatile in allowing nouns to be used as if they were adjectives.
For example:

[example]
====
Please close the *office* door quietly.

Select your preferred *keyboard* layout.
====

Bear in mind that when nouns are used like adjectives in this way, they are almost always used in the singular form, not plural.
For example:

[example]
====
She is the manager of a *shoe* shop. +++[+++Not _a shoes shop_.+++]+++

This is the responsibility of the *microchip* manufacturer. +++[+++Not _the microchips manufacturer_.+++]+++
====

== number sign
Do not use the _#_ character to indicate a number.
For example:

[example]
====
[line-through]#See item #3.#
 *[Instead, write _See item number 3_.]
====

== numbers
In text in general, integers between 0 and 9 (inclusive) should be written in words, while other numbers should be written as numerals.
Try to avoid beginning a sentence with numerals.
For example:

[example]
====
The team consisted of one team leader, two senior programmers, and 10 junior programmers.
====

However, in certain contexts, it may be preferable to write all numbers in numerals.
pass:[<!-- vale Microsoft.Units = NO -->]
Such a context might be, for example, statistical or mathematical content, or where units are specified (such as degrees, metres, or kilograms).
pass:[<!-- vale Microsoft.Units = YES -->]
For example:

[example]
====
In a survey, 7 out of 10 developers said that they preferred Python to Perl.

You can calculate the value using `2 * &pi; * r`.

The sample was found to have expanded by 6 mm at the end of the experiment.
====

Similarly, use numerals for

--
* page numbers
* version numbers
* numbers in a technical context, such as size of memory, processor speed, file sizes, etc.
* percentages
* negative numbers
* decimal numbers
* ranges of numbers
--

For a decimal number greater than &ndash;1 and less than 1, put an explicit 0 before the decimal point.
For example:

[example]
====
0.5 +++[+++Not _.5_+++]+++

-0.02 +++[+++Not _-.02_+++]+++
====


Avoid using Roman numerals (for example, _I_, _IV_, _vii_, _ix_).

Write out a number if it is an approximation, rather than an accurate figure.
For example:


[example]
====
There must have been a thousand people at the meeting. +
+++[+++Not _There must have been 1,000 people&hellip;_.+++]+++

You had to write hundreds of lines of code. +
+++[+++Not _You had to write 100s of lines of code._+++]+++
====


pass:[<!-- vale Google.Ordinal = NO -->]
Write out ordinal numbers (_first_, _second_, _third_, etc.) in full.
Do not use _1st_, _2nd_, _3rd_, etc.
pass:[<!-- vale Google.Ordinal = YES -->]

== Oxford comma
See “lists”.

[[a_to_z.parentheses]]
== parentheses

== passive voice

== percentages
Use the required numeral and the percent sign ("%") with no space between them.
If the percentage begins the sentence, write the percentage expression in words.
For example:


====
In *99%* of cases, the methodology works.

*Ten percent* of hacking attempts succeeded.
====

== phrasal verbs

== plurals
Do not use _s_ in parentheses to indicate that there may be one or more of something.
== For example

[example]
====
Inspect the error message[line-through]#(s)# for more detailed information. +++[+++Avoid this form of optional plural.+++]+++
====

This usage can be confusing for the reader.
Instead, choose an alternative wording, even if it is slightly longer.
For example:

[example]
====
Inspect any error messages for more detailed information.
====

== plus
Do not use _plus_ as a synonym for _and_.

[[a_to_z.possessive]]
== possessive
English has two main ways of forming a possessive: the apostrophe and the preposition _of_.

In general, use the apostrophe for people and animals.
For example:

[example]
====
_The team leader's keyboard_
_A manager's salary_
_The employees' well-being_
_The horse's mouth_
====
Use the preposition _of_ for things and ideas.
For example:

[example]
====
_the name of the method_
_the beginning of the process_
_the keyboard of the computer_
_the door of the office_
====
A third possibility is to use one noun as a descriptor of another.
For example:

[example]
====
_the method name_
_the computer keyboard_
_the office door_
====
Notice that, in the last group of examples, the noun that is used as a descriptor is always singular, even if the word it governs is plural.
For example:

[example]
====
_the method names_
_the computer keyboards_
_the office doors_
====
See also <<a_to_z.nouns_as_descriptors, nouns as descriptors>>; <<a_to_z.apostrophe, apostrophe>>.

== procedures
In technical documentation, we very often want to describe the procedures that are necessary in order to perform some task.
Such procedures usually consist of a series of steps.

In most cases, we start with a top-level sentence.
For example:


[example]
====
Create a new project as follows:

To create a new project, follow these steps:
====

Do not start with an incomplete sentence at the top-level which is then completed by the text of each step.
This structure obliges the reader to keep the top-level text in mind in order to interpret the subsequent text correctly.
For example:

[example]
====
To create a new project, you must: +
+++[+++Avoid beginning with an incomplete sentence which is completed by the text of subsequent steps.+++]+++

Log in&hellip;

Make sure you have installed the plugin&hellip;

Create a new app&hellip;
====

Use parallel structures in the steps that make up the procedure.
In other words, structure each step in a similar way to the others.

== product names
Product names, such as List Box, should be capitalized as is usual for proper nouns, not as if they were class names.
Use the class name if you are referring specifically to a class.
For example:

[example]
====
[classname]#ListBox# extends [classname]#ListBoxBase#.
====

However, do not use class names in component documentation, which should be language-independent; that is, neither Java- nor JavaScript-specific.

[[a_to_z.proper_nouns]]
== proper nouns

== punctuation
See the specific entries for each punctuation mark; for example, “commas”, “quotation marks”, etc.

== quotation marks
In general, when you want to put text in quotation marks, use double quotation marks ("&nbsp;").
Avoid using single quotation marks ('&nbsp;'), unless, of course, it is required by some code syntax.

[[a_to_z.relative_clauses]]
== relative clauses
Relative clauses allow us to give more information about a person or thing that we mention in a sentence.
For example:

[example]
====
*Instead of saying:* _I asked Linda Johnson. She works in the same office as me_,

*it is neater to say:* _I asked Linda Johnson, who works in the same office as me_.
====

They are called "relative clauses" because they relate to some entity in the main clause of our sentence.
The word that links the relative clause to the main clause is often a "W" word, such as _which_, _who_, _where_, _when_, or _whose_.
The word _that_ is also often used as the linking word.
For example:

[example]
====
The software is written in Java, which is our preferred language.

Jean Reboulet, who led the design team, attended the meeting.

The conference was held in San Francisco, where the company has its headquarters.

We recommend performing full backups at the weekend, when the system is less busy.

We contacted Sandra Stein, whose team maintains the library.

This is the team that maintains the library.
====

We need to be aware that there are two kinds of relative clause: *defining* and *non-defining*.

Why is this important?
It matters because it has an impact on the punctuation we need to use, and also on the sentence structure.

A *defining relative clause*, as the name suggests, defines an entity in the main clause.
It gives us essential information in order to identify the person or thing that was mentioned.
In other words, without the information in this clause, our sentence would not have the same meaning and might not even make sense at all.
For example:

[example]
====
This is the bug *which our testing team reported*. +
+++[+++The relative clause is essential in order to understand which bug is being talked about.+++]+++

The place *where you parked your car* is private property. +
+++[+++The relative clause identifies the place that was mentioned.+++]+++

====

== screenshots
Every page should have at least one screenshot.
There should at least be a screenshot in an introduction or overview section.

== section
The basic structure of a new section file is as follows:


[example]
====
----
---
title: Title of the section
order: 4
layout: page
---

[[thechapter.thefeature]]
= Fine Feature

[.author]
[name]#Marko Gr&ouml;nroos# <magi@vaadin.com>

The Fine Feature is a feature of a feature...

[[thechapter.thefeature.basic-use]]
== Basic Use
----

&vellip;
====

[[a_to_z.semi-colon]]
== semi-colon (“;”)

== single quotes (&lsquo;&nbsp;&rsquo;)
See “quotation marks”.

== slang
We need to avoid slang for two good reasons.
One reason is that it detracts from the professional style that we are trying to convey with our documentation.
The other reason is that non-native speakers may not be familiar with slang terms.
That would impact the accessibility of our documentation.

[[a_to_z.slash]]
== slash (“/”)
The slash character is often used to indicate one or more possibilities from a group.
The slash character should be preceded and followed by a non-breaking space.
For example:

[example]
====
The library contains routines to facilitate input&nbsp;/&nbsp;output.
====

Try to avoid excessive use of the slash character, particularly when the words _and_ or _or_ would suffice.
For example:

[example]
====
I was responsible for bug-fixing *and* maintenance work. +++[+++Not _bug-fixing&nbsp;/&nbsp;maintenance work_.+++]+++

Please get back to me if you have any questions *or* queries. +++[+++Not _if you have any questions&nbsp;/&nbsp;queries_.+++]+++
====

Avoid using slashes in abbreviations.
For example:

[example]
====
in charge +++[+++Not _i/c_.+++]+++

AC-DC +++[+++Not _AC/DC_, unless in the context of Australian rock groups.+++]+++
====

Do not use the slash character to write fractions, such as _1/2_ or _3/4_, as these may be liable to misinterpretation.

Instead, use the _&frac12;_ (`\&frac12;` or `\&half;` in AsciiDoc), _&frac14;_ (`\&frac14;`), or _&frac34;_ (`\&frac34;`) characters, if appropriate.
If the required character is not available, use a decimal or spell it out.
For example:

[example]
====
The inverse of 8 is *one-eighth*.

The inverse of 8 is *0.125*.
====

== split infinitive
The infinitive of a verb is the form that includes the particle "to".
Examples of infinitives are _to have_, _to hold_, and _to program_.

Traditionally, it was considered bad style to "split" the infinitive by placing an adverb between the particle and the verb. For example:

[example]
====
It is necessary to *fully* understand the process before starting. +++[+++Instead of, for example, _to understand the process fully_.+++]+++

We had to *completely* rebuild the library. +++[+++Instead of, for example, _to rebuild the library completely_.+++]+++
====

Although split infinitives are generally considered to be acceptable these days, it is worth considering whether you could easily write your sentence so as to avoid it.

However, there may be some cases where strictly imposing the ideal of avoiding split infinitives could result in an awkward sentence or even introduce ambiguity.
Clearly, we need to prioritise simplicity, clarity, and accuracy at all times, even if it means we have to compromise on elegance.

== time
Use the _ratio_ character ("&ratio;", `\&ratio;`) as the delimiter in times, rather than a standard colon.
The difference is that the _ratio_ character is vertically centered on the line, whereas the colon character is anchored to the baseline.
For example:

[example]
====
The seminar begins at *11&ratio;00* UTC. +
+++[+++Not _11:00 UTC_.+++]+++
====

[[a_to_z.time_clauses_in_future]]
== time clauses in the future
We often use time clauses to refer to some time in the future.
Such clauses may begin with _when_, _while_, _until_, _as soon as_, _before_, and _after_.
In English, we generally use a present or present perfect tense in this type of clause, in spite of the fact that it refers to a future time.
The remainder of the sentence may use any appropriate future form, or an imperative (instruction) form.
For example:

[example]
====
As soon as you *get* to the office, call me. +++[+++Not _As soon as you will get&hellip;_+++]+++

While I *am* in Scotland, I'll visit Edinburgh Castle. +++[+++Not _While I will be in Scotland&hellip;_+++]+++

When you *have finished* that work, you can start the next task. +++[+++Not _When you will finish&hellip;_ or _When you will have finished&hellip;_+++]+++
====

== underscore
The character "&lowbar;" is called the _underscore_ character.
You can avoid formatting problems in AsciiDoc by using the `\&lowbar;` entity reference.

== units
There is a space between the numeric quantity and the units.
Abbreviated forms of units are written in the singular.
For example:

[example]
====
The maximum permissible weight is 28 *lb*. +++[+++Not _28 lbs_.+++]+++
====

The following are the standard abbreviations for common units:

[cols="1,1"]
|===
|*unit*
|*abbreviation*
|degree
|&deg; (no space)
|feet
|ft
|gigabyte
|GB
|gram
|g
|hour
|h
|inch
|in
|kilobyte
|kB
|kilowatt
|kW
|litre
|l
|megabit
|Mbit
|megabyte
|MB
|megawatt
|MW
|metre
|m
|millimetre
|mm
|minute
|min
|ounce
|oz
|pound (weight)
|lb
|second
|s
|terabyte
|TB
|===

It is very common to use a compound expression with a numeric value and units as a descriptive phrase.
In such cases, use a hyphen to join the compound expression.
Notice that the singular form of the unit is always used.
For example:

[example]
====
A *22-page* book. +++[+++Not _A 22-pages book._+++]+++

A *twenty-mile* journey. +++[+++Not _A twenty-miles journey._+++]+++

A *25,000-ton* ship. +++[+++Not _A 25,000-tons ship._+++]+++
====

== Vaadin versions
Do not use _Vaadin 14_ or other Vaadin version numbers in text.
Instead, use the [role="since:com.vaadin:vaadin@V19"] tag to indicate version numbers.

== x
Do not use the character _x_ as a multiplication sign.
Instead, use the multiplication symbol &times; (`\&times;` in AsciiDoc).
