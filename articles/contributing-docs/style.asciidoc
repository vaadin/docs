---
title: Style
order: 75
layout: page
---

= Style
:experimental:

++++
<style>
.line-through {
  text-decoration: line-through;
}

.sect2 > .paragraph,
.sect2 > .exampleblock {
  margin-left: 1em;
}
.sect2 > h3 {
  font-size: var(--docs-font-size-h4);
}
.exampleblock.exampleblock {
  border-radius: var(--docs-border-radius-l);
  padding: var(--docs-space-m);
  margin: var(--docs-paragraph-margin) 0;
  border: 1px solid var(--docs-divider-color-2);
}
.exampleblock > .content > :first-child {
  margin-top: 0;
}


.exampleblock > .content > :last-child,
.exampleblock > .content > .paragraph:last-child > p:last-child {
  margin-bottom: 0;
}
</style>

<style>
#toc {
  max-height: calc(100vh - var(--docs-space-l));
  overflow: auto;
}
</style>
++++

== Admonitions
Admonition blocks such as `[NOTE]`, `[TIP]`, or `[WARNING]` can be used to emphasize important issues.
However, do not overuse them, as this can interfere with the flow of the text . +
There should be no more than three admonitions on a page.

Use a descriptive title for admonitions. +
For example:

[example]
====
.Do not overuse admonitions
[WARNING]
Overusing admonition blocks interrupts the flow.


.Do not overuse admonitions
[WARNING]
Overusing admonition blocks interrupts the flow.
====

== Ampersand ("&amp;")
Do not use the ampersand character in place of _and_ in general text, unless space is limited.

== Articles, Repeating in Lists

One common issue is whether to repeat articles in lists of two or more items. +
In general, you can leave the second and subsequent articles out.

However, there are some cases where it might be better to include the articles:

* Where there is possible ambiguity +
For example:
+
[example]
====
_A text field has a caption and input box_ +
+++[+++This could mean that the text field has both a caption and an input box; or that the text field has a box that is for both the caption and for input.+++]+++

_A text field has a caption and an input box_ +
+++[+++Repeating the indefinite article removes the ambiguity.+++]+++
====
+
In a similar way, there can be ambiguity about the scope of an adjective. +
For example: +
+
[example]
====
_a nested field and layout_ +
+++[+++It is unclear whether the adjective _nested_ applies to both _field_ and _layout_, or only to _field_.+++]+++

_**a** nested field and *a* layout_ +
+++[+++Repeating the indefinite article removes the ambiguity.+++]+++
====
* Where you want to emphasize individual items in a list +
For example:
+
[example]
====

pass:[<!-- vale write-good.ThereIs = NO -->]

** _There are two ways: *the* right way and *the* wrong way_.

pass:[<!-- vale write-good.ThereIs = YES -->]

** _**The** Good, *the* Bad, and *the* Ugly_
====

== Asterisk
The _*_ character is called an _asterisk_. +
Do not use the term _star_.

== At
The symbol _@_ is called the _at_ character.

This comes from traditional accounting notation where the cost of multiple items at a specific cost would be given as, for example, _10 apples&nbsp;@&nbsp;5&nbsp;cents&nbsp;=&nbsp;50&nbsp;cents_, which would be read as _10&nbsp;apples *at* 5&nbsp;cents equals 50&nbsp;cents_.

== Author
In some articles, it may be necessary to show the author. +
Authors can identify themselves after the section title as follows:

----
 [.author]
 [name]#Marko Gr&ouml;nroos# <magi@vaadin.com>
----


For section, this should be in the overview.
// Not sure what this means?

Note that for non-ASCII characters, you should use HTML character entity markup.

== Backslash
The "\" character is called _backslash_.

== Braces
The _{_ and _}_ characters are called _braces_.

== Brackets
The _[_ and _]_ characters are called _brackets_ or _square brackets_.

For the _(_ and _)_ characters, see <<style.parentheses,parentheses>>.

== Capitalization

You should use title or headline case for all titles, including chapter, section, and sub-section titles.

[example]
====
= Style Guidelines for Vaadin Documentation
====

For a detailed description of capitalization rules, see for example:

* http://grammar.yourdictionary.com/capitalization/rules-for-capitalization-in-titles.html[Rules for Capitalization in Titles of Articles], Your Dictionary

== Caret
The _^_ symbol is called a _caret_.

== Code

== Colloquial Expressions
Avoid using colloquial expressions in Vaadin technical documentation, as they may be unfamiliar to people whose native language is not English.

== Congratulations
Avoid congratulating the reader, for example, for successfully working through a tutorial and completing the process that the tutorial describes.
It sounds patronizing.

== Contractions
Avoid using contractions (_doesn't_, _can't_, _you're_, and so on) in technical documentation.

== Control-Key Combinations
If your audience includes macOS users, provide the appropriate key-naming terminology.
Spell out _Control_ and _Command_, rather than abbreviating them.
For example:

[example]
====
Press [guibutton]#Control+S# ([guibutton]#Command+S# on Macintosh) to save.
====

== Cultural References

== Currency
Place currency symbols before the numeric amount. For example:

====
$25.50

€3

&yen;45.00
====

In general, in the absence of other information, we assume that the dollar ($) symbol indicates US dollars.
It is not necessary to specify this.

However, where it is required to distinguish between dollar currencies of different states, it should be written as in the following examples:

====
US$4.50

AUS$19.10

CA$200

HK$99.99
====

Unfortunately, there is no hard-and-fast rule for forming country codes in this context.
Just make sure that it is clear which country is being referred to.

== Dash (“–”)

pass:[<!-- vale Vale.Spelling = NO -->]

== Dates
In our documentation, we use the format `<month> <day number>, <year>`. We do not use the ordinal abbreviation suffixes _-st_, _-nd_, _-rd_ or _-th_.
Nor do we write the word _the_ between the month name and the day number.
For example:

[example]
====
June 15, 2020

May 1, 2022
====

Avoid expressing dates using variations of the _mm/dd/yyyy_ or _dd/mm/yyyy_ formats.
Different conventions for these formats are used around the world, so that the possibility of confusion and misunderstanding is high.
Instead, write out dates using month names, as described earlier.

== Days
Write out the days of the week in full, if space allows this.
Otherwise, abbreviate the names to three characters, as follows:

[%header,cols="2,1,1"]
|===
|Day | 3-letter abbreviation | 2-letter abbreviation
|Sunday | Sun | Su
|Monday | Mon | Mo
|Tuesday | Tue | Tu
|Wednesday | Wed | We
|Thursday | Thu | Th
|Friday | Fri | Fr
|Saturday | Sat | Sa
|===

== Emphasis
Use the emphasis styles, such as
`+++[+++classname+++]#+++ClassName+++#+++` emphasis for class names and
`+++[+++methodname+++]#+++methodName()+++#+++` for methods.

.Custom emphasis styles
[%header, cols="2,4,2"]
|====
|Style Element | AsciiDoc Example Code | Result
|Class Names | `+++[classname]#Component#+++` | [classname]#Component#
|Interface Names | `+++[interfacename]#EventListener#+++` | [interfacename]#EventListener#
|Method Names | `+++[methodname]#setValue()#+++` | [methodname]#setValue()#
|GUI Buttons | `+++[guibutton]#OK#+++` | [guibutton]#OK#
|GUI Labels | `+++[guilabel]#OK#+++` | [guilabel]#OK#
|File Names | `+++[filename]#readme.txt#+++` | [filename]#readme.txt#
|Other Monospace | `+++`appName`+++` | `appName`
|Key Caps | `+++kbd:[Ctrl + C]+++` | kbd:[Ctrl + C]
|Menu Choices | `+++"Help > Updates"+++` or
`+++menu:Help[Updates]+++`| "Help > Updates"
|====

== Euro
The _euro_ symbol (&euro;) is represented as `\&euro;` in AsciiDoc.
In amounts of money, place the _euro_ symbol immediately *before* the numeric quantity, in the same way as for, for example, the dollar or pound symbol.

== Exclamation Mark ("!")
Avoid using exclamation marks in technical documentation, unless it is as part of some code syntax.
Its use in normal text is distracting and detracts from the professional tone.
For example:

pass:[<!-- vale Google.Exclamation = NO -->]

[example]
====
You have now created your component! +++[+++Avoid this usage.+++]+++

`#!/bin/bash` +++[+++The exclamation mark is part of the script syntax.+++]+++
====

== Future Tense
Avoid using the future tense to describe the expected behavior of something.
Instead, use the present tense.
For example:

[example]
====
When the compilation is complete, the program *displays* summary information.
*Not _[line-through]#will display#_.*

Run the code in debug mode. Execution *pauses* at the breakpoint that you have specified.
*Not _[line-through]#will pause#_.*
====

== Introductory Clauses
Always use comma after an link:https://owl.english.purdue.edu/owl/resource/607/03/[introductory clause, phrase, or word].

[example]
====
After a while, you can look into it.

Nevertheless, fields are components.

Meanwhile, you can use a workaround.

Additionally, we need to make the call to the REST service.
====

== Jargon
Avoid using jargon.
Try to use inclusive language at all times.

== Latin Abbreviations

Do not use the following Latin abbreviations, but rather write them in English:

pass:[<!-- vale Vaadin.OneSentencePerLine = NO -->]

e.g.::
Rather use expression such as _such as_, _for example_, or _for instance_.
+
Note that _for example_ http://www.myenglishteacher.net/forexample.html[always requires] surrounding commas, while _such as_ only requires preceding comma when it is used in the beginning of a restrictive clause.
+
[example]
====
* You may find, _for example_, JSF or Flash more suitable for such purposes.

* _For example_, consider that you have the following composite class.

* You may find frameworks _such as_ JSF or Flash more suitable for such purposes.

* Some frameworks, _such as_ JSF or Flash, can be more suitable for such purposes.
====

i.e.::
Rather use "_that is_", surrounded with commas.
+
[example]
====
The parameter is the class name of the widget set, that is, without
the extension.
====

etc.::
This abbreviation is sometimes fine to use, but you are nevertheless encouraged to use expressions such as _and so forth_. If used, it should be preceded by comma and followed by period.
+
[example]
====
* You would normally implement some views, _etc_.

* You would normally implement some views, _and so forth_.
====

pass:[<!-- vale Vaadin.OneSentencePerLine = YES -->]


== Listings
You should use the word _follows_ or _following_ to introduce a list or code listing. +
Examples are introduced with _for example_. +
You should end the sentence with a colon (not a period).

For example:

[example]
====
_For example:_

_You can use the following items:_

_It should now look as follows:_
====

== Method Names
Use empty parentheses at the end of method names to denote that they are methods.
In general, do not list parameter types for methods, unless this is required in order to indicate a specific version of a method.
It may also be necessary to specify a parameter when it is relevant in the context.
For example:

[example]
====
Call `setEnabled(false)` to disable it.
====

== Months
Write out names of months in full, if space allows.
If you need to abbreviate month names, use the following abbreviations:

[%header,cols="1,1"]
|===
|Month | Abbreviation
|January | Jan
|February | Feb
|March | Mar
|April | Apr
|May | May
|June | Jun
|July | Jul
|August | Aug
|September | Sep
|October | Oct
|November | Nov
|December | Dec
|===

Do not add a period to the abbreviated names.

== Multiplication Sign
If you need to show the multiplication sign, use &times; (`\&times;`), not the letter _x_.
One case for using the multiplication sign is to refer to dimensions.
There should be a non-breaking space on either side of the multiplication sign.
For example:

[example]
====
The image size should be at least 150&nbsp;&times;&nbsp;150 pixels. +
+++[+++That is, _150\&nbsp;\&times;\&nbsp;150 pixels_.+++]+++
====
In code, you obviously need to use the symbol that is required by the  language you are using, which is generally the asterisk character (_*_).

== Number Sign
Do not use the _#_ character to indicate a number.
For example:

[example]
====
[line-through]#See item #3.#
*[Instead, write _See item number 3_.]
====

== Numbers
In text in general, integers between 0 and 9 (inclusive) should be written in words, while other numbers should be written as numerals.
Try to avoid beginning a sentence with numerals.
For example:

[example]
====
The team consisted of one team leader, two senior programmers, and 10 junior programmers.
====

pass:[<!-- vale Microsoft.Units = NO -->]

However, in certain contexts, it may be preferable to write all numbers in numerals.
Such a context might be, for example, statistical or mathematical content, or where units are specified (such as degrees, metres, or kilograms).
For example:

[example]
====
In a survey, 7 out of 10 developers said that they preferred Python to Perl.

You can calculate the value using `2 * &pi; * r`.

The sample was found to have expanded by 6 mm at the end of the experiment.
====

Similarly, use numerals for

--
* page numbers
* version numbers
* numbers in a technical context, such as size of memory, processor speed, file sizes, etc.
* percentages
* negative numbers
* decimal numbers
* ranges of numbers
--

For a decimal number greater than &#8211;1 and less than 1, put an explicit 0 before the decimal point.
For example:

[example]
====
0.5 +++[+++Not _.5_+++]+++

-0.02 +++[+++Not _-.02_+++]+++
====


Avoid using Roman numerals (for example, _I_, _IV_, _vii_, _ix_).

Write out a number if it is an approximation, rather than an accurate figure.
For example:

pass:[<!-- vale Google.Units = NO -->]

[example]
====
There must have been a thousand people at the meeting. +
+++[+++Not _There must have been 1,000 people&hellip;_.+++]+++

You had to write hundreds of lines of code. +
+++[+++Not _You had to write 100s of lines of code._+++]+++
====

pass:[<!-- vale Google.Ordinal = NO -->]

Write out ordinal numbers (_first_, _second_, _third_, etc.) in full.
Do not use _1st_, _2nd_, _3rd_, etc.

== Passive
Using the _passive_ too much can have the effect of making our language sound excessively formal.

Accordingly, avoid using the _passive_ when it is possible to express the same idea elegantly and simply in _active voice_.

== Percentages

pass:[<!-- vale Microsoft.Percentages = NO -->]

Use the required numeral and the percent sign ("%") with no space between them.
If the percentage begins the sentence, write the percentage expression in words.
For example:


====
In *99%* of cases, the methodology works.

*Ten percent* of hacking attempts succeeded.
====

== Plurals
Do not use _s_ in parentheses to indicate that there may be one or more of something.
== For example

[example]
====
Inspect the error message[line-through]#(s)# for more detailed information. +++[+++Avoid this form of optional plural.+++]+++
====

This usage can be confusing for the reader.
Instead, choose an alternative wording, even if it is slightly longer.
For example:

[example]
====
Inspect any error messages for more detailed information.
====

== Plus
Do not use _plus_ as a synonym for _and_.

[[style.possessive]]
== Possessive
English has two main ways of forming a possessive: the apostrophe and the preposition _of_.

In general, use the apostrophe for people and animals.
For example:

[example]
====
_The team leader's keyboard_
_A manager's salary_
_The employees' well-being_
_The horse's mouth_
====
Use the preposition _of_ for things and ideas.
For example:

[example]
====
_the name of the method_
_the beginning of the process_
_the keyboard of the computer_
_the door of the office_
====
A third possibility is to use one noun as a descriptor of another.
For example:

[example]
====
_the method name_
_the computer keyboard_
_the office door_
====
Notice that, in the last group of examples, the noun that is used as a descriptor is always singular, even if the word it governs is plural.
For example:

[example]
====
_the method names_
_the computer keyboards_
_the office doors_
====
See also <<grammar.nouns_as_descriptors, nouns as descriptors>>; <<punctuation.asciidoc#.apostrophe, apostrophe>>.

== Procedures
In technical documentation, we very often want to describe the procedures that are necessary in order to perform some task.
Such procedures usually consist of a series of steps.

In most cases, we start with a top-level sentence.
For example:


[example]
====
Create a new project as follows:

To create a new project, follow these steps:
====

Do not start with an incomplete sentence at the top-level which is then completed by the text of each step.
This structure obliges the reader to keep the top-level text in mind in order to interpret the subsequent text correctly.
For example:

[example]
====
To create a new project, you must: +
+++[+++Avoid beginning with an incomplete sentence which is completed by the text of subsequent steps.+++]+++

Log in&hellip;

Make sure you have installed the plugin&hellip;

Create a new app&hellip;
====

Use parallel structures in the steps that make up the procedure.
In other words, structure each step in a similar way to the others.

== Product Names

Product names, such as _List Box_, should be capitalized in the same way as proper nouns, and not as class names. +
A class name can be used if specifically referring to a class; for example, _[classname]#ListBox# extends [classname]#ListBoxBase#_. +

[[style.proper_nouns]]
== Proper Nouns

== Screenshots
Every page should have at least one screenshot.
There should at least be a screenshot in an introduction or overview section.

// move this to formatting-organization, if not already there
// TODO: check whether it's necessary to keep this, or if it's essentially
// already covered in formatting-organization

== Section
The basic structure of a new section file is as follows:


[example]
====
----
---
title: Title of the section
order: 4
layout: page
---

[[thechapter.thefeature]]
= Fine Feature

[.author]
[name]#Marko Gr&ouml;nroos# <magi@vaadin.com>

The Fine Feature is a feature of a feature...

[[thechapter.thefeature.basic-use]]
== Basic Use
----

&vellip;
====

== Slang
We need to avoid slang for two good reasons.
One reason is that it detracts from the professional style that we are trying to convey with our documentation.
The other reason is that non-native speakers may not be familiar with slang terms.
That would impact the accessibility of our documentation.

[[style.slash]]
== Slash (“/”)
The slash character is often used to indicate one or more possibilities from a group.
The slash character should be preceded and followed by a non-breaking space.
For example:

[example]
====
The library contains routines to facilitate input&nbsp;/&nbsp;output.
====

pass:[<!-- vale Vale.Repetition = NO -->]

Try to avoid excessive use of the slash character, particularly when the words _and_ or _or_ would suffice.
For example:

[example]
====
I was responsible for bug-fixing *and* maintenance work. +++[+++Not _bug-fixing&nbsp;/&nbsp;maintenance work_.+++]+++

Please get back to me if you have any questions *or* queries. +++[+++Not _if you have any questions&nbsp;/&nbsp;queries_.+++]+++
====

Avoid using slashes in abbreviations.
For example:

[example]
====
in charge +++[+++Not _i/c_.+++]+++

AC-DC +++[+++Not _AC/DC_, unless in the context of Australian rock groups.+++]+++
====

Do not use the slash character to write fractions, such as _1/2_ or _3/4_, as these may be liable to misinterpretation.

Instead, use the _&frac12;_ (`\&frac12;` or `\&half;` in AsciiDoc), _&frac14;_ (`\&frac14;`), or _&frac34;_ (`\&frac34;`) characters, if appropriate.
If the required character is not available, use a decimal or spell it out.
For example:

[example]
====
The inverse of 8 is *one-eighth*.

The inverse of 8 is *0.125*.
====

== Split Infinitive
Although split infinitives are generally considered to be acceptable these days, it is worth considering whether you could easily write your sentence so as to avoid it.

However, there may be some cases where strictly imposing the ideal of avoiding split infinitives could result in an awkward sentence or even introduce ambiguity.
Clearly, we need to prioritise simplicity, clarity, and accuracy at all times, even if it means we have to compromise on elegance.

== Time
Use the _ratio_ character ("&ratio;", `\&ratio;`) as the delimiter in times, rather than a standard colon.
The difference is that the _ratio_ character is vertically centered on the line, whereas the colon character is anchored to the baseline.
For example:

[example]
====
The seminar begins at *11&ratio;00* UTC. +
+++[+++Not _11:00 UTC_.+++]+++
====

== Underscore
The character "&lowbar;" is called the _underscore_ character.
You can avoid formatting problems in AsciiDoc by using the `\&lowbar;` entity reference.

== Units
A space should be inserted between the numeric quantity and the units.
Abbreviated forms of units are written in the singular.
For example:

[example]
====
The maximum permissible weight is 28 *lb*. +++[+++Not _28 lbs_.+++]+++
====

The following are the standard abbreviations for common units:

[cols="1,1"]
|===
|*unit* |*abbreviation*
|degree |&deg; (no space)
|feet |ft
|gigabyte |GB
|gram |g
|hour |h
|inch |in
|kilobyte |kB
|kilowatt |kW
|litre |l
|megabit |Mbit
|megabyte |MB
|megawatt |MW
|metre |m
|millimetre |mm
|minute |min
|ounce |oz
|pound (weight) |lb
|second |s
|terabyte |TB
|===

It is very common to use a compound expression with a numeric value and units as a descriptive phrase.
In such cases, use a hyphen to join the compound expression.
Notice that the singular form of the unit is always used.
For example:

[example]
====
A *22-page* book. +++[+++Not _A 22-pages book._+++]+++

A *twenty-mile* journey. +++[+++Not _A twenty-miles journey._+++]+++

A *25,000-ton* ship. +++[+++Not _A 25,000-tons ship._+++]+++
====

pass:[<!-- vale Vale.Terms = NO -->]

== Vaadin Versions
Do not use _Vaadin 14_ or other Vaadin version numbers in text.
Instead, use the [role="since:com.vaadin:vaadin@V19"] tag to indicate version numbers.

== X
Do not use the character _x_ as a multiplication sign.
Instead, use the multiplication symbol &times; (`\&times;` in AsciiDoc).
