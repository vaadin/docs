---
title: Adding a Login Form with Spring Security
order: 90
layout: page
---


= Adding a Login Form with Spring Security

In this article it is assumed that you have an already working Vaadin-15 project as it is described in the <<quick-start-guide#, Start a new V15 project>> guide.

Since the downloaded application is a link:https://spring.io/projects/spring-boot[Spring Boot] project, the easiest way to enable authentication is by adding link:https://spring.io/projects/spring-security[Spring Security].

== Dependencies

Add the following dependency to the project maven file.

.pom.xml
[source,xml]
----
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-security</artifactId>
</dependency>
----

== Server Configuration

→ *Step 1* - Create a new configuration class extending the link:https://docs.spring.io/spring-security/site/docs/5.2.0.RELEASE/api/org/springframework/security/config/annotation/web/configuration/WebSecurityConfigurerAdapter.html[WebSecurityConfigurerAdapter] class, and annotate it to enable security.

.SecurityConfig.java
[source,java]
----
@EnableWebSecurity
@Configuration
public class SecurityConfig extends WebSecurityConfigurerAdapter {

}
----


→ *Step 2* - Configure Spring `HttpSecurity` by enabling its built-in form login.

At the same time, disable CSRF validation because Vaadin endpoints uses its own CSRF protection mechanism.

.SecurityConfig.java
[source,java]
----
@EnableWebSecurity
@Configuration
public class SecurityConfig extends WebSecurityConfigurerAdapter {

  @Override
  protected void configure(HttpSecurity http) throws Exception {
    http.formLogin();
    http.csrf().disable();
  }  
}
----

[NOTE]
If CSRF is still needed for other endpoints in the application, it is possibe to disable CSRF just for Vaadin endpoints: `http.csrf().ignoringAntMatchers("/connect/**")`


→ *Step 3* - Allow public access to Vaadin static resources.

.SecurityConfig.java
[source,java]
----
@EnableWebSecurity
@Configuration
public class SecurityConfig extends WebSecurityConfigurerAdapter {
  ...

  @Override
  public void configure(WebSecurity web) {
    web.ignoring().antMatchers("/VAADIN/**");
  }
}
----


→ *Step 4* - Finally, add the repository for valid users and roles.

In this example, a set of users in memory is used.

.SecurityConfig.java
[source,java]
----
@EnableWebSecurity
@Configuration
public class SecurityConfig extends WebSecurityConfigurerAdapter {
  ...

  @Override
  protected void configure(AuthenticationManagerBuilder auth) throws Exception {
    auth.inMemoryAuthentication()
        .withUser("user").password("{noop}user").roles("USER")
        .and()
        .withUser("admin").password("{noop}admin").roles("ADMIN", "USER");
  }
}
----


→ *Step 5* - Check that the final configuration class looks like:

.SecurityConfig.java
[source,java]
----
@EnableWebSecurity
@Configuration
public class SecurityConfig extends WebSecurityConfigurerAdapter {

  @Override
  protected void configure(HttpSecurity http) throws Exception {
    // Use default spring login form
    http.formLogin();
    // Vaadin already handles csrf.
    http.csrf().disable();
  } 

  @Override
  public void configure(WebSecurity web) {
    // Access to static resources, bypassing Spring security.
    web.ignoring().antMatchers("/VAADIN/**");
  }

  @Override
  protected void configure(AuthenticationManagerBuilder auth) throws Exception {
    // Configure users and roles in memory
    auth.inMemoryAuthentication()
        .withUser("user").password("{noop}user").roles("USER")
        .and()
        .withUser("admin").password("{noop}admin").roles("ADMIN", "USER");
  }  
}
----

== Client configuration

Add links in the main layout for login and logout.

.frontend/main-layout.ts
[source, typescript]
----
import { css, customElement, html, LitElement} from 'lit-element';

@customElement('main-layout')
export class MainLayoutElement extends LitElement {
  static get styles() {...}

  render() {
    return html`
        <vaadin-tabs slot="navbar" ... >
             ...
             <vaadin-tab> <a href="#" @click="${this.login}">Login</a> </vaadin-tab>
             <vaadin-tab> <a href="#" @click="${this.logout}">Logout</a> </vaadin-tab>
           </vaadin-tabs>          
        </vaadin-tabs>
    `;
  }

  private login() {
    // open Spring login form
    window.location.replace('login');
  }

  private async logout() {
    // call via ajax to the Spring logout form
    await fetch('logout');
    // clean the ui
    window.location.reload();
  }
}
----

== Appendix: Production Data Sources

The example using users in memory above is valid for test applications, though, Spring Security offers other implementations for production scenarios.

=== SQL Authentication

The following example demonstrates how to access a SQL database with tables for users and authorities. 

.SecurityConfig.java
[source,java]
----
@EnableWebSecurity
@Configuration
public class SecurityConfig extends WebSecurityConfigurerAdapter {
  ...

  @Autowired
  private DataSource dataSource;

  @Override
  protected void configure(AuthenticationManagerBuilder auth) throws Exception {
    // Configure users and roles in a JDBC database
    auth.jdbcAuthentication()
      .dataSource(dataSource)
      .usersByUsernameQuery(
          "SELECT username, password, enabled FROM users WHERE username=?")
      .authoritiesByUsernameQuery(
          "SELECT username, authority FROM from authorities WHERE username=?")
      .passwordEncoder(new BCryptPasswordEncoder());
  }  
}
----

=== LDAP Authentication

The next examples shows how to configure authentication by using an LDAP repository

.SecurityConfig.java
[source,java]
----
@EnableWebSecurity
@Configuration
public class SecurityConfig extends WebSecurityConfigurerAdapter {
  ...

  @Override
  protected void configure(AuthenticationManagerBuilder auth) throws Exception {
    // Obtain users and roles from an LDAP service
    auth.ldapAuthentication()
      .userDnPatterns("uid={0},ou=people")
      .userSearchBase("ou=people")
      .groupSearchBase("ou=groups")
      .contextSource()
      .url("ldap://localhost:8389/dc=example,dc=com")
      .and()
      .passwordCompare()
      .passwordAttribute("userPassword");
  }  
}
----

Do not forget to add the corresponding LDAP client dependency to the project:

.pom.xml
[source,xml]
----
<dependency>
    <groupId>org.springframework.security</groupId>
    <artifactId>spring-security-ldap</artifactId>
    <version>5.2.0.RELEASE</version>
</dependency>
----




