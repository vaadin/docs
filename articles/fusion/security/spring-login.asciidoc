---
title: Authentication With Spring Security
order: 90
layout: page
---


= Authentication With Spring Security

[role="since:com.vaadin:vaadin@V20 standalone"]
--
--

Since the downloaded application is a link:https://spring.io/projects/spring-boot[Spring Boot] project, the easiest way to enable authentication is by adding link:https://spring.io/projects/spring-security[Spring Security].

== Dependencies

Add the following dependency to the project Maven file.

.`pom.xml`
[source,xml]
----
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-security</artifactId>
</dependency>
----

== Server Configuration

→ *Step 1* - Create a new configuration class extending the link:https://docs.spring.io/spring-security/site/docs/5.2.0.RELEASE/api/org/springframework/security/config/annotation/web/configuration/WebSecurityConfigurerAdapter.html[WebSecurityConfigurerAdapter] class, and annotate it to enable security.

.`SecurityConfig.java`
[source,java]
----
@EnableWebSecurity
@Configuration
public class SecurityConfig extends WebSecurityConfigurerAdapter {

}
----


→ *Step 2* - Configure Spring `HttpSecurity` to use a login view.

At the same time, disable CSRF validation because Vaadin endpoints uses its own CSRF protection mechanism.

.`SecurityConfig.java`
[source,java]
----
@EnableWebSecurity
@Configuration
public class SecurityConfig extends WebSecurityConfigurerAdapter {

  @Override
  protected void configure(HttpSecurity http) throws Exception {
    // Set default security policy that permits Vaadin internal requests and
    // denies all other
    VaadinSpringSecurity.configure(http);
    // Ignore the login processing url and vaadin endpoint calls
    http.csrf().ignoringAntMatchers("/login", "/connect/**");
    // specify the URL of the login view, the value of the parameter
    // is the defined route for the login view component.
    http.formLogin().loginPage("/login").permitAll();
  }
}
----


→ *Step 3* - Allow public access to Vaadin static resources.

.`SecurityConfig.java`
[source,java]
----
@EnableWebSecurity
@Configuration
public class SecurityConfig extends WebSecurityConfigurerAdapter {
  ...

  @Override
  public void configure(WebSecurity web) {
    // Access to static resources, bypassing Spring security.
    VaadinSpringSecurity.configure(web);
  }
}
----


→ *Step 4* - Finally, add the repository for valid users and roles.

In this example, a set of users in memory is used.

.`SecurityConfig.java`
[source,java]
----
@EnableWebSecurity
@Configuration
public class SecurityConfig extends WebSecurityConfigurerAdapter {
  ...

  @Override
  protected void configure(AuthenticationManagerBuilder auth) throws Exception {
    auth.inMemoryAuthentication()
        .withUser("user").password("{noop}user").roles("USER")
        .and()
        .withUser("admin").password("{noop}admin").roles("ADMIN", "USER");
  }
}
----


→ *Step 5* - Check that the final configuration class looks like:

.`SecurityConfig.java`
[source,java]
----
@EnableWebSecurity
@Configuration
public class SecurityConfig extends WebSecurityConfigurerAdapter {

  @Override
  protected void configure(HttpSecurity http) throws Exception {
    // Set default security policy that permits Vaadin internal requests and
    // denies all other
    VaadinSpringSecurity.configure(http);
    // Ignore the login processing url and vaadin endpoint calls
    http.csrf().ignoringAntMatchers("/login", "/connect/**");
    // specify the URL of the login view, the value of the parameter
    // is the defined route for the login view component.
    http.formLogin().loginPage("/login").permitAll();
  }

  @Override
  public void configure(WebSecurity web) {
    // Access to static resources, bypassing Spring security.
    VaadinSpringSecurity.configure(web);
  }

  @Override
  protected void configure(AuthenticationManagerBuilder auth) throws Exception {
    // Configure users and roles in memory
    auth.inMemoryAuthentication()
        .withUser("user").password("{noop}user").roles("USER")
        .and()
        .withUser("admin").password("{noop}admin").roles("ADMIN", "USER");
  }
}
----

=== Alternatives to Using the Configuration Helper

`VaadinSpringSecurity.configure(http)` configures HTTP security to bypass framework internal resources.
If you prefer to roll your own configuration instead of using the helper, the matcher for these resources can be retrieved with `VaadinSpringSecurity.getDefaultHttpSecurityPermitMatcher()`.
For example, the `VaadinSpringSecurity.configure(http)` requires all the requests but the Vaadin internal ones to be authenticated,
if you want to allow public access to certain views, you can configure it as following:

.`SecurityConfig.java`
[source,java]
----
public static void configure(HttpSecurity http) throws Exception {
    http.authorizeRequests()
        .requestMatchers(
          VaadinSpringSecurity.getDefaultHttpSecurityPermitMatcher()
        ).permitAll()
        .antMatchers("/public-view").permitAll() // custom matcher
        .anyRequest().authenticated();
        ...
}
----

Analogously, the matcher for static resources to be ignored is available as `VaadinSpringSecurity.getDefaultWebSecurityIgnoreMatcher`:

.`SecurityConfig.java`
[source,java]
----
public static void configure(WebSecurity web) throws Exception {
    web.ignoring()
       .requestMatchers(
         VaadinSpringSecurity.getDefaultWebSecurityIgnoreMatcher())
       .antMatchers("static/**") // custom matcher
       ...
}
----

== Client Configuration

→ *Step 1* - Create a login view.
The easiest way to make a login view is to use the `<vaadin-login-overlay>` component.
Vaadin provides a login helper method for Spring Security based authentication that you can use for the login action.

.`frontend/login-view.ts`
[source,typescript]
----
include::{root}/frontend/demo/fusion/authentication/login-view.ts[]
----

→ *Step 2* - Configure the route for the login view.
After the login view is defined, you should also define a route for the login view component, for example in the `routes.ts` file.
Note, the `path` for the login view component should match the one defined in `SecurityConfig` for `http.formLogin().loginPage()`.

[source, typescript]
----
const routes = [
  {
    path: '/login',
    component: 'login-view'
  },
  // more routes
}
----

→ *Step 3* - Access control in the UI.
The access control for Vaadin views must be based on the UI, and not only on the URL filtering.
To protect a view from unauthenticated requests, that is, redirect unauthenticated requests to the login view, you can use either route action on the route configuration or the `onBeforeEnter` lifecycle callback in the view.

An example of using the route action:
.`frontend/routes.ts`
[source, typescript]
----
const routes = [
  ...
  {
    path: '/my-view',
    action: (_: Context, commands: Commands) => {
      if (!isLoggedIn()) {
        return commands.redirect('/login');
      }
      return undefined;
    },
    component: 'my-view'
  }
  ...
}
----
You can also add the route action to the parent layout, so that all the child views are protected.
In this case, the login component should be outside of the main layout, that is, not a child of the main layout in the route configuration.

.`frontend/routes.ts`
[source, typescript]
----
const routes = [
  ...
  {
    path: '/',
    action: (_: Context, commands: Commands) => {
      if (!isLoggedIn()) {
        return commands.redirect('/login');
      }
      return undefined;
    },
    component: 'main-layout',
    children: [
      ...
    ]
  }
  ...
}
----

An example of using the `onBeforeEnter` lifecycle callback in the view:
[source, typescript]
----
include::{root}/frontend/demo/fusion/authentication/protected-view.ts[]
----

The `isLoggedIn()` method in the above code examples uses a `lastLoginTimestamp` variable stored in the
https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage[localStorage] to check if the user is logged in. The `lastLoginTimestamp` variable needs to be reset when logging out.

The authentication helper methods in the code examples are grouped in a separate TypeScript file as shown below.

.`frontend/auth.ts`
[source, typescript]
----
include::{root}/frontend/demo/fusion/authentication/auth.ts[]
----

Using localStorage allows navigating to sub views without having to check authentication from the backend on every navigation so that the authentication check could also work offline.


== Logout

To avoid a full page reload the application needs to have a `/logout` route like the one below.
It can be triggered with a link like `<a href="/logout">Log out</a>`.

.`frontend/routes.ts`
[source, typescript]
----
path: '/logout',
action: async (_: Context, commands: Commands) => {
  // use the logout helper method.
  await logout();
  return commands.redirect('/');
}
----

== Appendix: Production Data Sources

The example using users in memory above is valid for test applications, though, Spring Security offers other implementations for production scenarios.

=== SQL Authentication

The following example demonstrates how to access a SQL database with tables for users and authorities.

.`SecurityConfig.java`
[source,java]
----
@EnableWebSecurity
@Configuration
public class SecurityConfig extends WebSecurityConfigurerAdapter {
  ...

  @Autowired
  private DataSource dataSource;

  @Override
  protected void configure(AuthenticationManagerBuilder auth) throws Exception {
    // Configure users and roles in a JDBC database
    auth.jdbcAuthentication()
      .dataSource(dataSource)
      .usersByUsernameQuery(
          "SELECT username, password, enabled FROM users WHERE username=?")
      .authoritiesByUsernameQuery(
          "SELECT username, authority FROM from authorities WHERE username=?")
      .passwordEncoder(new BCryptPasswordEncoder());
  }
}
----

=== LDAP Authentication

The next examples shows how to configure authentication by using an LDAP repository

.`SecurityConfig.java`
[source,java]
----
@EnableWebSecurity
@Configuration
public class SecurityConfig extends WebSecurityConfigurerAdapter {
  ...

  @Override
  protected void configure(AuthenticationManagerBuilder auth) throws Exception {
    // Obtain users and roles from an LDAP service
    auth.ldapAuthentication()
      .userDnPatterns("uid={0},ou=people")
      .userSearchBase("ou=people")
      .groupSearchBase("ou=groups")
      .contextSource()
      .url("ldap://localhost:8389/dc=example,dc=com")
      .and()
      .passwordCompare()
      .passwordAttribute("userPassword");
  }
}
----

Do not forget to add the corresponding LDAP client dependency to the project:

.`pom.xml`
[source,xml]
----
<dependency>
    <groupId>org.springframework.security</groupId>
    <artifactId>spring-security-ldap</artifactId>
    <version>5.2.0.RELEASE</version>
</dependency>
----
