---
title: Adding a Custom Login Form with Spring Security
order: 91
layout: page
---

= Adding a Custom Login Form with Spring Security

Instead of using the <<fusion-security-spring-login#, default Spring login form>>, you may want to use your own customized form. 
This article describes how to do that.

== Dependencies and Server Configuration

The dependencies and server configuration are the same as described in <<fusion-security-spring-login#, Adding a Login Form with Spring Security>>, with a difference that you need to specify the URL of the custom login view.

.`SecurityConfig.java`
[source, java]
----
@EnableWebSecurity
@Configuration
public class SecurityConfig extends WebSecurityConfigurerAdapter {

  @Override
  protected void configure(HttpSecurity http) throws Exception {
    // Ignore the login processing url and vaadin endpoint calls
    http.csrf().ignoringAntMatchers("/login", "/connect/**");
    
    // specify the URL of the login view, the value of the parameter
    // is the defined route for the login view component.
    http.formLogin().loginPage("login");
  }  
}
----

== Custom Login View

The easiest way to make a login view is to use the `<vaadin-login-overlay>` component.
Vaadin provides a `login` helper method for Spring Security based authentication that you can use for the login action.

.`frontend/login-view.ts`
[source, typescript]
----
include::{root}/frontend/demo/fusion/authentication/login-view.ts[group=TypeScript]
----
After the login view is defined, you should also define a route for the login view component, for example in the `index.ts` file. 
Note, the `path` for the login view component should match the one defined in `SecurityConfig` for `http.formLogin().loginPage()`.

.`frontend/index.ts`
[source, typescript]
----
const routes = [
  {
    path: '/login',
    component: 'login-view'
  },
  // more routes
}
----
== Redirect the User to the Login View
To protect a view from unauthenticated users, that is, redirect unauthenticated users to the login view, you can use route action.

.`frontend/index.ts`
[source, typescript]
----
const routes = [
  ...
  {
    path: '/my-view',
    action: (_: Router.Context, commands: Router.Commands) => {
      if (!isLoggedIn()) {
        return commands.redirect('/login');
      }
      return undefined;
    },
    component: 'my-view'
  }
  ...
}
----
You can also add the route action to the parent layout, so that all the child views are protected.

.`frontend/index.ts`
[source, typescript]
----
const routes = [
  ...
  {
    path: '/',
    action: (_: Router.Context, commands: Router.Commands) => {
      if (!isLoggedIn()) {
        return commands.redirect('/login');
      }
      return undefined;
    },
    component: 'main-layout',
    children: [
      ...
    ]
  }
  ...
}
----
The `isLoggedIn()` method in the above code examples uses a `lastLoginTimestamp` variable stored in the 
https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage[localStorage] to check if the user is logged in. The `lastLoginTimestamp` variable needs to be reset when logging out.

The authentication helper methods in the code examples are grouped in a separate TypeScript file as shown below.

.`frontend/auth.ts`
[source, typescript]
----
include::{root}/frontend/demo/fusion/authentication/auth.ts[group=TypeScript]
----

Using localStorage allows navigating to sub views without having to check authentication from the backend on every navigation so that the authentication check could also work offline.


== Logout

To avoid a full page reload the application needs to have a `/logout` route like the one below. 
It can be triggered with a link like `<a href="/logout">Log out</a>`.

.`frontend/index.ts`
[source, typescript]
----
path: '/logout',
action: async (_: Context, commands: Commands) => {
  // use the logout helper method.
  await logout();
  return commands.redirect('/');
}
----
