---
title: Offline Support for Authentication
order: 110
layout: page
---

= Offline Support for Authentication

When building a Fusion application with offline support, take care when storing authentication in the browser to enable offline access checking on the client-side.

The `localStorage` API is an easy way to store data in the browser that also works offline.
This article describes how to use it to store authentication.

== Storing Authentication for Offline

It is good practice to expire authentication after a time limit.
However, the data in `localStorage` does not expire automatically; you need to have a timestamp in the authentication data object itself.
Add the timestamp property to the TypeScript definition for the authentication object, as follows:

.`auth.ts`
[source,typescript]
----
include::{root}/frontend/demo/fusion/authentication/auth.ts[tags=basic;!userinfo]
----

Also, define the string key for `localStorage`, as well as the maximum age constant.
The examples in this article use a 30-day limit.

.`auth.ts`
[source,typescript]
----
include::{root}/frontend/demo/fusion/authentication/auth.ts[tags=storage-defs]
----

In your login method, if the login is successful, create the object with the timestamp, and save it using [methodname]#localStorage.setItem()#:

.`auth.ts`
[source,typescript]
----
include::{root}/frontend/demo/fusion/authentication/auth.ts[tags=login;!userinfo]
----

The saved authentication can now be reloaded when starting the application offline.

== Restoring Authentication on Load

Use the [methodname]#localStorage.getItem()# method to restore the authentication when the application starts.

.`auth.ts`
[source,typescript]
----
include::{root}/frontend/demo/fusion/authentication/auth.ts[tags=restore;!userinfo]
----

Remember to check the timestamp before using the loaded authentication.

== Removing an Expired Authentication

If the authentication is expired, or when the user logs out, remove the stored authentication from `localStorage`, as follows:

.`auth.ts`
[source,typescript]
----
include::{root}/frontend/demo/fusion/authentication/auth.ts[tags=logout]
----

== Complete Example With Offline Support

The following code example contains the complete client-side authentication implementation with offline support:

.`auth.ts`
[source,typescript]
----
include::{root}/frontend/demo/fusion/authentication/auth.ts[tags=impl;basic;login;logout;isLoggedIn;offline;!userinfo]
----
