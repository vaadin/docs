---
title: Offline Support for Authentication
order: 110
layout: page
---

= Offline Support for Authentication

When building a Fusion application with offline support, take care of storing authentication in the browser to enable offline client-side access checking.

The `localStorage` API is an easy way to store some data in the browser, that also works offline.
Let us use that to store the authentication.

== Storing the Authentication for Offline

It is a good idea to expire authentication after a certain time limit, but the data in `localStorage` does not expire automatically.
So you need to have a timestamp in the authentication data object itself.
Add the timestamp property to the TypeScript definition for the authentication object:

.`auth.ts`
[source,typescript]
----
include::{root}/frontend/demo/fusion/authentication/auth.ts[tags=basic;!userinfo]
----

Also define the string key for `localStorage`, and the max age limit constant.
Examples in this article use a thirty days limit.

.`auth.ts`
[source,typescript]
----
include::{root}/frontend/demo/fusion/authentication/auth.ts[tags=storage-defs]
----

Then, in your login method, make the object with the timestamp upon successful login result, and save it using `localStorage.setItem()`:

.`auth.ts`
[source,typescript]
----
include::{root}/frontend/demo/fusion/authentication/auth.ts[tags=login;!userinfo]
----

The saved authentication can now be loaded back when starting the application offline.

== Restoring Authentication on Load

Use the `localStorage.getItem()` method to restore the authentication when the application starts.

.`auth.ts`
[source,typescript]
----
include::{root}/frontend/demo/fusion/authentication/auth.ts[tags=restore;!userinfo]
----

Remember to check the timestamp before using the loaded authentication.

== Removing the Expired Authentication

If the authentication is expired, or when the user logs out, remove the stored authentication from `localStorage`:

.`auth.ts`
[source,typescript]
----
include::{root}/frontend/demo/fusion/authentication/auth.ts[tags=logout]
----

== Complete Example With Offline Support

Here is the complete client-side authentication code example with offline support:

.`auth.ts`
[source,typescript]
----
include::{root}/frontend/demo/fusion/authentication/auth.ts[tags=impl;basic;login;logout;isLoggedIn;offline;!userinfo]
----
