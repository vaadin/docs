---
title: Accessing Authentication Data
order: 95
layout: page
---


= Accessing Authentication Data

Although authorization is defined at endpoint level as described in the <<configuring-security#, Security page>>, you may need to know specific authentication parameters either in endpoint Java code or client-side code.

== Accessing Authentication Data on the Server Side

=== Accessing the Security Principal

Vaadin authenticates each server request and, if successful, associates it with a Java security principal.
You can get the authenticated user as a [classname]`UserPrincipal` from the current request, which you can get with [methodname]`VaadinRequest.getCurrent()`.
It is null if the request is not authenticated.

[.example]
--

.EchoEndpoint.java
[source,java]
----
@Endpoint
public class EchoEndpoint {
    public String saySomething(String message) {
        return VaadinRequest.getCurrent().getUserPrincipal().getName() + " says: " + message;
    }
}
----

.frontend/index.ts
[source,typescript]
----
import * as endpoint from './generated/EchoEndpoint';

endpoint
    .saySomething("It's snowing in Turku")
    .then(response => console.log(response));
----

--

== With Spring Security

The easiest way to configure authentication is by using <<adding-login-form-with-spring-security#, Spring Security>>, thus use its API for checking the user in your endpoints.
In the next example the username is checked in the Java code:

[source,java]
----
@Endpoint
public class DrawEndpoint {

    public String checkWinner() {
        Authentication auth =
            SecurityContextHolder.getContext().getAuthentication();
        if (auth != null && "peter".equals(auth.getName())) {
            return "Congrats! you are the winner.";
        }
        return "Sorry, keep looking";
    }
}
----


== Checking Authentication on the Client Side


== Checking authentication in client side

Please read the <<check-user-login#, Checking Authentication>> article if in the client side it is needed to know whether a user is authenticated.

=== Checking the user name

In TypeScript there is no direct way for checking whether the user is authenticated, nevertheless
it's possible to expose an endpoint in server side checking user privileges and returning the status.

The next example returns the username when in the user is logged-in, or the word 'anonymousUser' otherwise:

[source,java]
----
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;

@Endpoint
public class MyAppEndpoint {

    @AnonymousAllowed
    public String checkUser() {
        Authentication auth =
            SecurityContextHolder.getContext().getAuthentication();
        return auth == null ? null : auth.getName();
    }
}
----

[source, typescript]
----
import * as appEndpoint from '../generated/MyAppEndpoint';

const username = await appEndpoint.checkUser();

if ('anonymousUser' === username) {
   console.log('You are an anonymous user');
} else {
   console.log('Your username is: ' + username);
}
----

=== Checking roles

Developer might want to check whether the user can access certain services so as the
appropriate options are enabled in the application menu.

The next example exposes a method that can be used to check whether the application is being
used by an admin user.

[source,java]
----
@Endpoint
public class MyAppEndpoint {

    @RolesAllowed("ROLE_ADMIN")
    public boolean isAdmin() {
        return true;
    }
}
----

[source, typescript]
----
import * as appEndpoint from '../generated/MyAppEndpoint';

const isAdmin = await appEndpoint.checkUser().catch(() => false);

if (isAdmin) {
   console.log('You are an admin user');
} else {
   console.log('Sorry, you are not an admin user');
}
----
