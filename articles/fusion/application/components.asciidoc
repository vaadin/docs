---
title: Using Components
order: 55
layout: page
---
= Using Components in Fusion

This article describes using Vaadin components and/or third-party web components in your Fusion views.

The examples assume a running Fusion application.
For information on setting up a Fusion project and defining a basic view, see the <<../tutorials/quick-start-tutorial#, Quick Start Tutorial>>.
For a full list of components and detailed API documentation, see the Design System <<{articles}/ds/components#,Components section>>.

== Using Components From Vaadin

When bootstrapping a Fusion project from an https://start.vaadin.com/?preset=fusion[official starter], all Vaadin components frontend packages are automatically installed.
To use a component in your own view, it is enough to import it into the view `.ts` file.
For example:

[source,typescript]
----
import '@vaadin/text-field';
----

You can then use the <<{articles}/ds/components/text-field#,Text Field>> component (the `<vaadin-text-field>` element) in your view's `render` method:

[source,typescript]
----
render() {
  return html`
    <vaadin-text-field id='firstname' label='First name'></vaadin-text-field>
    <vaadin-text-field id='lastname' label='Last name'></vaadin-text-field>
  `;
}
----

== Component Class

The class name of a `<vaadin-_component-name_>` element follows the pattern `__ComponentName__Element`
Importing the class gives a type safe access to the component's API.
For example:

[source,typescript, role=show-code]
----
include::{root}/frontend/demo/fusion/components/greeting-view.ts[render]
----

In the above example, the <<{articles}/ds/components/combo-box#,Combo Box>> and <<{articles}/ds/components/checkbox#,Checkbox>> components with IDs `greeting` and `custom` respectively are mapped to typed class variables of the same names via the `@query` decorator.
The Checkbox event listener toggles the `allowCustomValue` attribute of the Combo Box, which defines whether the user can enter custom values into the field or is constrained to the alternatives in the items overlay.
Having strongly typed class variables helps to catch errors at compile time and allows IDE code completion.

== HTML Attributes

The following HTML attributes work as expected with all Vaadin components:
[cols="1,2", opts=header]
|===
|Property | Description

|`enabled`
|Whether the component is enabled; a disabled component cannot be interacted with.
|`title`
|Additional label associated with the component, shown as a tooltip.
|`visible`
|Visibility; set to `false` to hide the element.
|===

See the <<{articles}/ds/components#,Components section>> for component-specific attributes and methods.
The <<{articles}/ds/customization#, Customization>> section describes how to customize the look and feel of the components.

== Using a Third-Party Component

You can also install and use other components in Fusion views.
To do this, you first need to install the component npm package from the https://npmjs.com[npm package registry] using the `pnpm` package manager.
For example, this command installs the latest version of the `vanilla-colorful` color picker and records the dependency in `package.json`:

`npx pnpm add vanilla-colorful`

After installation, the component is now ready to be imported and used in the Fusion view.

[NOTE]
If your project is configured to use the `npm` package manager instead of `pnpm`, use the command `npm install vanilla-colorful --save`.

The following example shows the hex triplet of the selected color in a <<{articles}/ds/components/text-field#,Text Field>>:

[source,typescript, role=show-code]
----
include::{root}/frontend/demo/fusion/components/color-picker-view.ts[render]
----
