---
title: Application Basics
order: 15
layout: page
---

= Application Basics

A Fusion application is written in TypeScript and runs in a single HTML page.
An application consists of one or more views, each bound to a _route_ or a URL path.
To access business data and logic, an application can have server-side _endpoints_ written in Java.


== An Introduction to Reactive UIs

Views in Fusion applications are programmed in _reactive_ rather than in imperative manner, as you would with Vaadin Flow, jQuery, and so forth.
Reactive views have fewer moving parts and because of this they are easier to understand and debug. 
In reactive UI programming, the application UI is the value of a function.
The function gets the component's state as a parameter and returns HTML.
Whenever the state changes, the UI is re-rendered.

The following example is given in both imperative (Flow/Java) and reactive (Fusion/TypeScript):

[.example.show-code]
--

In imperative UI programming, like with Vaadin Flow, there are two states: the data model and the UI. 
It is your responsibility as a developer to keep them in sync. 
You need to keep references to elements so you can update their values when the underlying state (the `Contact`) changes. 

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/fusion/application/basic/ImperativeView.java[render, tags=snippet, indent=0, group=Java]
----

In reactive programming, there is only one state: the data. 
The UI always reflects that state. 
You define a template using values from the state (`Contact`). 
Whenever the model changes, the template is automatically updated. 

[source,typescript]
----
include::{root}/frontend/demo/fusion/application/basic/reactive-view.ts[render, tags=snippet, indent=0, group=TypeScript]
----

--

////
// TODO Move this elsewhere, too deep stuff here.
.Avoid element references in reactive views
[TIP]
====
As a rule of thumb, you should not use `document.querySelector` or LitElement `@query` to get element reference in order to set values or properties imperatively. 
There is almost always a way to achieve the same with binding values through the template.
====
////

== Application Architecture

Most of the application logic is handled in application views.
You could have a login view, registration view, main view, and various other views.
To have a typical main view with menu navigation and multiple sub-views, you can use the <<{articles}/ds/components/app-layout#, App Layout>> component.

The entry point of a Fusion application is the _application shell_, which consists of the following files:

`frontend/index.html`::
A bootstrap page that loads the application.
You do not normally need to modify the file.

`frontend/index.ts`::
The TypeScript entry point of the application.
This is where you set up routing and other application tasks.
To navigate between views, you need to define routes (see <<../routing/overview#,Defining Routes>> for more details).

If the application has server-side views implemented with Vaadin Flow, the routing configuration starts a server session and loads routes to the server-side views.
See <<starting#, Starting the Application>> on how to run a Fusion application initially stateless and then start a session from TypeScript code.

Most of an application consists of _views_, as described next.

== Adding a View

Views in Fusion are custom HTML elements that extend [classname]#LitElement#, which handles rendering the component state reactively.
You minimally need to implement a [methodname]#render()# function that returns the rendered HTML representation of the component.
You can also provide custom styling by implementing a [methodname]#styles()# function that returns custom CSS.
See <<lit#, LitElement Basics>> for a more thorough introduction to using LitElement.

The following is an example of a view in Fusion:

[.example.show-code]
--

[source,typescript]
----
include::{root}/frontend/demo/fusion/application/basic/my-view.ts[render, tags=snippet, indent=0]
----

--

=== Basic Routing

In order to see the new client-side view in the browser, you need to define a new client-side _route_ for it.
A route is a path in the URL.
That requires the following changes in the `index.html` and `index.ts` files:

[.example.show-code]
--

.`frontend/index.ts`
[source,typescript]
----
import { Flow } from '@vaadin/flow-frontend';
import { Router } from '@vaadin/router';

import './my-view';

const {serverSideRoutes} = new Flow({
  // @ts-ignore
  imports: () => import('../target/frontend/generated-flow-imports')
});

const routes = [
    {path: '', component: 'my-view'},
    ...serverSideRoutes
];

export const router = new Router(document.querySelector('#outlet'));
router.setRoutes(routes);
----

.`frontend/index.html`
[source,html]
----
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1"/>
  <title>TypeScript Support in Vaadin</title>
  <!-- index.ts is included here automatically (either by the dev server or during the build) -->
</head>
<body>
  <script src="VAADIN/build/webcomponentsjs/webcomponents-loader.js"></script>
  <div id="outlet"></div>
</body>
</html>
----


--

Now `my-view` is accessible by the root path, that is, `http://localhost:8080/`.
All the other routes are handled by the server-side router.
See <<../routing/overview#, Defining Routes>> for more information.

[role="since:com.vaadin:vaadin@15"]
== Prerequisites

Fusion applications have some prerequisites.

To write the bootstrapping code for an application or create views in TypeScript, make sure that:

 - <<starting#, Client-side bootstrapping>> is enabled.

 - The `index.html` page template and the `index.ts` entry point exist in the `frontend/` folder.

If you are starting with a starter application, they should already have been taken care of.

After that, any `.ts` file imported from `index.ts` (statically or dynamically) is going to be built as a part of the application.


== Accessing Backend Data

Fusion provides a type-safe and secure way to access data from backend in frontend views by using generated TypeScript code.
Vaadin scans the backend code during development and generates TypeScript code that can be used to call the corresponding Java methods.
The generated code is processed through the same way as other TypeScript views.
Only the necessary code is included in the production application bundle. 

See <<accessing-backend#, Accessing Java Backend>> for more information.
