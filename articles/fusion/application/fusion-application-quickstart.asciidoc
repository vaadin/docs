---
title: Quick Start Tutorial
order: 10
layout: page
---

= Quick Start Tutorial

We recommend the following steps to create a new Vaadin application with a UI written in TypeScript.

* use link:https://start.vaadin.com/[start.vaadin.com^] to create a new project (<<quick-start-guide#step-1,step 1>>)
* download a project archive and start the app in Dev mode (<<quick-start-guide#step-2,step 2>>)
* add a new TypeScript view to the app (<<quick-start-guide#step-3,step 3>>)
* access the backend from the new TypeScript view (<<quick-start-guide#step-4,step 4>>)

_If you are migrating an existing Vaadin 14 application, please check the <<../v15-migration/upgrading-from-vaadin14#,Upgrading from Vaadin 14>> page._


== Step 1 - Create a new project at link:https://start.vaadin.com/[start.vaadin.com^] [[step-1]]

image:images/starterwizard.gif[New Project Video]

[NOTE]
Make sure to select `TypeScript` implementation when adding views.


== Step 2 - Unzip and run the project in Dev-Mode [[step-2]]

Run `mvn spring-boot:run` in the console and open the application at link:http://localhost:8080[]. After that, all modifications in `frontend` directory are compiled and reloaded automatically. Refreshing browser is enough to get the updates.

image:images/runproject.gif[New Project Video]

[NOTE]
When running the project the very first time, be patient all `maven` and `npm` dependencies need to be downloaded.

[NOTE]
If you'd rather run the spring project from the IDE, first run the maven goal `mvn compile` to prepare the environment.


== Step 3 - Add a new client-side view and set a route path for it [[step-3]]

First add a new route for the new view:

.frontend/index.ts
[source, typescript]
----

router.setRoutes([
  ...
  {
    path: 'help',
    component: 'app-help',
    action: async () => { await import('./views/help/app-help'); }
  },
  ...
]);
----

Second create a new client-side view:

.frontend/views/help/app-help.ts
[source, typescript]
----
import {LitElement, html, customElement} from 'lit-element';
import '@vaadin/vaadin-button/vaadin-button';

@customElement('app-help')
export class AppHelp extends LitElement {
    render() {
      return html`
        <vaadin-button @click=${this.onClick}>Read More</vaadin-button>
      `;
    }

    onClick() {
      console.log('clicked');
    }
}
----


== Step 4 - Access the back-end from the new TypeScript view [[step-4]]

Continue with the <<accessing-backend#, Accessing back-end from TypeScript>> page for more details on how to consume server-side endpoints.
