---
title: Accessing Java Backend
order: 60
layout: page
---


= Accessing Java Backend

A server-side Java endpoint is a backend method that is exposed for calling from client-side TypeScript code.
An endpoint in Vaadin is a class that defines one or more public methods.

Vaadin bridges Java backend endpoints and a TypeScript frontend.
It generates TypeScript clients to call the Java backend in a type-checkable way.

.Vaadin endpoints depend on Spring Boot auto configuration.
[WARNING]
They do not work if the auto configuration is disabled, for example, when you use `@EnableWebMvc`.
As a workaround, remove the `@EnableWebMvc` annotation, as stated in link:https://docs.spring.io/spring-boot/docs/2.3.4.RELEASE/reference/html/spring-boot-features.html#boot-features-spring-mvc-auto-configuration[Spring Boot documentation].
If you have an idea how to make it more useful for you, please share it on link:https://github.com/vaadin/flow/issues/new/[GitHub^].

== Creating an Endpoint

An endpoint is a Java class annotated with `@Endpoint`:

[source,java]
----
import com.vaadin.fusion.Endpoint;
import com.vaadin.flow.server.auth.AnonymousAllowed;

/**
 * A Vaadin endpoint that counts numbers.
 */
@Endpoint
@AnonymousAllowed
public class CounterEndpoint {
    /**
     * A method that adds one to the argument.
     */
    public int addOne(int number) {
        return number + 1;
    }
}
----

When the application starts, Vaadin scans the classpath for `@Endpoint`-annotated classes.
For each request to access a public method in a Vaadin endpoint, a permission check is carried out.
`@AnonymousAllowed` means that Vaadin permits anyone to call the method from the client-side.

Please refer to the <<../security/overview#, Security>> for configuring endpoint access.

== TypeScript Modules

In JavaScript and TypeScript, modules are files that follow the module syntax.
This syntax has the following properties:

- Top-level declarations (variables, functions, classes, etc.) are scoped inside the module, meaning that they are by default not available outside it.

- A module supports top-level `export` statements, which make declarations available to other modules.

- A module supports top-level `import` statements, which load and execute other modules, and can bring exported declarations.

The following example demonstrates the `City.ts` module:

.`City.ts`
[source,typescript]
----
// Declare and export an interface
export default interface City {
  country: string;
  name: string;
}
----

.`index.ts`
[source,typescript]
----
// Import and use a declaration from another module
import type { City } from './City';
const cityObject: City = {
    country: "Finland",
    name: "Turku",
};
// Note: cityObject is not exported, thus it is only available in this file
----

In Vaadin applications, the `index.ts` (or, optionally, `index.js`) file is also a module.

== Modules Generated From Vaadin Endpoints

Fusion generates a TypeScript module for every Vaadin endpoint on the backend.
Each such module exports all the methods in the endpoint.

You can either import an entire module from the https://basarat.gitbook.io/typescript/main-1/barrel[barrel] file, import all methods as a module from the endpoint file, or select individual endpoint methods.
For example, the `CounterEndpoint.ts` could be used as in the following snippets:

.`index.ts` (import the whole endpoint module object from the barrel file)
[[index.ts]]
[source,typescript]
----
import { CounterEndpoint } from 'Frontend/generated/endpoints';

CounterEndpoint.addOne(1).then(result => console.log(result));
----

.`index.ts` (import all imports as an endpoint object)
[source,typescript]
----
import * as CounterEndpoint from 'Frontend/generated/CounterEndpoint';

CounterEndpoint.addOne(1).then(result => console.log(result));
----

.`index.ts` (import a single endpoint method)
[source,typescript]
----
import { addOne } from 'Frontend/generated/CounterEndpoint';

addOne(1).then(result => console.log(result));
----

.The “Frontend” directory alias
[NOTE]
====
The `'Frontend/'` path prefix is an alias for the `{project.basedir}/frontend` directory in your application project.

Vaadin has this path alias in <<basics#Configuring TypeScript Compiler,the default TypeScript compiler configuration>> (`tsconfig.json`); webpack configuration file (`webpack.generated.js`) respects the tsconfig aliases by default.

Using this path alias is recommended, as it allows for absolute import paths, rather than traversing the directory hierarchy in relative imports.
====

Fusion generates the TypeScript modules automatically when you compile the application, as well as when the application is running in development mode.

By default, the generated files are located under `{project.basedir}/frontend/generated`.
You can change the folder by providing the path for the generator in the `generatedFrontendDirectory` property for Vaadin Maven plugin.

Vaadin takes care of type conversion between Java and TypeScript types.
For more information about supported types, see <<../advanced/type-conversion#, Type Conversion>>.

== Example TypeScript Module Contents

For example, the generated TypeScript module for the Java endpoint defined in
<<accessing-backend#how-to-create-vaadin-endpoint,CounterEndpoint.java>> would look as follows:

.`CounterEndpoint.ts`
[source,typescript]
----
/**
 * A Vaadin endpoint that counts numbers.
 *
 * This module has been generated from CounterEndpoint.java
 * @module CounterEndpoint
 */

import client from './connect-client.default';

/**
 * A method that adds one to the argument.
 *
 * @param number
 */
function _addOne(number: number): Promise<number> {
  return client.call('CounterEndpoint', 'addOne', {number});
}

export {
  _addOne as addOne,
}
----

== Entities

Endpoint methods can return or receive as a parameter any data structure (entity).
In this case, the TypeScript generator creates a TypeScript interface for it.


`City.java`
[source,java]
----
package com.example.endpoints;

/**
 * An entity that contains an information about a city.
 */
public class City {
    private String country;
    private String name;

    City(String name, String country) {
        this.country = country;
        this.name = name;
    }

    public String getName() {
        return name;
    }

    public String getCountry() {
        return country;
    }
}
----

`CountryEndpoint.java`
[source,java]
----
package com.example.endpoints;

import java.util.Arrays;

import com.vaadin.fusion.Endpoint;
import com.vaadin.flow.server.auth.AnonymousAllowed;

/**
 * A Vaadin endpoint that gets list of capitals.
 */
@Endpoint
@AnonymousAllowed
public class Country {
    private List<City> capitals = Arrays.asList(
            new City("Helsinki", "Finland"), new City("Berlin", "Germany"),
            new City("London", "UK"), new City("Washington", "USA"));

    /**
     * A method that returns a collection of entities.
     */
    public List<City> getCapitals(int numberOfCapitals) {
        return numberOfCapitals <= capitals.size() ?
            capitals.subList(0, numberOfCapitals - 1) : capitals;
    }

    /**
     * A method that receives an entity as a parameter.
     */
    public String getCityName(City city) {
        return city.getName();
    }
}
----

The TypeScript output is the following:

`com/example/endpoints/City.ts`
[source,typescript]
----
/**
 * An entity that contains an information about a city.
 * This module is generated from com.example.endpoints.City.
 * All changes to this file are overridden. Please consider to make changes in the corresponding Java file if necessary.
 */

export default interface City {
  readonly country: string;
  readonly name: string;
}
----

`CountryEndpoint.ts`
[source,typescript]
----
/**
 * A Vaadin endpoint that gets list of capitals.
 *
 * This module is generated from CountryEndpoint.java
 * All changes to this file are overridden. Please consider to make changes in the corresponding Java file if necessary.
 * @module CountryEndpoint
 */

// @ts-ignore
import client from './connect-client.default';
import City from './com/example/endpoints/City';

/**
 * A method that returns a collection of entities.
 */
function _getCapitals(numberOfCapitals: number): Promise<ReadonlyArray<City | undefined>> {
  return client.call('CountryEndpoint', 'getCapitals', {numberOfCapitals});
}

/**
 * A method that receives an entity as a parameter.
 */
function _getCityName(city: City): Promise<string | undefined> {
  return client.call('CountryEndpoint', 'getCityName', {city});
}

export {
  _getCapitals as getCapitals,
  _getCityName as getCityName,
}
----

=== Read-Only Access

All generated entities provide read-only access to their properties.
All collections are immutable as well.
However, while immutable received data is considered the best practice, sometimes it may be necessary to mutate the data or to send it to a method that accepts only mutable structures (it often happens to `ReadonlyArray` that cannot be implicitly cast to the `Array`).
In this case, you can cast the data structure manually.

[source,typescript]
----
const collection: ReadonlyArray<string | undefined> = [];
const city: City = {name: "Helsinki", country: "Finland"};

type Mutable<T> = {
  -readonly[P in keyof T]: T[P]
};

const mutableCollection = collection as Array<string | undefined>;
const mutableCity = city as Mutable<City>;
----

Instead of declaring `Mutable` helper by hands, you can also use the https://github.com/sindresorhus/type-fest[type-fest] library which provides it along with many other useful type helpers.

=== Nullable And Non-Nullable Types

Please refer to <<../advanced/endpoints-generator#Type Nullability, Type Nullability>> to get more information about nullability algorithm works and how to make types non-nullable.

== Code Completion in IDEs

As you can see in the `CounterEndpoint.ts` example above, the Javadoc for the `@Endpoint` class is copied to the generated TypeScript file, and the type definitions are maintained.
This helps code completion work at least in Visual Studio Code and IntelliJ IDEA Ultimate Edition.

.Code Completion in Visual Studio Code
image:images/codecompletion.gif[Code-completion]
