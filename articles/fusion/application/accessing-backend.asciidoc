---
title: Accessing Java Backend
order: 60
layout: page
---


= Accessing Java Backend

A server-side Java endpoint is a back-end method that is exposed for calling from client-side TypeScript code.
An endpoint in Vaadin is a class that defines one or more API methods.

Vaadin bridges Java backend endpoints and a TypeScript frontend. It generates
TypeScript clients to call the Java backend in a type-checkable way.

[WARNING]
Vaadin endpoints depend on Spring Boot auto-configuration. It does not work if the auto-configuration is disabled, for example, when you use `@EnableWebMvc`. As a workaround, remove the `@EnableWebMvc` annotation, as stated in link:https://docs.spring.io/spring-boot/docs/2.3.4.RELEASE/reference/html/spring-boot-features.html#boot-features-spring-mvc-auto-configuration[Spring Boot documentation].
If you have an idea how to make it more useful for you, please share it on link:https://github.com/vaadin/flow/issues/new/[GitHub^].

== Creating an Endpoint

An endpoint is a Java class annotated with `@Endpoint`:

[source,java]
----
import com.vaadin.flow.server.connect.Endpoint;
import com.vaadin.flow.server.connect.auth.AnonymousAllowed;

/**
 * A Vaadin endpoint that counts numbers.
 */
@Endpoint
@AnonymousAllowed
public class CounterEndpoint {
    /**
     * A method that adds one to the argument.
     */
    public int addOne(int number) {
        return number + 1;
    }
}
----

When the application starts, Vaadin analyzes such classes in order to be able to process the requests made to such endpoints, and to appropriately verify user access.
For each request that is trying to access the method in the corresponding Vaadin endpoint, a permission check is carried on.
`@AnonymousAllowed` means that it permits anyone to call the method via the request without the authorization

Please refer to the <<../security/overview#, Security>> for configuring endpoint access.

== TypeScript Modules

In JavaScript and TypeScript, modules are files that follow the module syntax.
This syntax has the following properties:

- Top-level declarations (variables, functions, classes, etc.) are scoped inside the module, meaning that they are by default not available outside it.

- A module supports top-level `export` statements, which make declarations available to other modules.

- A module supports top-level `import` statements, which load and execute other modules, and can bring exported declarations.

The following example demonstrates the `City.ts` module:

.City.ts
[source,typescript]
----
// Declare and export an interface
export default interface City {
  country: string;
}
----

.index.ts
[source,typescript]
----
// Import and use a declaration from another module
import {City} from './City';
const cityObject: City = {
    name: "Turku",
    country: "Finland"
};
// Note: cityObject is not exported, thus it is only available in this file
----

In Vaadin applications, the `index.ts` (or, optionally, `index.js`) file is also a module.

== Modules Generated from Vaadin Endpoints

Fusion generates a TypeScript module for every Vaadin endpoint on the back end.
Each such module exports all the methods in the endpoint.

You can either import an entire generated module as an endpoint, or import the
methods from the module separately.
For example, the `CounterEndpoint.ts` could be used as in the following snippets:

.index.ts (import the whole module)
[[index.ts]]
[source,typescript]
----
// Other imports
import * as counterEndpoint from './generated/CounterEndpoint';

// Other code
counterEndpoint.addOne(1).then(result => console.log(result));
----

.index.ts (only import the needed method)
[source,typescript]
----
// Other imports
import {addOne} from './generated/CounterEndpoint';

// Other code
addOne(1).then(result => console.log(result));
----

Fusion generates the TypeScript modules automatically when you compile the application, as well as when the application is running in development mode.

By default, the generated files are located under `{project.basedir}/frontend/generated`.
You can change the folder by providing the path for the generator in the `generatedFrontendDirectory` property for Vaadin Maven plugin.

Vaadin takes care of type conversion between Java and TypeScript types.
For more information about supported types, see <<../advanced/fusion-advanced-type-conversion#, Type Conversion>>.

== Example TypeScript Module Contents

For example, the generated TypeScript module for the Java endpoint defined in
 <<accessing-backend#how-to-create-vaadin-endpoint,CounterEndpoint.java>> would look as follows:

[source,typescript]
.CounterEndpoint.ts
----
/**
 * A Vaadin endpoint that counts numbers.
 *
 * This module has been generated from CounterEndpoint.java
 * @module CounterEndpoint
 */

import client from './connect-client.default';

/**
 * A method that adds one to the argument.
 *
 * @param number
 */
export async function addOne(number: number) {
  return await client.call('CounterEndpoint', 'addOne', {number});
}
----

== Code Completion in IDEs

As you can see in the `CounterEndpoint.ts` example above, the Javadoc for the `@Endpoint` class is copied to the generated TypeScript file, and the type definitions are maintained.
This helps code completion work at least in Visual Studio Code and IntelliJ IDEA Ultimate Edition.

.Code Completion in Visual Studio Code
image:images/codecompletion.gif[Code-completion]
