---
title: TypeScript Client
order: 130
layout: page
---

== TypeScript Client Library

Vaadin consists of two parts: a backend and a client.
The client part is represented by the `@vaadin/flow-frontend/Connect` library that is able to support the features the backend part provides.

One of the main public entities of the library is the `ConnectClient` object, that provides a seamless way to communicate with Vaadin endpoints on the backend.

== Default TypeScript client

The default TypeScript client is the module that gets generated by the Vaadin maven plugin for a particular project.

The module contains the `ConnectClient` implementation that is set up to communicate with the backend side of the project.

== Generated Client Modules

Along with the default TypeScript client, the Vaadin maven plugin is capable of generating specific modules for each Vaadin endpoint defined in the backend part. Those modules use the default TypeScript client described above to communicate with the backend also.

== Usage example

Consider Vaadin backend that is started on `/customEndpoint` endpoint and has a single endpoint with name `SingleEndpoint`
and a method `customMethod` requiring a `number` parameter to be specified.

We would like to access this method from the client part.
Depending on how many generated files are present, one of the approaches below can be used.
The required `@vaadin/flow-frontend/Connect` TypeScript library is automatically installed by the Vaadin maven plugin.

=== Using the generated client module

The endpoint method can be called via the generated module method:

.Using generated module
[source, typescript]
[[generated-module]]
----
import * as singleEndpoint from './generated/SingleEndpoint';

(async() => {
  await singleEndpoint.customMethod(4);
})();
----

=== Using the generated default client

As an alternative to the generated modules, the default TypeScript client API can be used to access the Vaadin endpoint in the following way:

.Using generated client
[source, typescript]
[[generated-client]]
----
import client from './generated/connect-client.default';

(async() => {
  await client.call('SingleEndpoint', 'customMethod', {number: 4});
});
----

=== Using the Vaadin TypeScript Client library

Client library usage requires an extra step where we specify the endpoint of the server to send the requests to:

.Using client library
[source, typescript]
[[client-library]]
----
import {ConnectClient} from '@vaadin/flow-frontend/Connect';
const client = new ConnectClient({endpoint: '/customEndpoint'});

(async() => {
  await client.call('SingleEndpoint', 'customMethod', {number: 4});
});
----
