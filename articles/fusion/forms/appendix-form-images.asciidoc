---
title: Image Fields in Client-Side Forms
order: 110
layout: page
---

ifdef::env-github[:outfilesuffix: .asciidoc]

== Submitting Images in Client-Side Forms

A common use case is a form field that allows uploading an image.
For instance, an application may let users customize their avatars.
This tutorial shows how this can be implemented for client-side forms using the `vaadin-upload` component for local file selection (by file browser or dragging), but postponing the actual server upload until the form is submitted.

The tutorial app provides editing of a contact card.
It assumes a server-side bean where the image is stored as a Base64-encoded string in the `avatarBase64` field:

[source, java]
----
include::{root}/src/main/java/com/vaadin/demo/fusion/forms/Contact.java[]
----

It also assumes that the server exposes an endpoint for saving updated `Contact` instances:

[source, java]
----
include::{root}/src/main/java/com/vaadin/demo/fusion/forms/ContactEndpoint.java[]
----


The following client-side form binds the `avatarBase64` field of the instance to a `vaadin-upload` component:

[source, typescript]
----
include::{root}/frontend/demo/fusion/forms/contact-form.ts[]
----

In the above code, the custom `upload-before` listener prevents `vaadin-upload` from uploading the received file to the server, instead reading it into a Base64-encoded string and updating form field `avatarBase64` via the binder.
The small https://www.npmjs.com/package/promise-file-reader[`promise-file-reader`] library wrapping `FileReader` inside a promise is used here to handle the result synchronously.

Only after submitting the `Contact` instance to the `saveContact` endpoint (the statement `this.binder.submitTo(saveContact)` in the `save` method), does the server-side endpoint implementation receive the image string.
The server can then choose to recode the image for more efficient storage if necessary.

The advantage of using the string type is simplicity; you can use the built-in serialization mechanism of Fusion's form binder and endpoints.
Please note that this approach is not suitable for larger files (a streamed upload may be more appropriate).
