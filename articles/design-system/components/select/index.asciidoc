---
title: Select
layout: tabbed-page
tab-title: Usage
page-links: \
https://github.com/vaadin/vaadin-select-flow/releases/tag/{moduleMavenVersion:com.vaadin:vaadin-select-flow}[{moduleMavenVersion:com.vaadin:vaadin-select-flow}], \
https://github.com/vaadin/vaadin-select/releases/tag/v{moduleNpmVersion:vaadin-select}[{moduleNpmVersion:vaadin-select}]
---

= Select

// tag::description[]
Select is an input field component that allows the user to choose a single value from an overlay list that the user can open.
// end::description[]

[.example]
--
You create a Select component with the [elementname]`vaadin-select` element.
The overlay menu is rendered with a separate component, defined in the `.renderer` attribute.
Normally, you use a List Box.

[source,html]
----
include::../../../../frontend/demo/component/select/select-basic.ts[render,tags=snippet,indent=0,group=TypeScript]
----

The [classname]`Select` class takes the item type as a parameter.
Normally, you use either [classname]`String` or a business object type.
If you use an object type, you need to provide a getter for the item caption with `setItemLabelGenerator()`.
Items can be set with [methodname]`setItems()`, which can take a comma-separated list or a collection of objects.

[source, java]
----
include::../../../../src/main/java/com/vaadin/demo/component/select/SelectBasic.java[render,tags=snippet,indent=0,group=Java]
----

--

The overlay menu can be opened with a click, up/down arrow keys, Space, Enter or by typing the initial character of one of the options.

For large data sets it is preferable to use <<../combo-box/#,Combo Box>> instead of Select, as it allows users to filter the list of options.

== Separators

Separators can be used to group related options.

[.example]
--

You can define separators using the [elementname]`hr` element.

[source,html]
----
include::../../../../frontend/demo/component/select/select-separators.ts[render,tags=snippet,indent=0,group=TypeScript]
----

You need to use [methodname]`addComponent()` to add a [classname]`Hr` component after a specific item.

[source, java]
----
include::../../../../src/main/java/com/vaadin/demo/component/select/SelectSeparators.java[render,tags=snippet,indent=0,group=Java]
----

--

You should use separators sparingly to avoid creating unnecessary visual clutter.

== Disabled Items

Items can be disabled, making them unselectable while still visible.
Disabling an item indicates that it is currently unavailable, but can be available under different circumstances.

[.example]
--

The [propertyname]`disabled` attribute of an item controls whether it is shown as disabled.

[source,html]
----
include::../../../../frontend/demo/component/select/select-disabled.ts[render,tags=snippet,indent=0,group=TypeScript]
----

You need to pass [methodname]`setItemEnabledProvider()` a provider that tells whether a given item is disabled or not.

[source, java]
----
include::../../../../src/main/java/com/vaadin/demo/component/select/SelectDisabled.java[render,tags=snippet,indent=0,group=Java]
----

--

Notice that some assistive technologies do not announce disabled options.

== Placeholder

Placeholder is a textual prompt shown in case no item is selected.
If no placeholder is set, an empty item is shown instead.

[.example]
--

Placeholder is defined in an optional [propertyname]`placeholder` attribute for the [elementname]`vaadin-select` element.

[source,html]
----
include::../../../../frontend/demo/component/select/select-placeholder.ts[render,tags=snippet,indent=0,group=TypeScript]
----

Use [methodname]`setPlaceholder()` to set the placeholder.

[source, java]
----
include::../../../../src/main/java/com/vaadin/demo/component/select/SelectPlaceholder.java[render,tags=snippet,indent=0,group=Java]
----

--

== Custom Item Presentation

Items can have rich content instead of just plain text.
This can be useful for providing additional information in a more legible fashion than simply appending it to the item text.

[.example]
--
You normally have the item data in an array, so you need to map that to HTML.
You can have any HTML content in a list item.

The items can be styled with CSS.
If you use local styling, the styles need to be declared for the overlay.
Notice that you can not style the contents of the overlay in a [methodname]`styles()` method as usual, as that would apply to the Select component, not the overlay, which is separate in the DOM.

[source,html]
----
include::../../../../frontend/demo/component/select/select-rich.ts[render,tags=snippet,indent=0,group=TypeScript]
----

You can implement a `ComponentRenderer` to generate the HTML content of each item.
It gets the data object of the item as parameter.

[source, java]
----
include::../../../../src/main/java/com/vaadin/demo/component/select/SelectRich.java[render,tags=snippet,indent=0,group=Java]
----

--

== Best Practices

* When applicable, set the most common choice as the default value.

== Alternatives

* Select is an input field component, not a generic menu component.
Use the <<../menu-bar#, Menu Bar>> component to create menus for actions.

* For large data sets it is preferable to use <<../combo-box#, Combo Box>> instead of Select, as it allows users to filter the list of options.

== Related Components

[cols="1,3"]
|===
|<<../combo-box#, Combo Box>>
|Filterable list of options.
Appropriate for large sets of options.
Supports lazy loading entry of custom values.

|<<../radio-button#, Radio Button>>
|Better accessibility than Select, as all options are immediately visible.

|<<../list-box#, List Box>>
|Scrollable inline list of options.
Supports single and multi-select.

|<<../menu-bar#, Menu Bar>>
|Menus for items that trigger actions.
|===
