---
title: Input Fields
layout: page
---

= Input Fields

The following features are available in all <<Input Field Components,input field components>>.

== Label

Input fields should generally have labels identifying them. Labels should be clear, concise and written using sentence case. Avoid unclear and verbose language. Use <<Helper,helper texts>> to provide additional guidance.

[.example]
--
[source,html]
----
include::../../../../frontend/demo/component/inputfields/input-field-label.ts[render,tags=snippet,indent=0,group=TypeScript]
----
--

In situations where sufficient context is provided, such as grid filters and search fields, labels can be omitted; in these cases an aria-label attribute should be provided instead to identify the field, so that users  of assistive technologies can interpret the input correctly. Icons and placeholders can be used in addition to a label or aria-label to help convey a field’s purpose and usage:

[.example]
--
[source,html]
----
include::../../../../frontend/demo/component/inputfields/input-field-aria-label.ts[render,tags=snippet,indent=0,group=TypeScript]
----
--

== Helper

Helpers provide additional information when needed so that end users can successfully complete a form or field. They are especially helpful when a specific format or requirement must be met. Helpers typically consist of plain text but HTML and components are also supported.

[.example]
--
[source,html]
----
include::../../../../frontend/demo/component/inputfields/input-field-helper.ts[render,tags=snippet,indent=0,group=TypeScript]
----
--

Helpers are preferable to tooltips since the latter aren’t accessible by assistive technologies such as screen readers nor available for touch screen users.

== Required

Input fields can either be optional or required. Optional fields are typically left unmarked. In Vaadin's default theme, Lumo, required fields are marked with a bullet character. It's recommended to provide hint text to inform users of how required fields are marked:

[.example]
--
[source,html]
----
include::../../../../frontend/demo/component/inputfields/input-field-required.ts[render,tags=snippet,indent=0,group=TypeScript]
----
--

The required indicator is only shown when the field is empty.

=== Marking Required & Optional Fields

If a form consists of mostly optional fields, then mark the required ones. If a form is made up of mostly required fields, then indicate the optional ones by adding a “(optional)” suffix to their labels.

A consistent experience is key to providing a good user experience so be careful in mixing and matching these approaches.

== Non-editable Fields

In some situations, the user is not allowed to edit the value of certain fields. Those fields can be read-only or disabled. Choose the suitable one depending on the situation.

=== Read-only

[.example]
--
[source,html]
----
include::../../../../frontend/demo/component/inputfields/input-field-read-only.ts[render,tags=snippet,indent=0,group=TypeScript]
----
--

Use read-only when content needs to be *accessible but not editable*. Read-only elements cannot be edited, but they do participate in the tabbing order and can thus receive focus. The contents of a read-only input can be selected and copied.

=== Disabled

[.example]
--
[source,html]
----
include::../../../../frontend/demo/component/inputfields/input-field-disabled.ts[render,tags=snippet,indent=0,group=TypeScript]
----
--

Disable a field to mark it as *currently unavailable*. Disabled state is used for fields that are *not editable* and *do not need to be readable*. Disabled elements cannot be focused and may be inaccessible to assistive technologies like screen readers.

Disabling can be preferable to hiding an element to prevent changes in layout when the element’s visibility changes, and to make users aware of its existence even when currently unavailable.

[NOTE]
====
If the user needs to be able to read (or copy) the value, use read-only instead.
====

== Focus

Focus styles are used to highlight the currently active element which is especially useful for keyboard navigation.

[.example]
--
[source,html]
----
include::../../../../frontend/demo/component/inputfields/input-field-focus.ts[render,tags=snippet,indent=0,group=TypeScript]
----
--

Please note that the focus style is different for keyboards and pointing devices:

[source,html, role=render-only]
----
include::../../../../frontend/demo/component/inputfields/input-field-focus-styles.ts[render,tags=snippet,indent=0]
----

== Input Field Components

Vaadin offers many different components for different types of input:

|===
|Web Component |Usage recommendations

|link:text-field[TextField]
|Basic single-line text input.

|link:text-area[TextArea]
|Multi-line text input, for values that can’t be expected to fit on a single line, or when manual line breaks need to be supported.

|link:email-field[EmailField]
|For email addresses.

|link:number-field[NumberField]
|Numeric-only input, e.g. counts, measures or monetary values.

|link:password-field[PasswordField]
|Optionally masked password entry.

|link:date-picker[DatePicker]
|Date entry via keyboard or calendar picker.

|link:time-picker[TimePicker]
|Selecting a time of day; resolution range from hours to milliseconds.

|link:date-time-picker[DateTimePicker]
|Combined date and time entry.

|link:radio-button[Radio button]
|Select a single option from a list. Optimal accessibility, as all options are immediately visible.

|link:select[Select]
|Select a value from a dropdown. More compact than Radio Buttons.

|link:combo-box[ComboBox]
|Select a value from a filterable dropdown. Appropriate for large sets of options. Supports lazy loading and entry of custom values.

|link:checkbox[Checkbox]
|For selecting multiple options from a list, or a single binary toggle.

|link:list-box[List Box]
|Selection of single or multiple options from a scrollable inline list.

|link:rich-text-editor[Rich Text Editor]
|Multi-line text entry with rich formatting support.

|link:uplaod[Upload]
|File upload component with progress indicator and multi-file support.
|===
