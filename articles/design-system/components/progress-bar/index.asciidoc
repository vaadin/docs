---
title: Progress Bar
layout: tabbed-page
tab-title: Usage
page-links: \
https://github.com/vaadin/vaadin-progress-bar-flow/releases/tag/{moduleMavenVersion:com.vaadin:vaadin-progress-bar-flow}[{moduleMavenVersion:com.vaadin:vaadin-progress-bar-flow}], \
https://github.com/vaadin/vaadin-progress-bar/releases/tag/v{moduleNpmVersion:vaadin-progress-bar}[{moduleNpmVersion:vaadin-progress-bar}]
---
= Progress Bar

// tag::description[]
Progress Bar shows the completion status of a task or process.
The progress can be determinate or indeterminate.
Use Progress Bar to indicate an ongoing process that takes a noticeable time to finish.
// end::description[]

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/progressbar/progress-bar-basic.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source, java]
----
include::{root}/src/main/java/com/vaadin/demo/component/progressbar/ProgressBarBasic.java[render,tags=snippet,indent=0,group=Java]
----
--

[NOTE]
====
Vaadin applications show a loading indicator at the top of the viewport while processing a server request, after a configurable delay.
*You do not need to provide an explicit Progress Bar for these situations.*
====

== Modes

=== Determinate

Use a determinate Progress Bar when progress can be computed.

[.example]
--

[source,typescript]
----
include::{root}/frontend/demo/component/progressbar/progress-bar-determinate.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source, java]
----
include::{root}/src/main/java/com/vaadin/demo/component/progressbar/ProgressBarDeterminate.java[render,tags=snippet,indent=0,group=Java]
----
--

=== Indeterminate

Use an indeterminate Progress Bar to show that progress is ongoing but cannot be computed.

[.example]
--
[source,typescript]
----
include::{root}/frontend/demo/component/progressbar/progress-bar-indeterminate.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source, java]
----
include::{root}/src/main/java/com/vaadin/demo/component/progressbar/ProgressBarIndeterminate.java[render,tags=snippet,indent=0,group=Java]
----
--

== Bounds and initial value

The progress value defaults to a range from 0 to 1, with an initial value of 0.
These can be changed to any numeric values:

[.example]
--
[source,typescript]
----
include::{root}/frontend/demo/component/progressbar/progress-bar-custom-range.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source, java]
----
include::{root}/src/main/java/com/vaadin/demo/component/progressbar/ProgressBarCustomRange.java[render,tags=snippet,indent=0,group=Java]
----
--

== Theme variants

There are three theme variants; contrast, success and error.

[.example]
--
[source,typescript]
----
include::{root}/frontend/demo/component/progressbar/progress-bar-theme-variants.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source, java]
----
include::{root}/src/main/java/com/vaadin/demo/component/progressbar/ProgressBarThemeVariants.java[render,tags=snippet,indent=0,group=Java]
----
--

|===
|Variant |Theme name |Usage recommendations

|Success
|success
| * When progress is satisfactory and/or nearing completion

 * Visual preference

|Error
|error
| * When progress is unsatisfactory

 * Draw the user’s attention to a stalled or failed process

|Contrast
|contrast
| * Visual preference

|===

== Best Practices

=== Provide a label

Use labels to give context to a Progress Bar.
Labels can also be used to textualise the progress of a determinate Progress Bar, e.g. completion percentage or number of items processed.

[.example]
--
[source,typescript]
----
include::{root}/frontend/demo/component/progressbar/progress-bar-label.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source, java]
----
include::{root}/src/main/java/com/vaadin/demo/component/progressbar/ProgressBarLabel.java[render,tags=snippet,indent=0,group=Java]
----
--

=== State Switching

Switch from indeterminate to determinate if the progress becomes computable, and vice versa.

=== Estimate Completion Time

Provide estimates when possible.
If a process takes approximately 20 minutes communicate that to the user.

[.example]
--
[source,typescript]
----
include::{root}/frontend/demo/component/progressbar/progress-bar-completion-time.ts[render,tags=snippet,indent=0,group=TypeScript]
----

[source, java]
----
include::{root}/src/main/java/com/vaadin/demo/component/progressbar/ProgressBarCompletionTime.java[render,tags=snippet,indent=0,group=Java]
----
--

=== Asynchronous processes

If the user is waiting for a process to finish use, consider using a Notification to notify them upon its completion and/or failure.
This is especially useful if the processing is done “off-screen” or the user is doing other work while waiting.

[NOTE]
====
Use asynchronous processes whenever possible so as not to block the user from completing other tasks while waiting for the process to finish.
====

=== When to Use

If a back-end process takes longer than 1 second, use a Progress Bar to indicate to the user that something is happening, especially if it blocks the user’s workflow.

=== Placement

A Progress Bar's location in the UI indicates to the user its scope and whether the surrounding UI is operable during its progression.

For example, a Vaadin application's built-in loading indicator is placed at the top of the viewport to indicate that it affects the entire application.
The UI is generally not operable during pending server requests.

Placing a Progress Bar in a dialog, details panel or an otherwise clearly defined section, indicates that the process displayed is specific to that section.
Depending on the user case, the user may or may not be able to interact with the UI.

== Related Components

|===
|Component |Usage recommendations

|<<../upload#,Upload>>
|Component for uploading files.
|===
