---
title: Routing and Navigation
description: |
  Vaadin applications consist of one or more views and routing defines how URL addresses are mapped to those views.
  Navigating around the application works together with routing.
order: 30
---

= Routing and Navigation

Views in Vaadin are larger components that present logical parts of your UI.
They are typically composed of other smaller components and help you structure and re-use your UI code.
Routing in Vaadin means mapping views into specific URLs and maintaining a meaningful https://en.wikipedia.org/wiki/Deep_linking[deep linking].
A <<route#,route>> in Vaadin lingo means a view mapped to a specific URL. 
URLs can also contain <<route-parameters#,Route Parameters>> or <<additional-guides/query-parameters#,Query Parameters>> that views can utilize to configure their internal state further.
Routing in your application allows your users (by copy-pasting the current URL from their browser) and other applications to share direct links to a specific view and state in your Vaadin UI.

The user <<navigation#,navigates between views>> in your application by interacting with UI elements such as buttons, links, and menus.
Vaadin maintains the proper deep linking URL in your end user's browser when using the framework's built-in mechanisms for navigation.

Routing and navigation should not be considered as the primary mechanism to interact with different parts of your UI, but you should simply define pure Java APIs instead.
In fact, if deep linking is not needed, even a large Vaadin application can ignore routing and navigation for simplicity and only route the entry view to the root URL of the application.
However, Routing and Navigation APIs in Vaadin help you achieve a decent level of deep linking relatively easily. Thus, we suggest routing at least the top-level views to different URLs and then utilizing more advanced features for views where you need a better deep linking.

In most non-trivial applications, views also need to interact with each other and share data. When initiating navigation, the previous view can <<navigation#passing-data-using-route-parameters,submit trivial data>> as route or query parameters to the new view. The easiest, safest, and performant way to share data between views is to <<navigation#interacting-directly-with-the-target-view,call their Java API directly>>. Doing this, however, will not automatically maintain the URL in the browser. The actual UI state can also lose parity with the URL shown in the browser by internal interaction within the view or, for example, by a message arriving through another thread. In these cases, you should <<route-parameters#maintaining-route-parameters-without-navigation,manually maintain the URL>> if deep linking is required.

== Topics

section_outline::[]
