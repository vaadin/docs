---
title: Navigation Lifecycle
description: Understanding the Hilla Router navigation lifecycle.
order: 30
layout: page
---


== Navigation Lifecycle

The router executes callbacks on each view to check whether the navigation should continue, be postponed or be redirected.
You need to implement navigation controllers differently, depending on whether the view is on the client or server side.

=== Hilla Router Navigation Lifecycle (Client-Side Views)

When returning an element or Web Component in a client view, developer might implement the following lifecycle interfaces:

- [interfacename]#BeforeEnterObserver#: the [methodname]#onBeforeEnter(location, commands, router)# callback is executed before the outlet container is updated with the new element.
At this point, the user can cancel the navigation.
- [interfacename]#AfterEnterObserver#: the [methodname]#onAfterEnter(location, commands, router)# callback is executed after the new element has been attached to the outlet.
The difference between this method and [methodname]#onBeforeEnter()# is that, when this method is executed, there is no way to cancel the navigation.
- [interfacename]#BeforeLeaveObserver#: the [methodname]#onBeforeLeave(location, commands, router)# callback is executed before the previous element is detached.
Navigation can be cancelled at this point.
- [interfacename]#AfterLeaveObserver#: the [methodname]#onAfterLeave(location, commands, router)# callback is executed before the element is removed from the DOM.
When this method is executed, there is no way to cancel the navigation.
During the execution of the [methodname]#onBeforeEnter()# and [methodname]#onBeforeLeave()# callbacks, the user can postpone the navigation by returning [methodname]#commands.prevent()#.
Uniquely in [methodname]#onBeforeEnter()#, navigation can be redirected by returning [methodname]#commands.redirect(path)#.

[NOTE]
Lifecycle callbacks are asynchronous.

The following snippets show how to cancel navigation in a Web Component:

[source,typescript]
.my-demo.ts
----
import { LitElement } from 'lit';
import { customElement } from 'lit/decorators.js';
import {
  BeforeEnterObserver,
  PreventAndRedirectCommands,
  Router,
  RouterLocation
} from '@vaadin/router';

@customElement('my-view')
class MyView extends LitElement implements BeforeEnterObserver {
  onBeforeEnter(
      location: RouterLocation,
      commands: PreventAndRedirectCommands,
      router: Router) {
    if (location.pathname === '/cancel') {
      return commands.prevent();
    }
  }
}
----

[source,typescript]
.index.ts
----
import { Router } from '@vaadin/router';

...

export const router = new Router(document.querySelector('#outlet'));
router.setRoutes([
  {
    path: 'view1',
    component: 'my-view',
    action: async () => { await import('./views/my-view'); }
  }
]);
----

For more information, visit the Hilla [classname]#Router# link:https://vaadin.github.io/router/vaadin-router/#/classes/WebComponentInterface[API documentation^].
