---
title: Azure Active Directory
page-title: Vaadin 23 SSO Kit Azure AD Integration 
description: Azure Active Directory is a commercial identity and access management solution. This page explains how to use Azure AD together with SSO Kit.
page-links:
  - https://www.azure.microsoft.com[Azure website]
---

= Azure AD Integration

This tutorial shows how to restrict access to a Vaadin view by using SSO Kit together with Azure Active Directory.

== Pre-requisites

A subscription with access to SSO Kit or a trial license
An Azure account
A Vaadin application with SSO Kit. You can follow the Getting Started tutorial to configure your application for SSO Kit.

== Accessing Azure Active Directory

You can access Azure AD through the Microsoft Azure Portal after signing up. A default directory and administrator user is included in your account.

== Creating a New App Registration

Select [guilabel]`Azure Active Directory` from the [guilabel]`Azure services` list in the portal. Youâ€™re greeted by the default directory overview that shows your details. Click on the + sign next to [guilabel]`Add` and choose [guilabel]`App registration` to register your Vaadin app into Azure AD. 

Give the registration a name and choose a scope for the registration. The options are:

. Accounts in this organizational directory only;
. Accounts in any organizational directory;
. Accounts in any organizational directory and personal Microsoft accounts;
. Personal Microsoft accounts only.

The first option is for the default directory provided by Microsoft when creating an Azure account.

Select [guilabel]`Web` as the application type and click on [guilabel]`register` to complete your registration.

== Setting Sign-in and Sign-out URIs

Open your App registration and select [guilabel]`Authentication` from the sidebar menu: Type http://localhost:8080/login/oauth2/code/azure as the Redirect URI and https://login.microsoftonline.com/common/oauth2/v2.0/logout as the Front-channel logout URI. These are the links Azure redirects to when users sign in and out of your application.

== Configuring Your Vaadin App to Use Azure AD

Open the `application.properties` file located in your Vaadin app and add the Client ID and issuer URI to the Spring Security configurations. The issuer URI in this example is https://login.microsoftonline.com/common/v2.0 where `common` is a general Tenant ID and v2.0 is the token type.

You can find your Tenant ID in the [guilabel]`Properties` menu in the Azure Active Directory dashboard.

=== Creating a Client Secret

You can use secret IDs to establish a secure connection with your Vaadin app. To create a secret, select your newly created App Registration and navigate to [guilabel]`Certificates & secrets` from the sidebar menu. Copy and paste the secret immediately to your Vaadin application as it can only be viewed once. Click on [guilabel]`New client secret` and [guilabel]`Save` to create a new secret ID. Copy and paste it to your `applications.properties` file, like so:

.`application.properties`
[source,properties]
----
spring.security.oauth2.client.registration.azure.active-directory.client-secret=Paste your Client secret here
----

=== Configuring Access Tokens

Add the URIs for your access tokens to your `applications.properties` file. You can find them from the Azure portal by selecting [guilabel]`Endpoints` from your App registration, like so:

.`application.properties`
[source,properties]
----
security.oauth2.client.access-token-uri=https://login.microsoftonline.com/common/oauth2/v2.0/token
security.oauth2.client.user-authorization-uri=https://login.microsoftonline.com/common/oauth2/v2.0/authorize
----

=== Configuring the Manifest

Navigate to [guilabel]`Manifest` from the sidebar menu and replace `"accessTokenAcceptedVersion": null,` with `"accessTokenAcceptedVersion": 2,` and click on [guilabel]`Save`. This enables you to use `v2` access tokens for your application. The first lines of the manifest should then look something like this:

.`manifest`
[source,json]
----
{
	"id": "934i9efugsf0s0poq+wdlwa9e0d8awfj",
	"acceptMappedClaims": null,
	"accessTokenAcceptedVersion": 2,
	"addIns": [],
}
----
Views protected by the `@PermitAll` attribute now redirect to Microsoft for login.

==== Creating a Security Key

You need a security key if you want to use the HTTPS protocol on localhost. Run the `keytool -genkeypair -alias testCert -keyalg RSA -storetype PKCS12 -keystore keystore.p12 -storepass password` command in your app terminal to create a new Security Key with the following properties:

----
Password: password
Alias: testCert
Type: PKCS12
Path: {your vaadin app root}/keystore.p12
----

Add the key to your `application.properties` file. It should then look something like this:

.`application.properties`
[source,properties]
----
# SSO Kit configuration


vaadin.sso.login-route=/oauth/authorization/azure.active-directory
spring.security.oauth2.client.registration.azure.active-directory.client-secret=Paste your Client secret here
spring.security.oauth2.client.registration.azure.active-directory.client-id=Paste your Client ID here
spring.security.oauth2.client.registration.azure.active-directory.scope=openid
spring.security.oauth2.client.provider.azure.active-directory.issuer-uri=https://login.microsoftonline.com/common/
security.oauth2.client.access-token-uri=https://login.microsoftonline.com/common/oauth2/v2.0/token
security.oauth2.client.user-authorization-uri=https://login.microsoftonline.com/common/oauth2/v2.0/authorize


# Common settings
server.port=${PORT:8080}


# SSL configuration
server.ssl.key-store=/Users/mikael/Desktop/sso-kit-demo-app/keystore.p12
server.ssl.key-store-password=password
server.ssl.key-store-type=PKCS12
server.ssl.key-alias=testCert
server.ssl.key-password=password
----

=== Assigning Permissions

Users need to provide consent for using the permissions set by the OpenID protocol. They can accept the permissions when signing into your application or you may grant permission for users as an administrator for testing purposes. 

Select [guilabel]`API Permissions` from the sidebar menu and choose [guilabel]`Add a permission`. Click on [guilabel]`Microsoft Graph` from the menu and then [guilabel]`Delegated permissions`. You can then type `openid` to find it from the list of permissions. Tick the box next to `openid` and click on [guilabel]`Add permissions` at the bottom of the menu.

[TIP]Grant consent for your users 
You can click on [guilabel]`Grant admin consent for Default Directory` in the API Permissions page if you wish to grant consent for your users.


==== Adding New Users
In the Azure developer dashboard, select your directory and select [guilabel]`Users` from the sidebar menu. Click [guilabel]`New user` to invoice the user creation wizard and fill in the user details. Click on [guilabel]`Create` to create the user.

==== Assigning users to the application
Navigate to [guilabel]`Enterprise applications` in your directory dashboard. Select your app from the list and select [guilabel]`Users and groups` from the sidebar menu. Add the user to the application by selecting [guilabel]`Add user/group`. Your administrator user account is added already by default.

