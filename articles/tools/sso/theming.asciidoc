---
title: Theming
order: 1
layout: page
---

[[sso.theming]]
= Theming

Each SSO provider defines its way to customize the login page.
In this section are listed the features and limitations that each supported SSO provider gives.

[[sso.theming.keycloak]]
== Keycloak

Keycloak offers the most control over what can be customized, from the login page to the administration and user dashboards.
SSO Kit offers a custom theme for Keycloak based on https://vaadin.com/docs/latest/styling/lumo[Lumo].
It makes the provider's login page have a look and feel similar to what a Vaadin developer would experience using the https://vaadin.com/docs/latest/components/login[Login component].

=== Installation

To use the Keycloak Lumo theme, you need to:

. Download the http://tools.vaadin.com/nexus/content/repositories/vaadin-prereleases/com/vaadin/sso-kit-keycloak-theme/[`sso-kit-keycloak-lumo`] JAR file from Maven
. Copy the JAR file into the `/providers` directory in your Keycloak installation

Then, you can either set the theme for all or some of the clients in a realm.

- To set the theme for all the clients, go to "Realm settings", "Themes" and at the "Login theme" selector choose `sso-kit-keycloak-lumo`.
- To set the theme on a specific client, go to "Clients", find the client, and at the "Login settings" section select `sso-kit-keycloak-lumo` as the "Login theme".

=== Customizing the Lumo theme

You can also customize the Lumo theme to suit your application's branding.
To customize the theme, you need to:

. Create this directory structure under the `/themes` directory of you Keycloak installation: 

  themes/
  └── your-theme/
     ├── resources/css/
     │  └── my-theme-styles.css
     └── themes.properties

. In `themes.properties`, you need to define some properties such as the parent theme, and load the CSS files:
+
.`themes.properties`
[source,properties]
----
# Specify the parent theme
parent=sso-kit-keycloak-lumo
# Need to also load the files from the parent theme
styles=css/lumo-common.css css/lumo-styles.css css/my-theme-styles.css
----

. then in `my-theme-styles.css` you can add your styles and, for example, change the primary color to suit your application's branding:
+
.`my-theme-styles.css`
[source,css]
----
include::{root}/frontend/themes/docs/keycloak-theme-example.css[]
----

While working on your custom theme you might want to start Keycloak disabling theme caches, like this:

----
./bin/kc.[sh|bat] start-dev --spi-theme-static-max-age=-1 --spi-theme-cache-themes=false --spi-theme-cache-templates=false
----

For further instructions on theming for Keycloak, please refer to the https://www.keycloak.org/docs/latest/server_development/index.html#_themes:[official Keycloak theme documentation].
