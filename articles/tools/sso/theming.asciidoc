---
title: Theming
order: 1
layout: page
---

[[sso.theming]]
= Theming

Each SSO provider defines its way to customize the login page.
In this section are listed the features and limitations that each supported SSO provider gives.

== Keycloak

Keycloak offers the most control over what can be customized, from the login page to the admin, forms, etc.
Vaadin offers a custom theme for Keycloak based on Lumo.
It makes the provider's login page have a look and feel similar to what a Vaadin developer would experience using the Login component.

The SSO Kit Keycloak Lumo theme has most of the CSS properties found on the Lumo theme in a Vaadin application.

=== Installation

To use the SSO Kit Keycloak Lumo theme, you need:

. Download the `sso-kit-keycloak-lumo` `jar` from Maven
. Copy the jar file into the `/providers` folder at your Keycloak server

Then, you can either define the theme to be used either by the realm or the client on which your application is using:

. To use on the realm, go to "Realm settings" > "Themes" and at the "Login theme" selector, choose `sso-kit-keycloak-lumo`; or
. To use only the client, go to "Clients" > "the client being used by the application" and at the "Login settings" section, select `sso-kit-keycloak-lumo` at the "Login theme" selector.

=== Customizing the SSO Kit Keycloak Lumo theme

You can also customize the SSO Kit Keycloak Lumo theme to make it more suitable for the branding of your application.
To create your theme, you need:

. In your Keycloak server, create this folder structure under the `/themes` folder: 

  themes/
  └──your-theme/
     ├──resources/css/
     │  └── my-theme-styles.css
     └── themes.properties

. In `themes.properties`, you need to define some properties, like the parent theme, and load the CSS files:
+
.`themes.properties`
[source,properties]
----
# Specify the parent theme
parent=sso-kit-keycloak-lumo
# Need to also load the files from the parent theme
styles=css/lumo-common.css css/lumo-styles.css css/my-theme-styles.css
----
. Then in `my-theme-styles.css` you can add your styles and, for example, change the primary color to suit your application's branding:
+
.`my-theme-styles.css`
[source,css]
----
include::{root}/frontend/themes/docs/keycloak-theme-example.css[]
----

While working on your custom theme, you can start the Keycloak server with

----
./bin/kc.[sh|bat] start-dev --spi-theme-static-max-age=-1 --spi-theme-cache-themes=false --spi-theme-cache-templates=false
----

For further instructions on theming, please refer to the https://www.keycloak.org/docs/latest/server_development/index.html#_themes:[official Keycloak theme documentation].