---
title: SSO Kit
section-nav: commercial
---

[[sso.overview]]
= SSO Kit

:commercial-feature: SSO Kit
include::{articles}/_commercial-banner.asciidoc[opts=optional]

SSO Kit is an add-on for Vaadin Flow that provides all the configuration you need to add single sign-on capabilities to your applications.

[[sso.getting-started]]
== Getting Started

SSO Kit builds upon https://spring.io/projects/spring-security[Spring Security], and it comes with a starter module that takes care of configuring the security settings you need to authenticate against your identity provider.

.`pom.xml`
[source,xml]
----
<dependency>
    <groupId>com.vaadin</groupId>
    <artifactId>sso-kit-starter</artifactId>
</dependency>
----

This is an example of the properties to set to enable a Keycloak instance to perform authentication:

[.example]
--

.application.yml
[source,yml]
----
spring:
  security:
    oauth2:
      client:
        provider:
          keycloak:
            issuer-uri: https://my-keycloak.io/realms/my-realm
        registration:
          keycloak:
            client-id: my-client
            client-secret: very-secret-value
            scope:
            - profile
            - openid
            - email
            - roles
----

.application.properties
[source,properties]
----
spring.security.oauth2.client.provider.keycloak.issuer-uri=https://my-keycloak.io/realms/my-realm
spring.security.oauth2.client.registration.keycloak.client-id= my-client
spring.security.oauth2.client.registration.keycloak.client-secret=very-secret-value
spring.security.oauth2.client.registration.keycloak.scope=profile,openid,email,roles
----
--

=== Authentication Context

Most applications that have some sort of security need some common tasks, like getting the authenticated user or logging a user out.
For that reason, SSO Kit provides the `AuthenticationContext` interface that can be injected into, for example, views and make it easier to perform these common tasks.

==== Retrieving the Authenticated User

To get the object containing the information about the user, you need first to inject the `AuthenticationContext` bean created by the SSO Kit.
Then, to get the authenticated user, you need to call the method `AuthenciationContext::getAuthenticatedUser()`. 
The method returns an `Optional` object containing the user information if the session has an authenticated user or null, otherwise.

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/sso/ProfileView.java[render,tags=profile-view;authenticated-user;!logout,indent=0,group=Java]
----

By default, the user object returned by `AuthenticationContext::getAuthenticatedUser()` is an instance of `OidcUser`.
But sometimes, the application might define its implementation of the `OidcUser` interface, for example, translating the roles from string to enum objects.
In that case, you can use `AuthenticationContext::getAuthenticatedUser(Class<U> userType)`, where `userType` is a class/interface that implements `OidcUser`.

=== Single Sign-On

SSO Kit provides a `SingleSignOnConfiguration` bean to auto-configure Vaadin and Spring to allow single sign-on against external identity providers.

.Customized security configuration
[NOTE]
====
If you need a customized security configuration, you can disable this auto-configuration class by setting the `auto-configure` property to `false` and define your own configuration class:

[.example]
--

.application.yml
[source,yml]
----
vaadin:
  sso:
    auto-configure: false
----

.application.properties
[source,properties]
----
vaadin.sso.auto-configure=false
----
--
====

==== Login

This configuration enables login for the identity providers defined in the application configuration.
It instructs the application to accept requests for the login route, which can be configured setting the `login-route` property:

[.example]
--

.application.yml
[source,yml]
----
vaadin:
  sso:
    login-route: your-login-route
----

.application.properties
[source,properties]
----
vaadin.sso.login-route=your-login-route
----
--

The default value for this property is `/login`.

.Custom Login Page
[TIP]

Some SSO providers enables to customize the default login theme, find out more in <<{articles}/tools/sso/theming, Theming>>.

==== Protecting Your Views

This configuration redirects to the provider's login page any unauthorized request.
You can set which views require authentication annotating them as described in <<{articles}/security/enabling-security#annotating-the-view-classes, Annotating the View Classes>>.
For example:

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/sso/ProfileView.java[render,tags=full-class;!class-content,indent=0,group=Java]
----

=== Single Sign-Off

SSO Kit provides two methods for logging out the user, the `https://openid.net/specs/openid-connect-rpinitiated-1_0.html:[RP-Initiated Logout]` and the `https://openid.net/specs/openid-connect-backchannel-1_0.html:[Back-Channel Logout]`.

==== RP-Initiated Logout

The RP-Initiated Logout enables the relying party to request that an end-user be logged out by the OpenID provider.
It redirects the end-user's user agent to the OpenID provider's logout endpoint.

The `AuthenticationContext` bean provides the `AuthenciationContext::logout()` method to end both the local user session and the provider's session:

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/sso/ProfileView.java[render,tags=full-class;!authenticated-user,indent=0,group=Java]
----

After a successful logout the user is redirected to the application's redirect route.
You can set this by the `logout-redirect-route` property:

[.example]
--

.application.yml
[source,yml]
----
vaadin:
  sso:
    logout-redirect-route: your-logout-redirect-route
----

.application.properties
[source,properties]
----
vaadin.sso.logout-redirect-route=your-logout-redirect-route
----
--

==== Back-Channel Logout
