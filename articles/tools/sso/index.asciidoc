---
title: SSO Kit
section-nav: commercial
---

[[sso.overview]]
= SSO Kit

:commercial-feature: SSO Kit
include::{articles}/_commercial-banner.asciidoc[opts=optional]

SSO Kit is an add-on for Vaadin Flow that provides all the configuration you need to add single sign-on capabilities to your applications.

[[sso.getting-started]]
== Getting Started

SSO Kit is built upon https://spring.io/projects/spring-security[Spring Security] and it comes with a starter module that takes care of configuring the security settings you need to authenticate against your identity provider.

.pom.xml
[source, xml]
----
<dependency>
    <groupId>com.vaadin</groupId>
    <artifactId>sso-kit-starter</artifactId>
</dependency>
----

This is an example of the properties to set to enable a Keycloak instance to perform authentication:

.application.yml
[source, yml]
----
spring:
  security:
    oauth2:
      client:
        provider:
          keycloak:
            issuer-uri: https://my-keycloak.io/realms/my-realm
        registration:
          keycloak:
            client-id: my-client
            client-secret: verySecretValue
            scope:
            - profile
            - openid
            - email
            - roles
----

=== Authentication Context

Most applications that have some sort of security, will need a few common tasks, like getting the authenticated user or logging a user out.
For that reason, SSO Kit provides the `AuthenticationContext` interface that can be injected into, e.g., views, and make it easier to perform these common tasks.

==== Retrieving the Authenticated User

To get the object containing the information about the user, you need first to inject the `AuthenticationContext` object created by the SSO Kit.
Then, to get the authenticated user, you need to call the method `AuthenciationContext::getAuthenticatedUser()`. 
The method returns an `Optional` object containing the user information if the session contains an authenticated user or null, otherwise.

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/sso/ProfileView.java[tags=profile-view,indent=0]
----

By default, the user object returned by `AuthenticationContext::getAuthenticatedUser()` is an instance of `OidcUser`.
But sometimes, the application might define its implementation of the `OidcUser` interface for, e.g., translating the roles from string to enum objects.
In that case, you can use `AuthenticationContext::getAuthenticatedUser(Class<U> userType)`, where `userType` is a class/interface that implements `OidcUser`.