---
title: Behavior-Driven Development
order: 100
layout: page
---

[[testbench.bdd]]
= Behavior-Driven Development

Behavior-driven development (BDD) is a development methodology based on
test-driven development, where development starts from writing tests for the
software-to-be. BDD involves using a __ubiquitous language__ to communicate
between business goals - the desired Behavior - and tests to ensure that the
software fulfills those goals.

The BDD process starts by collection of business requirements expressed as
__user stories__, as is typical in agile methodologies. A user with a __role__
requests a __feature__ to gain a __benefit__.

Stories can be expressed as number of __scenarios__ that describe different
cases of the desired Behavior. Such a scenario can be formalized with the
following three phases:

* __Given__ that I have calculator open

* __When__ I push calculator buttons

* __Then__ the display should show the result


This kind of formalization is realized in the JBehave BDD framework for Java.
The TestBench Demo includes a JBehave example, where the above scenario is
written as the
link:https://github.com/vaadin/testbench-demo/blob/master/src/test/java/com/vaadin/testbenchexample/bdd/CalculatorSteps.java[following
test class]:


[source, java]
----
public class CalculatorSteps extends TestBenchTestCase {
    private WebDriver driver;
    private CalculatorPageObject calculator;

    @BeforeScenario
    public void setUpWebDriver() {
        driver = TestBench.createDriver(new FirefoxDriver());
        calculator = PageFactory.initElements(driver,
                CalculatorPageObject.class);
    }

    @AfterScenario
    public void tearDownWebDriver() {
        driver.quit();
    }

    @Given("I have the calculator open")
    public void theCalculatorIsOpen() {
        calculator.open();
    }

    @When("I push $buttons")
    public void enter(String buttons) {
        calculator.enter(buttons);
    }

    @Then("the display should show $result")
    public void displayShows(String result) {
        assertEquals(result, calculator.getResult());
    }
}
----

The demo employs the page object defined for the application UI, as described in
<<dummy/../testbench-maintainable-tests-using-page-objects#,Creating Maintainble Tests using Page Objects>>.

Such scenarios are included in one or more stories, which need to be configured
in a class extending `JUnitStory` or `JUnitStories`. In
the example, this is done in the
https://github.com/vaadin/testbench-demo/blob/master/src/test/java/com/vaadin/testbenchexample/bdd/SimpleCalculation.java
class. It defines how story classes can be found dynamically by the class loader
and how stories are reported.

For further documentation, please see JBehave website at
link:http://jbehave.org/[jbehave.org].
