---
title: UI Unit Testing
order: 160
layout: page
---

[[testbench.uiunit]]
= UI Unit Testing

[[testbench.uiunit.introduction]]
== Introduction

UI unit testing removes the necessity to run both the browser and the servlet container, to test your Vaadin-based applications faster.

- container-less testing: You do not need to launch the servlet container. UI unit testing creates the Vaadin Session, the UI and other necessary Vaadin classes straight in the JVM which runs your JUnit tests.
- browser-less testing: You look up components straight from [methodname]`UI.getCurrent()`, bypassing the browser and the JavaScript->Server bridge.
You call methods directly on your server-side View classes and on the server-side Java Vaadin components.

[[testbench.uiunit.why-unit-testing]]
== Why Unit Testing?

Advantages of unit testing over end-to-end testing with TestBench:

* Fast: browser-less tests are typically 100x faster than Selenium-based tests and run in 5 to 60 milliseconds, depending on their complexity.
* Reliable: no arbitrary sleeps are needed, as the test is executed on the server side and it can await until the request is fully processed. No random failures because of incompatibility between the Selenium drivers and the browser.
* Headless: the tests run headless, as there is no browser. No need to set up the screen in your CI environment.
* Robust: the test runs in the same JVM as the server-side components. If the server-side bootstrap fails and throws an exception, the test method fails with the same exception. No need to go hunting for exceptions in a log located somewhere on a CI server.
* No need to write a massive set of Page Objects. You are already on the server, and you have access to the actual Java components that are already providing you with high-level APIs, exactly as Page Objects do.
* Full access to the database. You are on the server side, so you can access the database from your tests in the same way your business logic accesses the database. You can run a bunch of SQL statements to restore the database to a known state before every test. Even better, you can run the test in a transaction, then roll back after the test, to perform a fast database revert to a known state.

With this technique you can run 600 UI tests in 7 seconds, as opposed to 1 to 2 hours with a Selenium-based approach.
Because of the speed, you can let the UI tests run after every commit via your continuous integration server.
Bypassing the browser and talking to the Vaadin server API directly eliminates the need to start the servlet container.
You can add the server `JARs` to the testing classpath and call the Vaadin server API, which, in turn, invokes your server logic.

[[testbench.uiunit.limitations]]
== Limitations

UI unit testing is designed to bypass the browser and the servlet container.
This means that it is impossible to test JavaScript code, templates and other client-side functionalities.
If you need to test client-side features, you need to use browser-based integration tests with TestBench.

[[testbench.uiunit.getting-started]]
== Getting Started

To start unit testing your Vaadin application, create a class that extends [classname]`UIUnitTest` (for JUnit 5) or [classname]`UIUnit4Test` (for JUnit 4).
The base class instantiates UI along with all the necessary Vaadin environment, which will be available on your test methods.

[source,java]
----
class MyViewTest extends UIUnitTest {

    @Test
    void extendingBaseClass_runTest_vaadinInstancesAvailable() {
        Assertions.assertNotNull(UI.getCurrent(),
                "Expecting current UI to be available, but was not");
        Assertions.assertNotNull(VaadinService.getCurrent(),
                "Expecting VaadinService to be available up, but was not");
        Assertions.assertNotNull(VaadinRequest.getCurrent(),
                "Expecting VaadinRequest to be available up, but was not");
        Assertions.assertNotNull(VaadinResponse.getCurrent(),
                "Expecting VaadinResponse to be available up, but was not");
        Assertions.assertNotNull(VaadinSession.getCurrent(),
                "Expecting VaadinSession to be available up, but was not");
    }

}
----

By default, the base class scans whole classpath for routes and error views, but this behavior can be changed for a faster bootstrap.
To restrict the scan to a specific package and its sub-packages, override the [methodname]`scanPackage()` method and return the package name.

[source,java]
----
class MyViewTest extends UIUnitTest {

        @Override
        protected String scanPackage() {
                return MyView.class.getPackageName();
        }

}
----

[[testbench.uiunit.search-components]]
== Searching for Components

The [classname]`UIUnitTest` base class is able to get the instantiated view, but child components may not be always accessible directly.
For example components may be stored in fields with private visibility or they may even not be referenced at all in the view class.
To overcome this limitation, [classname]`UIUnitTest` provides a Component query functionality, that lets you search the component tree for the components you need to interact with in test methods.

The [classname]`ComponentQuery` object can be obtained by calling the [methodname]`$()` method, providing the type of the component you are searching for.
You can also restrict search scope to the children of the current view, using the [methodname]`$view()` method.
The query object has many filtering utilities that can be used to refine the search.
For example you can filter by component `id`, by a property value, or using custom predicates on potential candidates.
Once the query is ready with all required conditions configured, you can get test wrappers for specific components found by query execution by calling terminal operators.
Examples of terminal operators are [methodname]`first()`, [methodname]`last()`, [methodname]`atIndex()`, [methodname]`all()` and [methodname]`id()`.

.Using Query API to get component wrappers
[source,java]
----
// Get a wrapper for the first TextField in the UI
TextFieldWrap nameField_ = $(TextField.class).first();

// Get a wrapper for the first TextField in the current view
TextFieldWrap nameField_ = $view(TextField.class).first();

// Get a wrapper for the first TextField with the given label
TextFieldWrap nameField_ = $view(TextField.class)
        .withPropertyValue(TextField::getLabel, "First name")
        .first();

// Get a wrapper for the first TextField that satisfies the conditions
Predicate<TextField> fieldHasNotValue = field -> field.getOptionalValue().isEmpty();
Predicate<TextField> fieldIsInvalid = TextField::isInvalid;
TextFieldWrap<TextField, String> textField = $view(TextField.class)
        .withCondition(fieldHasNotValue.or(fieldIsInvalid))
        .first();

----


Sometimes you may need to do a query for components nested inside the UI, in a hierarchy composed of many different types of components.
To simplify such situations, the query object offers methods to chain a new query starting with a found component, so that complex query can be created in a fluent way.
The [methodname]`thenOn()` method and its variants, for example [methodname]`thenOnFirst()`, provide you with a new query object for the given component type, setting the search scope to the component selected from the current query.

.Chained query example
[source,java]
----

// Search for all 'VerticalLayout's in the view
TextFieldWrap<TextField, String> button = $view(VerticalLayout.class)
        // take the second one and start searching for 'TextField's
        .thenOn(2, TextField.class)
        // filter for disabled 'TextField's
        .withCondition(tf -> !tf.isEnabled())
        // and get the last one
        .last();
----


