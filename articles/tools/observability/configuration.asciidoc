---
title: Configuration
description: Instructions on how to configure Observability Kit and what are the default settings.
order: 20
---

= Configuring Observability Kit

Instrumentation can be configured in the [filename]`agent.properties` file that's used with the Java agent.


== Service Configuration

The `service` attributes are used to differentiate traces from services or applications which might have many instances running simultaneously, such as horizontally scaled services.

The service attributes are as follows:

* `service.name` is an attribute that's used to distinguish a service by name. The default value is `vaadin` -- the only attribute with a default value. It's also the only one required.
* `service.namespace` helps to distinguish a group of services.
* `service.instance.id` helps to distinguish instances of the same service that exist at the same time. This must be unique for each instance of the same `service.namespace`, `service.name` pair.
* `service.version` is the semantic versioning string of the service version.

The `service.name` attribute is configured using the `otel.service.name` property, either in the [filename]`agent.properties` configuration file as a system property, or as an environment variable.

[.example]
--

Add the following line to the [filename]`agent.properties` file:
[source,properties]
----
<source-info group="Configuration file"></source-info>
otel.service.name=myapp
----

Pass the `otel.service.name` system property when starting the Java process.
[source,terminal]
----
<source-info group="System property"></source-info>
java -Dotel.service.name="myapp" ...
----

Define the `OTEL_SERVICE_NAME` environment variable before starting the Java process.
[source,terminal]
----
<source-info group="Environment variable"></source-info>
# Linux / macOS
export OTEL_SERVICE_NAME="myapp"
# Windows
set OTEL_SERVICE_NAME="myapp"
----

--

Other service attributes are configured using the `otel.resource.attributes` property, either in the [filename]`agent.properties` configuration file as a system property, or as en environment variable. Multiple attributes are separated by commas.

[.example]
--

Add the following line to the [filename]`agent.properties` file:
[source,properties]
----
<source-info group="Configuration file"></source-info>
otel.resource.attributes=service.namespace=myservices,service.instance.id=myapp-eu
----

Pass the `otel.resource.attributes` system property when starting the Java process.
[source,terminal]
----
<source-info group="System property"></source-info>
java -Dotel.resource.attributes="service.namespace=myservices,service.instance.id=myapp-eu" ...
----

Define the `OTEL_RESOURCE_ATTRIBUTES` environment variable before starting the Java process.
[source,terminal]
----
<source-info group="Environment variable"></source-info>
# Linux / macOS
export OTEL_RESOURCE_ATTRIBUTES="service.namespace=myservices,service.instance.id=myapp-eu"
# Windows
set OTEL_RESOURCE_ATTRIBUTES="service.namespace=myservices,service.instance.id=myapp-eu"
----

--

For more information about service configuration, see the https://opentelemetry.io/docs/reference/specification/resource/semantic_conventions/#service[OpenTelemetry documentation].


== Default OpenTelemetry Instrumentation

The custom distribution disables default OpenTelemetry instrumentation for Vaadin and servlets.

The default instrumentation is disabled because a single-page Vaadin application logging all requests wasn't helpful, although it generated plenty of data. It was disabled to have control over which requests generate a trace.

The instrumentation modules that are disabled by default are: `jetty`, `servlet`, and `tomcat`. To enable any of these, add the following line to the [filename]`agent.properties` file:

[source,properties]
----
otel.instrumentation.${instrumentationName}.enabled=true
----
