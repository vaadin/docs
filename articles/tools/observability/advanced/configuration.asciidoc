---
title: Configuration
order: 40
description: Instructions on how to add configuration and what the default settings are
---

= Configuration

Instrumentation can be configured in the `agent.properties` file that is used with the Java agent.

== Service Configuration

`service` attributes are used to differentiate traces from different services / applications which might have multiple instances running at the same time (e.g. horizontally scaled services).

Service attributes are as follows:

* `service.name` is an attribute that is used to distinguish a service by name.
+
The default value is `vaadin`.
This is the only attribute with a default value, as it is the only one required.
* `service.namespace` helps to distinguish a group of services
* `service.instance.id` helps to distinguish instances of the same service that exist at the same time
+
Must be unique for each instance of the same `service.namespace`, `service.name` pair
* `service.version` Semantic Versioning string of the service version

The `service.name` attribute is configured using the `otel.service.name` property, either in the `agent.properties` configuration file, as a system property, or as environment variable.

[.example]
--

Add the following line to the `agent.properties` file:
[source,properties]
----
<source-info group="Configuration file"></source-info>
otel.service.name=myapp
----

Pass the `otel.service.name` system property when starting the Java process:
[source,Shell]
----
<source-info group="System property"></source-info>
java -Dotel.service.name="myapp" ...
----

Define the `OTEL_SERVICE_NAME` environment variable before starting the Java process:
[source,Shell]
----
<source-info group="Environment variable"></source-info>
# Linux / macOS
export OTEL_SERVICE_NAME="myapp"
# Windows
set OTEL_SERVICE_NAME="myapp"
----

--

Other service attributes are configured using the `otel.resource.attributes` property, either in the `agent.properties` configuration file, as a system property, or as environment variable.
Multiple attributes are separated by comma.

[.example]
--

Add the following line to the `agent.properties` file:
[source,properties]
----
<source-info group="Configuration file"></source-info>
otel.resource.attributes=service.namespace=myservices,service.instance.id=myapp-eu
----

Pass the `otel.resource.attributes` system property when starting the Java process:
[source,Shell]
----
<source-info group="System property"></source-info>
java -Dotel.resource.attributes="service.namespace=myservices,service.instance.id=myapp-eu" ...
----

Define the `OTEL_RESOURCE_ATTRIBUTES` environment variable before starting the Java process:
[source,Shell]
----
<source-info group="Environment variable"></source-info>
# Linux / macOS
export OTEL_RESOURCE_ATTRIBUTES="service.namespace=myservices,service.instance.id=myapp-eu"
# Windows
set OTEL_RESOURCE_ATTRIBUTES="service.namespace=myservices,service.instance.id=myapp-eu"
----

--

For more information about service configuration see the https://opentelemetry.io/docs/reference/specification/resource/semantic_conventions/#service[OpenTelemetry documentation].

== Default OpenTelemetry Instrumentation

The custom distribution disables default OpenTelemetry instrumentation for vaadin and servlets.

The default instrumentation is disabled because a single-page Vaadin application logging all requests was not helpful and generated a lot of data, they were disabled to have control over which requests generate a trace.

The by default disabled instrumentation modules are:

* jetty
* servlet
* tomcat

To enable any of these, add this line to the `agent.properties` file:
[source,properties]
----
`otel.instrumentation.${instrumentationName}.enabled=true`
----

