---
title: Observability Kit Agent
order: 1
---

= Observability Kit Agent

The Observability Kit Agent is a custom Java agent based on the OpenTelemetry standard, with preconfigured instrumentation for Vaadin Flow applications.

[NOTE]
A Java agent is a special set of classes which, by using the https://docs.oracle.com/javase/1.5.0/docs/api/java/lang/instrument/package-summary.html[Java Instrumentation API], can intercept applications running on the JVM and inject code to provide additional functionality.

https://opentelemetry.io/[OpenTelemetry] is an emerging standard for generating, collecting and exporting telemetry data, such as traces, metrics and logs.
As an industry-wide standard it is https://opentelemetry.io/vendors/[supported by a number of tools and vendors]. We have tested and support xref:../integrations/index.asciidoc#[integrations] with a specific selection of vendors, but the agent should work with any vendor that supports the OpenTelemetry standard.

[NOTE]
OpenTelemetry is still a relatively new standard, which means support from specific vendors may still be limited or incomplete.

Observability Kit builds on the automatic instrumentation provided by OpenTelemetry by implementing instrumentation on Vaadin-specific classes.
This provides a lot of framework-specific details that can be used to identify issues, track performance or observe user behavior.

== Traces

The agent creates traces for all Flow-specific requests against the application and spans for framework-specific operations.
It also adds span attributes that can be used to filter traces / spans, or to inspect additional details about an operation.

The following sections list the most relevant traces / spans created by the agent, as well as their attributes.

=== UI Requests

Creates a trace for every request that is related to a UI, using the current view's route template as name.

Example: `/products/:productId`

=== Static File Requests
Creates a trace for all static files that are served, using the file path as name.

Example: `/static/image.png`

=== Dynamic Stream Requests
Creates a trace for all dynamic content streamed from a `StreamResource`, using the resources' name.

Example: `/dynamic/[ui]/[secret]/export.csv`

=== Navigation
Creates a nested span whenever a navigation is triggered, either from the client or the server.
The span name contains the view's route template.

Example: `Navigation: /products/:productId`

.Navigation span attributes
[cols="1,1"]
|===
|Attribute |Description

|`vaadin.navigation.isForwardTo`
|Whether the navigation was a result of a forwarding request.

|`vaadin.navigation.route`
|The route that was navigated to.

|`vaadin.navigation.trigger`
|Whether the navigation was triggered from the client or server.

|===

=== Browser Events
Creates a span whenever a browser event is handled by a UI, for example click events.
The span name contains a descriptive label of element that was the source of the event, as well as the event name.

Example: `Event: vaadin-button[Save] {two-colons} click`

.Browser event span attributes
[cols="1,1"]
|===
|Attribute |Description

|`vaadin.element.tag`
|The tag name of the element that was the source of the event.

|`vaadin.event.type`
|The type of the event.

|`vaadin.view`
|The simple Java class name of the UI's currently active view, for example `ProductView`.

|===

=== Element Synchronization
Creates a span whenever an element property has changed and is synchronized to the server.
The span name contains a descriptive label for the element, as well as the property name.

Example: `Sync: vaadin-text-field[label='Customer Name'].value`

.Element synchronization span attributes
[cols="1,1"]
|===
|Attribute |Description

|`vaadin.element.property`
|The property that was synchronized.

|`vaadin.element.tag`
|The tag name of the element that was the source of the event.

|`vaadin.view`
|The simple Java class name of the UI's currently active view, for example `ProductView`.

|===

=== Server Calls
Creates a span whenever the client calls a server method that is annotated with `ClientCallable`.

Example: `Invoke server method: Grid.select`

.Server call span attributes
[cols="1,1"]
|===
|Attribute |Description

|`vaadin.callable.method`
|The signature of the method that was called.

|`vaadin.component`
|The qualified class name of the component on which the method was called.

|===

=== Data Provider Fetches
Creates a span whenever a component fetches data from a data provider.

Example: `Data Provider Fetch`

.Data provider span attributes
[cols="1,1"]
|===
|Attribute |Description

|`vaadin.dataprovider.limit`
|The requested amount of items to load.

|`vaadin.dataprovider.offset`
|The offset from where to start loading items.

|`vaadin.dataprovider.type`
|The qualified class name of the data provider class.

|===

=== Common Attributes

In addition to the span-specific attributes mentioned above, the following set of attributes are set on a number of spans:

[cols="1,2"]
|===
|Attribute |Description

|`http.host`
|Set on all traces / root spans, and contains the host name that triggered the request.
Can be used to filter traces by host name.

|`http.route`
|Set on all traces / root spans, and contains either a view's route template, excluding any actual parameter values, or a file path for file / stream requests.
Can be used to filter traces for specific views.

|`http.target`
|Set on all traces / root spans, and contains either a view's actual route, including parameter values, or a file path for file / stream requests.
Can be used to check which parameters were provided to a view through its route.

|`vaadin.flow.version`
|Set on all traces / root spans, and contains the Flow version used by the application.

|`vaadin.request.type`
|Set on all traces / root spans, and contains the type of Flow request made against the application.
Can be used to filter traces for a specific request type.

|`vaadin.session.id`
|Set on all spans, and contains the Vaadin session ID for the request.
Can be used to filter traces for a specific session.

|===

== Metrics

== Support for Other Libraries and Frameworks

As the Observability Kit Agent is based on the OpenTelemetry Java agent, it also includes a number of non Vaadin-specific instrumentations that can be helpful in monitoring an application, for example database requests using the JPA API, or outgoing HTTP requests.
https://github.com/open-telemetry/opentelemetry-java-instrumentation/blob/main/docs/supported-libraries.md[See here] for a full list of supported libraries and frameworks.
