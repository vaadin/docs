---
title: Custom Instrumentation
order: 2
---

= Custom Instrumentation

As the automatic instrumentation doesn't know possible problematic parts in the application and might
not generate informative spans, there is the possibility to add tracing and spans to the application code.

=== Manual Instrumentation

Manual instrumentation can be added to the application code so that specific code executions generate a span to the trace.
This is done by manually starting and ending a span inside the application code.

Start by adding the OpenTelemetry API dependency to the project.

.pom.xml
[source, xml]
----
<dependency>
    <groupId>io.opentelemetry</groupId>
    <artifactId>opentelemetry-api</artifactId>
    <version>1.17.0</version>
</dependency>
----

[NOTE]
It would be good to match the version with the used JavaAgent version of OpenTelemetry

Now you can in the application code generate a span using the OpenTelemetry global instance as:

[source, java]
----
public class ImageListView {
    void fetchImages() {
        Tracer trace = GlobalOpenTelemetry.getTracer("app-instrumentation",
        "1.0");
        final Span span = trace.spanBuilder("My Problematic Task").startSpan();
        try {
            // Do possibly problematic task
        } finally {
            span.end();
        }
    }
}
----

The started span will automatically be nested into the currently active span on the thread.

https://opentelemetry.io/docs/concepts/signals/traces/#attributes[Attributes] can be added to the span for more details on the state of the application.
Attirbutes can be added simply with `span.setAttribute(key, value)` where key is a `String` and value can be a non-null string, boolean, floating point value, integer, or an array of these values.


[source, java]
----
public class ImageListView {
    void fetchImages(String fetchUrl) {
        Tracer trace = GlobalOpenTelemetry.getTracer("app-instrumentation",
        "1.0");
        final Span span = trace.spanBuilder("My Problematic Task").startSpan();
        try {
            // Do possibly problematic task
            span.setAttribute("fetch.url", fetchUrl);
        } finally {
            span.end();
        }
    }
}
----

https://opentelemetry.io/docs/concepts/signals/traces/#span-events[Events] can be also recorded on spans to get a timestamp when something happened during exceution.

[source, java]
----
public class ImageListView {
    void fetchImages(String fetchUrl) {
        Tracer trace = GlobalOpenTelemetry.getTracer("app-instrumentation",
        "1.0");
        final Span span = trace.spanBuilder("My Problematic Task").startSpan();
        try {
            // Do possibly problematic task
            span.addEvent("Image fetch start");
            // load from external
            span.addEvent("Images loaded");
        } finally {
            span.end();
        }
    }
}
----

Events may also contain attributes that are associated with the event and not the span as with `span::setAttribute`.

When the code executed in a span throws and the exception is handled it would be good to add the exception to the span for later insights.

[source,java]
----
public class ImageListView {
    void fetchImages(String fetchUrl) {
        Tracer trace = GlobalOpenTelemetry.getTracer("app-instrumentation",
        "1.0");
        final Span span = trace.spanBuilder("My Problematic Task").startSpan();
        try {
            // Do possibly problematic task
            span.addEvent("Image fetch start");
            // load from external
            span.addEvent("Images loaded");
        } catch(Exception exception) {
            // Handle exception
            // Mark the span as having an error
            span.setStatus(StatusCode.ERROR, exception.getMessage());
            // Add exception trace to the span
            span.recordException(throwable);
        } finally {
            span.end();
        }
    }
}
----

For more details see https://opentelemetry.io/docs/instrumentation/java/manual/[manual instrumentation].

=== Annotation Instrumentation

Instrumenting using annotations is basically the same as <<Manual Instrumentation,manual instrumentation>>, but needs less custom code to generate spans.


Start by adding the OpenTelemetry instrumentation annotations dependency to the project.

.pom.xml
[source, xml]
----
<dependency>
    <groupId>io.opentelemetry</groupId>
    <artifactId>opentelemetry-instrumentation-annotations</artifactId>
    <version>1.17.0</version>
</dependency>
----

Now one can generate custom spans for methods by adding the `@WithSpan` annotation on a method:

[source,java]
----
import io.opentelemetry.instrumentation.annotations.WithSpan;

public class ImageListView {
  @WithSpan
  public void fetchImages() {
      // execution code
  }
}
----

To automatically add method parameters as attributes to the span there is the `@SpanAttibute`:

[source,java]
----
import io.opentelemetry.instrumentation.annotations.SpanAttribute;
import io.opentelemetry.instrumentation.annotations.WithSpan;

public class ImageListView {
  @WithSpan
  public void fetchImages(@SpanAttribute("fetch.url") String fetchUrl) {
      // execution code
  }
}
----

For more details see https://opentelemetry.io/docs/instrumentation/java/automatic/annotations/[Annotations]
