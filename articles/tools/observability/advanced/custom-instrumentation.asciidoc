---
title: Custom Instrumentation
order: 2
---

= Custom Instrumentation

The default instrumentations of the Vaadin Observability agent provide a reasonable amount of information out of the box, but can not cover all the specifics of an application.
Writing custom instrumentations allows to collect application-specific telemetry data for possibly problematic places or performance hotspots of an application.

== Customizing Traces

Custom instrumentations allow to record the execution of a specific piece of code as a span which gets automatically added to the current trace, and provide additional details such as attributes and errors.

Start by adding the OpenTelemetry API dependency to the project:

.pom.xml
[source, xml]
----
<dependency>
    <groupId>io.opentelemetry</groupId>
    <artifactId>opentelemetry-api</artifactId>
    <version>1.17.0</version>
</dependency>
----

[NOTE]
The OpenTelemetry API version should match the version that is used by the Vaadin Observability agent.
<Do this to get the version used by the agent>

Custom spans can be added either by using annotations, or by using the OpenTelemetry API to create and end spans manually.
The following sections provide instructions for each of these methods.

=== Using Annotations

The easiest way to add custom spans is to annotate methods whose executions should be recorded with the `@WithSpan` annotation:

[source,java]
----
import io.opentelemetry.instrumentation.annotations.WithSpan;

public class ImageListView {
  @WithSpan
  public void fetchImages() {
      // execution code
  }
}
----

Method parameters can be added as attribute to the span by using the `@SpanAttibute` annotation:

[source,java]
----
import io.opentelemetry.instrumentation.annotations.SpanAttribute;
import io.opentelemetry.instrumentation.annotations.WithSpan;

public class ImageListView {
  @WithSpan
  public void fetchImages(@SpanAttribute("fetch.url") String fetchUrl) {
      // execution code
  }
}
----

For more details see the https://opentelemetry.io/docs/instrumentation/java/automatic/annotations/[OpenTelemetry Annotations docs].

=== Creating Spans Manually

Spans can be created manually using the OpenTelemetry API, which gives more fine-grained control over when spans are started, ended, and what data they should contain.

To create a span manually, acquire a tracer instance from the OpenTelemetry API, and then start and end a span around the code that should be traced:

[source, java]
----
public class ImageListView {
    void fetchImages() {
        Tracer trace = GlobalOpenTelemetry.getTracer("app-instrumentation",
        "1.0");
        final Span span = trace.spanBuilder("My Problematic Task").startSpan();
        try {
            // Do possibly problematic task
        } finally {
            span.end();
        }
    }
}
----

The started span will automatically be added to the currently active trace on the thread.

https://opentelemetry.io/docs/concepts/signals/traces/#attributes[Attributes] can be added to the span for more details on the state of the application.
Attributes can be non-null string, boolean, floating point and integer values, or an array of these.

[source, java]
----
public class ImageListView {
    void fetchImages(String fetchUrl) {
        Tracer trace = GlobalOpenTelemetry.getTracer("app-instrumentation",
        "1.0");
        final Span span = trace.spanBuilder("My Problematic Task").startSpan();
        try {
            // Do possibly problematic task

            // Set attribute on span
            span.setAttribute("fetch.url", fetchUrl);
        } finally {
            span.end();
        }
    }
}
----

https://opentelemetry.io/docs/concepts/signals/traces/#span-events[Events] can be also recorded on spans to get a timestamp when something happened during the execution.
Like spans, events may also contain attributes that are associated with the event.

[source, java]
----
public class ImageListView {
    void fetchImages(String fetchUrl) {
        Tracer trace = GlobalOpenTelemetry.getTracer("app-instrumentation",
        "1.0");
        final Span span = trace.spanBuilder("My Problematic Task").startSpan();
        try {
            // Record start of the operation as span
            span.addEvent("Image fetch start");

            // load images...

            // Add event with attributes
            Attributes attributes = Attributes.builder().put("images.count", 42).build();
            span.addEvent("Images loaded", attributes);
        } finally {
            span.end();
        }
    }
}
----

Spans should be marked as error if the executed code fails, and exceptions can be recorded as span event, which provides detailed information such as exception type and stracktrace when looking at the traces.

[source,java]
----
public class ImageListView {
    void fetchImages(String fetchUrl) {
        Tracer trace = GlobalOpenTelemetry.getTracer("app-instrumentation",
        "1.0");
        final Span span = trace.spanBuilder("My Problematic Task").startSpan();
        try {
            // Do possibly problematic task
            span.addEvent("Image fetch start");
            // load from external
            span.addEvent("Images loaded");
        } catch(Exception exception) {
            // Handle exception
            // Mark the span as having an error
            span.setStatus(StatusCode.ERROR, exception.getMessage());
            // Add exception trace to the span
            span.recordException(throwable);
        } finally {
            span.end();
        }
    }
}
----

For more details about manual instrumentation, please see the  https://opentelemetry.io/docs/instrumentation/java/manual/[OpenTelemetry manual instrumentation docs].
