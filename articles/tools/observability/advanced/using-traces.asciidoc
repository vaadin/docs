---
title: Using Traces
order: 50
description: A trace is a set of one or more spans that are recorded from events and method calls in an application. Here we describe some features of the traces produced by Observability Kit that can be used to diagnose application problems.
---

= Using Traces

Each span represents a unit of work or an operation of an application.
Observability Kit creates spans for Vaadin-specific operations and attaches some useful attributes and any errors that arise.

Read the documentation for your preferred observability platform to learn how to use traces and spans.

== Errors

An error is recorded against the root span and any nested spans that have handled an exception.
In the case of an exception being thrown, the corresponding stack trace can be found in the span details.

An exception may be handled and wrapped or rethrown, which may result in several nested span levels reporting an error.
In this case, the original exception stack trace can be found in the details of the lowest span in the tree with an error marked against it.

== Attributes

Each span has a number of attributes associated with it.
Along with the attributes that OpenTelemetry provides (see https://opentelemetry.io/docs/reference/specification/trace/semantic_conventions/span-general/[the documentation^]), the Observability Kit provides Vaadin-specific attributes that may help with the diagnosis of application problems.

=== Global Attributes

All Vaadin-specific spans contain the `vaadin.session.id` attribute. This uniquely identifies the Vaadin session involved.

=== Request Attributes

These attributes can be found on request spans.

|===
|Attribute |Description

|http.request.file
|For static file requests, this contains the requested file.

|vaadin.flow.version
|The version of Vaadin Flow that is being used (e.g., 23.1.6).

|vaadin.request.type
|The type of request (e.g., `heartbeat`, `push` or `uidl`).

|vaadin.resolution
|For a successful static file request, this will contain "Up to date".
|===

=== Navigation Attributes

These attributes can be found on navigation spans. For example, "Navigate: /index".
They provide some context for the cause of the navigation.

|===
|Attribute |Description

|vaadin.navigation.isForwardTo
|Whether the navigation event is the result of a `BeforeEvent.forwardTo` call.

|vaadin.navigation.route
|The requested navigation case (e.g., "/index").

|vaadin.navigation.trigger
|The type of user interaction that triggered the navigation event (e.g., `CLIENT_SIDE`).
|===

=== View Attributes

These are attributes of spans related to a Vaadin view.

|===
|Attribute |Description

|vaadin.component
|When a component is being rendered, this shows the component class name.

|vaadin.element.property
|When an element's properties are synced from the client, this shows the property that is affected.

|vaadin.element.tag
|The corresponding HTML tag for the element related to the span.

|vaadin.element.target
|When an element is being attached, this shows the target element to which it is being attached.

|vaadin.event.type
|The type of event that has been fired by a Vaadin component.
This is discussed further in <<#event-types,Event Types>>.

|vaadin.state.change
|For an `opened-changed` event, this shows whether the element is being opended or closed.

|vaadin.view
|This contains the related view class name.

|vaadin.webcomponent.url
|This contains the service URL for a web component.

|===

=== Other Attributes

|===
|Attribute |Description

|vaadin.callable.method
|When a server event is handled, this shows the method that was called.

|vaadin.dataprovider.limit
|When data is being fetched, this contains the result limit (i.e., the number of rows to be returned).

|vaadin.dataprovider.offset
|When data is being fetched, this contains the result offset (i.e., the number of rows to skip).

|vaadin.dataprovider.type
|When data is being fetched, this contains the data provider class name.
|===

== Event Types

Components in Vaadin fire events when certain properties are changed or actions are performed.
These are captured by the Observability Kit instrumentation. The `vaadin.event.type` attribute can be found on the corresponding span.
The attribute contains the type of event that was fired.
Here are some of the more important events:

|===
|Event |Description |Note

|change
|Fired when the user commits a change.
|

|input
|Fired when a field value is changed by the user.
|

|value-changed
|Fired when the `value` property of a component is changed.
Most form components will fire this event.
|The event does not contain the new value.

|invalid-changed
|Fired when the `invalid` property of a component is changed.
Most form components will fire this event.
|The event does not contain the new value.

|opened-changed
|Fired when the `opened` property of a component is changed.
For example, a select field, accordion, or dialog.
|Check the `vaadin.state.change` attribute to see whether the component is opening or closing.

|checked-changed
|Fired when the `checked` property of a component is changed.
Checkbox and radio components fire this event.
|The event does not contain the new value.

|selected-items-changed
|Fired when the `selectedItems` property of a component is changed.
Grid, grid pro and multi select combo box components fire this event.
|The event does not contain the new value.

|===
