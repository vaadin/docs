---
title: Overview
layout: page
order: 1
---

[[observability.overview]]
= Vaadin Observability

:commercial-feature: Vaadin Observability
include::{articles}/_commercial-banner.asciidoc[opts=optional]

Vaadin Observability is an add-on for Vaadin Flow that provides insights into Flow applications at runtime / in production, enabling you to monitor application health, detect unhandled errors and performance issues, and observe user behavior. It also provides integrations with industry-leading Application Performance Monitoring (APM) and Observability tools.

The core of this add-on is the Vaadin Observability agent, which is a Java agent that is run together with a Vaadin Flow application to automatically collect telemetry data.
This includes:

[cols="1,5"]
|===
|Signal |Description

|Traces
|A *trace* represents an operation that happened within the application.
Traces consist of *spans*, which are nested operations that happened during the trace, such as method, database or API calls.
Spans can contain *attributes* which provide additional information for an operation, as well as *events* indicating something happening at a specific point in time.
The agent collects traces for all requests made against the application, and generates spans for framework internal calls, as well as external calls to databases and remote services.
Additionally, custom instrumentation can be added to the application code to provide specific details about what happens in the application.

|Metrics
|A *metric* is a measurement about a service, captured at runtime.
The agent captures a range of JVM metrics, such as memory usage and CPU utilization, as well as Vaadin specific ones such as number of open sessions, or session duration.

|Logs
|The agent instruments popular logging frameworks, such as log4j or logback, to collect logs, and correlates them with traces.
|===

Check out the next chapter to get started with using the add-on: <<tutorial/getting-started#,Getting Started>>.

[.discussion-id]
E6B09FCB-F17E-46EE-98E4-60EACE03A856
