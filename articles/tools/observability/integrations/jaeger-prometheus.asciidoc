---
title: Jaeger and Prometheus
order: 4
layout: page
---

== Jaeger and Prometheus Integration

https://www.jaegertracing.io/[Jaeger] is a tool for collecting traces.
https://prometheus.io/[Prometheus] is a tool for collecting metrics.
Here we detail instructions on how to set up local Jaeger and Prometheus servers that collect telemetry from an application.

[IMPORTANT]
The setup is intended for local testing only, it is not production ready.

== Download and Run Jaeger

// tag::jaeger-setup[]

Download the latest version of Jaeger for your platform https://www.jaegertracing.io/download/[here] (tar.gz file).
Extract the contents of the downloaded archive.
Open a terminal to the Jaeger directory and start Jaeger:
[source,shell]
----
./jaeger-all-in-one
----

// end::jaeger-setup[]

== Download and Run Prometheus

// tag::prometheus-setup[]

Download the latest version of Prometheus from your platform https://prometheus.io/download/[here] (tar.gz or zip file).
Extract the contents of the downloaded archive.

Create a Prometheus configuration with a scraper that reads metrics data from the OpenTelemetry exporter:

.`prometheus.yml`
[source,yaml]
----
global:
  scrape_interval: 15s # Default is every 1 minute.

scrape_configs:
  - job_name: 'opentelemetry'
    # metrics_path defaults to '/metrics'
    # scheme defaults to 'http'.
    static_configs:
      - targets: ['localhost:9464']
    # Host and port need to match the
    # OpenTelemetry prometheus exporter configuration
----

Open a terminal to the Prometheus directory and start Prometheus with the configuration file:

[source,shell]
----
./prometheus --config.file=/PATH/TO/prometheus.yml
----

[NOTE]
Remember to substitute the correct path to the `prometheus.yml` file.

// end::prometheus-setup[]

== Create Agent Properties File

Create a new properties file named `agent.properties` and add the following lines to it:

// tag::agent-properties[]

.`*agent.properties*`
[source,properties]
----
otel.traces.exporter=jaeger
otel.exporter.jaeger.endpoint=http://localhost:14250
otel.metrics.exporter=prometheus
otel.exporter.prometheus.host=0.0.0.0
otel.exporter.prometheus.port=9464
----

// end::agent-properties[]

== Running the App

include::./_run-app.asciidoc[opts=optional]

== Viewing Data

// tag::viewing-traces[]

=== Viewing Traces

To view traces, open the http://localhost:16686/search[Jaeger search view].
From the menu on the left side, select the name of your service, which is `vaadin` by default.
Then click on `Find Traces` to search for traces.

The graph at the top shows the duration of individual traces from the search result.
The list below displays all the traces that have been found.

Clicking on a trace brings up a view that shows detailed information about a trace, such as nested spans, and their attributes and events.

// end::viewing-traces[]

// tag::viewing-metrics[]

=== Viewing Metrics

To view metrics, open the http://localhost:9090/graph[Prometheus Graph view].
In the search bar, click on the metrics explorer icon (world icon), which opens a dialog with all available metrics.
Select a metric, for example `process_runtime_jvm_memory_usage` to view JVM memory usage.
Then click on `Execute` to query the metric data, and switch to the `Graph` tab below the search bar to view the chart for the metric.

// end::viewing-metrics[]
