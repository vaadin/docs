---
title: Jaeger and Prometheus
order: 40
description: Instructions for using Jaeger and Prometheus
---

== Jaeger and Prometheus Integration

https://www.jaegertracing.io/[Jaeger] is a tool for collecting traces.
https://prometheus.io/[Prometheus] is a tool for collecting metrics.
Here we detail instructions on how to set up local Jaeger and Prometheus servers that collect telemetry from an application.

[IMPORTANT]
The setup is intended for local testing only, it is not production ready.

== Download and Run Jaeger

// tag::jaeger-setup[]

Download the latest version of Jaeger for your platform https://www.jaegertracing.io/download/[here] (tar.gz file).
Extract the contents of the downloaded archive.
Open a terminal to the Jaeger directory and start Jaeger:
[source,shell]
----
./jaeger-all-in-one
----

// end::jaeger-setup[]

== Download and Run Prometheus

// tag::prometheus-setup[]

Download the latest version of Prometheus from your platform https://prometheus.io/download/[here] (tar.gz or zip file).
Extract the contents of the downloaded archive.

Create a Prometheus configuration with a scraper that reads metrics data from the OpenTelemetry exporter:

.`config.yml`
[source,yaml]
----
global:
  scrape_interval: 15s # Default is every 1 minute.

scrape_configs:
  - job_name: 'opentelemetry'
    # metrics_path defaults to '/metrics'
    # scheme defaults to 'http'.
    static_configs:
      - targets: ['localhost:9464']
    # Host and port need to match the
    # OpenTelemetry prometheus exporter configuration
----

Open a terminal to the Prometheus directory and start Prometheus with the configuration file:

[source,shell]
----
./prometheus --config.file=/PATH/TO/config.yml
----

[NOTE]
Remember to substitute the correct path to the `config.yml` file.

// end::prometheus-setup[]

== Create Agent Properties File

Create a new properties file named `agent.properties` and add the following lines to it:

// tag::agent-properties[]

.`*agent.properties*`
[source,properties]
----
otel.traces.exporter=jaeger
otel.exporter.jaeger.endpoint=http://localhost:14250
otel.metrics.exporter=prometheus
otel.exporter.prometheus.host=0.0.0.0
otel.exporter.prometheus.port=9464
----

// end::agent-properties[]

== Running the App

include::./_run-app.asciidoc[opts=optional]

// tag::view-traces-metrics[]

== Viewing Traces in Jaeger

The default address for the Jaeger user interface is http://localhost:16686.
From here you can select your service name (`vaadin` by default) from the "Service" field and click the `Find Traces` button.

[NOTE]
The default time period to search is within the previous hour.
To search further back, select a time period from the "Lookback" field.

[NOTE]
The default number of results is 20. To see more results, increase the value in the "Limit Results" field.

On the right, there will now be graph of timeline vs duration.
From here you can easily see events that are causing delays (larger circles), or errors (red circles).
Clicking one of the circles will open up the <<#trace-detail,trace detail page>>.

There is also a list of the root spans. Each span shows the duration relative to the other root spans, how many nested spans it contains, and how many errors.
Once again, clicking on the item will open up the <<#trace-detail,trace detail page>>.

=== Trace Detail

In the trace detail page, you will be presented with a tree list showing the root span and all nested spans.
If any of the spans have an error against them, it will be marked by a red exclamation (!) icon.

For each of the spans, you can view more details by clicking on the row.
In the span details, you can expand `Tags` to view attributes for the span.
Vaadin-specific attributes are detailed in <<{articles}/tools/observability/advanced/using-traces.asciidoc#,Using Traces>>.
If there has been an error, any related stack traces will be found under `Logs`.

== Viewing Metrics in Prometheus

The default address for the Prometheus user interfaces is http://localhost:9090/.
Enter a metric name into the search field and click `Execute`.

[NOTE]
If you do not know the metric name, you can use the metrics explorer (earth icon next to `Execute`).
This provides an alphabetical list of available metrics.

To view the results as a graph, click the `Graph` tab.

// end::view-traces-metrics[]
