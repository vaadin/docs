---
title: Getting Started
order: 20
---

= Getting Started with Theme Editor

Before using Theme Editor, make sure that your project is set properly.

Theme Editor is part of Vaadin Development Tools and is available behind feature flag. You can read more about <<{articles}/configuration/development-mode#,Development Mode>> and <<{articles}/configuration/feature-flags#,Feature Flags>>.

Theme Editor requires an application theme to be present. See <<{articles}/styling/application-theme#, Application Theme>>. Theme Editor is compatible only with Lumo-based themes. See <<{articles}/styling/lumo#,Lumo theme>> to learn more.


== Selecting Components

To begin using Theme Editor, select the component you want to style.

image::images/pick-component-2.png[Pick an element to get started]

Component picker allows you to navigate through different layers of a layout to be able to select the exact component.


=== Vaadin Components

Selected Vaadin component has a list of available elements and properties that can be styled.


=== Common HTML Components

In addition to Vaadin components, Theme Editor allows you to select common HTML components like `<h1>`, `<p>` or `<div>`. You can style text, border and color related properties.


== User Interface

image::images/theme-editor-ui.png[Theme Editor User Interface]

1. Component picker button with the name of the currently selected component -- and friendly display name.
2. Local / Global mode switch.
3. Undo and Redo.
4. CSS class name to be used for styling component instance in Local mode.
5. Component properties section name.
6. Jump to CSS rule definition button.
7. Component properties list with editable values, modified values marked with orange indicator.


== Local & Global Modes

Theme Editor allows you to choose the scope of changes: Local for the selected component only; or Global for all components of a given type.

image::images/local-global.png[Local And Global Mode Switch]


=== Local

In Local mode, Theme Editor uses a unique class name to distinguish selected component. Theme Editor suggests a new name if none is given.

image::images/local-classname.png[Setting local CSS class name]

When applying the class name in the Java code, Theme Editor adds an `addClassName` call with a `<theme-editor-local-classname>` comment above it:

[source,java]
----
//<theme-editor-local-classname>
textField.addClassName("my-text-field");
----

Don't remove the comment. Otherwise, Theme Editor loses track of the class name it has applied.


=== Global

In Global mode, Theme Editor writes CSS rules that are applicable to all components of a given type. Note, local rules have priority over global rules.


== Styling Component Elements

After selecting a component, Theme Editor displays a list of editable elements with properties that can be modified. In the screenshot here, there's the Label element with its properties, which is part of the Text Field.

image::images/single-element.png[Component Element,75%]


=== Color Picker

You can use the built-in color picker to customize the color, or to choose one of the predefined colors related to a given property.

image::images/color-picker.png[Color Picker, 50%]

1. Color selection.
2. Opacity.
3. Suggested colors.


=== Slider

image::images/slider-1.png[Slider]

Theme Editor uses a slider to allow you to modify common property values, like font size or spacing.

image::images/slider-2.png[Slider with custom value]

You can also set custom values. When you set a custom value, the indicator on the slide turns dark and moves to the beginning.


== Code Generation

Theme Editor saves CSS rules in the `theme-editor.css` file within the current theme directory.

[NOTE]
Manual modifications of `theme-editor.css` are processed by Theme Editor and formatted accordingly.

== Limitations

The preview comes with some limitations of which you should be aware:

- Only applications using the Lumo theme are supported.
- Changing the global Lumo theme variables is not supported.
- Styling component states -- like hover, required and invalid -- is not supported.
- Adding or styling theme variants, such as primary buttons, is not supported.
- Not all Vaadin components are supported currently.
- Manual modification of Java classes without build and deploy (i.e., hot deployment) results in Theme Editor not be able to select components.

Please use the https://github.com/vaadin/flow[GitHub Flow repository] for reporting bugs, asking questions, or suggesting enhancement ideas.