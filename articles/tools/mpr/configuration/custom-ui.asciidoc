---
title: Using a custom legacy UI class
order: 5
layout: page
---

= Using a custom legacy UI class

[NOTE]
This is intended for advanced cases only, where using the recommended upgrade path
is not enough to cover specific logic that cannot be easily ported to Flow.

If you have a need for a specific UI class to be used for the legacy Vaadin UI you
can have the UI class extend MprUI. Note that the UI *can not* be used for layouting purposes.

[source,java]
----
public class MyCustomUI extends MprUI {
    @Override
    protected void init(VaadinRequest request) {
        super.init(request);
    }
}
----

[NOTE]
You need to call `super.init(request)` if you need to override the init method

Then you need to tell the application that this class should be used with the
annotation `@LegacyUI()` by defining it in a class implementing `AppShellConfigurator`.

[source,java]
----
@LegacyUI(MyCustomUI.class)
public class Configuration implements AppShellConfigurator {
}
----

Now using the application you will get a MyCustomUI instead of the
default MprUI.

<<../overview#,<- Go back to the overview>>


[.discussion-id]
B25DFC7E-C56E-450E-9178-05C7ACA90032

