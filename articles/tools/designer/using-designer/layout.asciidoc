---
title: Laying Out Views
order: 13
layout: page
---

[[designer.layout]]
= Laying Out Views

Layout is defined as the particular way components are arranged in your view.

To arrange the components in Vaadin Designer, you can use the layout components provided by Vaadin. You can combine and nest special purpose layouts and the more general-purpose Vertical and Horizontal layouts.

Additionally, you can define the sizes of the components as well as the empty space between them.

[[designer.layout.components]]
== Layout Components

Vaadin supports many pre-built https://vaadin.com/components[layout components]
for you to quickly start constructing a view.

[cols="1,4", options="header"]
|===
|Layout component
|Description

|https://vaadin.com/components/vaadin-app-layout[App Layout, window=_blank]
|Provides a quick and easy way to get a common application layout structure done.
Allows setting the logo, menu and page content.

|https://vaadin.com/components/vaadin-form-layout[Form Layout, window=_blank]
|Provides a configurable responsive layout for form elements,
making sure your form content stays easily readable on all devices.

|https://vaadin.com/components/vaadin-split-layout[Split Layout, window=_blank]
|Allows you to partition a layout into resizable areas.

|https://vaadin.com/components/vaadin-ordered-layout[Ordered Layout, window=_blank]  (Vertical layout, Horizontal layout)
|Provides Horizontal and Vertical layouts to horizontally or vertically
align your HTML elements.

The most flexible way to create a layout is by nesting these two layouts.
|===


[[designer.creating.vh.layouts]]
== Vertical and Horizontal Layouts
These are the most essential layouts,
which can be nested under each other, or different layouts to construct more complex ones.
For these layouts, Designer supports Flexbox editor to position their child elements.

video::GoTU48zm9FE[youtube, width=800, height=450]

NOTE: Flexbox editor uses CSS flexbox layout. To learn about Flexbox,
check out this https://css-tricks.com/snippets/css/a-guide-to-flexbox/[flexbox guide].

[[designer.creating.complex.layout.flex.container]]
=== Flex Container
Vertical and Horizontal layouts are flex containers.
You can also use native HTML elements (e.g. `div` element) as flexbox containers
by setting their `display` CSS property to `flex` or `inline-flex`.

When selecting a flex container in Designer, the Flex Container panel appears near the bottom-right corner.
[[figure.designer.flex.container]]
.Flex Container
image::images/designer-3-layout-flex-container.png[]

==== Direction
Represents https://www.w3schools.com/cssref/css3_pr_flex-direction.asp[`flex-direction`] CSS property,
defining the main-axis for child items. X-axis or Y-axis enables
`row` (horizontal) or `column` (vertical) direction, respectively.
To reverse the current direction, enable `Reverse` checkbox.

==== Align
Represents https://www.w3schools.com/cssref/css3_pr_align-items.asp[`align-items`] CSS property,
defining how child items are laid out along the cross axis which runs perpendicular to the current main-axis.

==== Justify
Represents https://www.w3schools.com/cssref/css3_pr_justify-content.asp[`justify-content`] CSS property,
defining how child items are aligned along the main-axis and how free spaces between them are distributed.

==== Wrap
Represents https://www.w3schools.com/cssref/css3_pr_flex-wrap.asp[`flex-wrap`] CSS property,
allowing child items to be wrapped onto multiple lines when they canâ€™t be fitted in one line. To wrap items from bottom to top, enable `Reverse` checkbox.

==== Align
Represents https://www.w3schools.com/cssref/css3_pr_align-content.asp[`align-content`] CSS property,
this property appears only when child items can be wrapped.
Since wrapped items can occupy multiple lines, this property aligns those lines when there is an extra space.

[[designer.creating.complex.layout.flex.item]]
=== Flex Item
Elements inside a flex container are flex items.
The Flex Item panel appears when selecting a flex item.
In case the selected item is also a flex container, both panels will be shown.
[[figure.designer.flex.item]]
.Flex Item
image::images/designer-3-layout-flex-item.png[]

==== Sizing
Represents https://www.w3schools.com/cssref/css3_pr_flex-grow.asp[`flex-grow`]
and https://www.w3schools.com/cssref/css3_pr_flex-shrink.asp[`flex-shrink`] CSS properties,
allowing a flex item to take more or less space than other elements.

==== Align
Represents https://www.w3schools.com/cssref/css3_pr_align-self.asp[`align-self`] CSS property,
allowing a specific flex item to override the Align setting of its parent container.

[[designer.sizing.and.spacing]]
== Sizing and spacing
To give a component a specific size and define the empty space around and inside it, you can use the size and space panel located in the properties panel.

[[figure.designer.size.and.space]]
.Size and space panel
image::images/designer-size-space.png[]

Set

* <<designer.sizing.and.spacing.width.and.height, width and height>> to set and constrain the size of the component
* <<designer.sizing.and.spacing.margin.and.padding, margin>> to define the empty space around the component
* <<designer.sizing.and.spacing.margin.and.padding, padding>> to define the empty space between the component and its content
* <<designer.sizing.and.spacing.spacing, spacing>> to define the empty space between the component's children (only for VL and HL)

See the following figure for illustration.

[[figure.designer.size.and.space.model]]
.Size and space panel model. Horizontal layout as an example.
image::images/designer-size-and-space-model.png[]

NOTE: When Lumo theme is in use, the margin, padding and spacing properties accept t-shirt sizes which translate to the corresponding <<{articles}/ds/foundation/size-space/#space, spacing properties>>. Otherwise, the property values map directly to the corresponding CSS properties.

[[designer.sizing.and.spacing.width.and.height]]
=== Width and height

[[figure.designer.size.and.space.width.and.height]]
.Width and height properties
image::images/designer-size-space-width-height.png[]

Set width and height, as well as constrain their minimum and maximum values.

These properties map directly to the CSS properties
https://developer.mozilla.org/en-US/docs/Web/CSS/width[`width`],
https://developer.mozilla.org/en-US/docs/Web/CSS/min-width[`min-width`],
https://developer.mozilla.org/en-US/docs/Web/CSS/max-width[`max-width`],
https://developer.mozilla.org/en-US/docs/Web/CSS/height[`height`],
https://developer.mozilla.org/en-US/docs/Web/CSS/min-height[`min-height`] and
https://developer.mozilla.org/en-US/docs/Web/CSS/max-height[`max-height`].

[[designer.sizing.and.spacing.margin.and.padding]]
=== Margin and padding

[[figure.designer.size.and.space.margin.and.padding]]
.Margin and padding properties
image::images/designer-size-space-margin-padding.png[]

Set margin and padding. Setting `Margin` or `Padding` will set the same value to all edges. Individual edges can be set or overridden by setting values to the `Left`, `Top`, `Right` and `Bottom` properties.

These properties map directly to the CSS properties
https://developer.mozilla.org/en-US/docs/Web/CSS/margin[`margin`],
https://developer.mozilla.org/en-US/docs/Web/CSS/margin-left[`margin-left`],
https://developer.mozilla.org/en-US/docs/Web/CSS/margin-right[`margin-right`],
https://developer.mozilla.org/en-US/docs/Web/CSS/margin-top[`margin-top`],
https://developer.mozilla.org/en-US/docs/Web/CSS/margin-bottom[`margin-bottom`],
https://developer.mozilla.org/en-US/docs/Web/CSS/padding[`padding`],
https://developer.mozilla.org/en-US/docs/Web/CSS/padding-left[`padding-left`],
https://developer.mozilla.org/en-US/docs/Web/CSS/padding-right[`padding-right`],
https://developer.mozilla.org/en-US/docs/Web/CSS/padding-top[`padding-top`] and
https://developer.mozilla.org/en-US/docs/Web/CSS/padding-bottom[`padding-bottom`]. If Lumo theme is in use, then, additionally, t-shirt sizes are translated to https://cdn.vaadin.com/vaadin-lumo-styles/1.6.0/demo/sizing-and-spacing.html#custom-properties[`--lumo-space-*`] variables.

[[designer.sizing.and.spacing.spacing]]
=== Spacing

[[figure.designer.size.and.space.spacing]]
.Spacing property
image::images/designer-size-space-spacing.png[]

Set empty space between child components of Vertical and Horizontal layouts. When Lumo theme is in use, a number of t-shirt sizes are available as options. The sizes correspond to the sizes available for margin and padding.
