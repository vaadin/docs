---
title: Vaadin Flow for Swing Kit
order: 3
description: How to make Vaadin Flow views usable together with Swing Kit.
---

= Vaadin Flow for Swing Kit

== Bridge Annotation

To enable your views to be used from Swing, you need to add the [annotationname]`@Bridge` annotation to them.
For example:

[source,java]
----
@Bridge
public class MyView extends HorizontalLayout {
}
----

It is possible to check if the view is rendered in a normal browser or inside a Swing application using the [methodname]`isSwingRendered()` method:

[source,java]
----
SwingVaadinClient.isSwingRendered()
----

== Emit Events to Swing

You can send events from your Vaadin application to the Swing application.
This is done by creating a new [classname]`VaadinSwingEvent` instance.

For example, to create a button that when clicked sends an event to Swing do something like this:

[source,java]
----
new Button("Exit", event -> {
    EventEmitter actionEmitter = EventEmitterFactory.newEventEmitter();
    actionEmitter.emit(new VaadinSwingEvent("myEvent")); // asynchronously sends an action event to Swing
});
----

You can enrich events with more details using parameters like so:

[source,java]
----
EventEmitter actionEmitter = EventEmitterFactory.newEventEmitter();
VaadinSwingEventBuilder eventBuilder = new VaadinSwingEventBuilder("enrichedEvent");
eventBuilder.addParam("detail1", "someDetail");
eventBuilder.addParam("eventDate", new Date());
actionEmitter.emit(eventBuilder.build());
----

Note that the instances contained inside [classname]`VaadinSwingEvent` must always be [interfacename]`Serializable` to allow the Swing application to parse the data.
