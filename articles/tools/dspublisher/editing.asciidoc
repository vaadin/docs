---
title: Editing Content
description: Learn how to structure and author the content of your documentation website.
order: 40
---

= Editing Content
:experimental:

++++
<style>
.exampleblock.exampleblock {
  margin-inline-start: 0;
}

.exampleblock .code-example {
  margin: var(--docs-paragraph-margin);
}
</style>
++++

== Content Folder

Documentation page content is located in the `articles` folder by default. This content root path can be configured with the <<configuration#options, `ARTICLES_PATH` property>>.

== Page Hierarchy

The file and folder hierarchy defines the website URL and navigation structure directly. Each <<asciidoc>> file (`.adoc` or `.asciidoc`) inside the content folder corresponds to a page on the website.
For example:

[frame=none,grid=rows]
|===
| Path | URL | Navigation hierarchy

| `articles/components/button/style.adoc`
| `\https://localhost:8000/components/button/style`
| menu:Components[Button > Style]
|===

Each folder should have an `index.adoc` file, which defines the title and description of that section, and optionally some content for the index page. An empty index page displays an automatically generated <<section-outline, section outline>>, that is, a listing of the sub-pages and sub-sections in that section.


[[metadata]]
== Page Metadata (Front Matter)

Each AsciiDoc file starts with a YAML formatted metadata block called the “front matter”, defined between lines with three dashes.
The following front matter attributes can be defined in this block. Only the `title` attribute is required.

[small]
`title` string::
*Required*. The page's title as shown in the navigation menus/trees, breadcrumbs, search results, and social media share previews. This title can be different from the main page heading (i.e., the largest heading on the page), which is defined using AsciiDoc. For tabbed pages, this title attribute defines the main page heading as well.
+
[small]
`description` string::
Page description. Shown under the main page heading and in section outlines. Also used in social media share previews.
+
[small]
`layout` string::
Only useful for `index.adoc` pages. Set to `tabbed-page` to display the pages in this section as tabs on the index page instead of as child items in the navigation tree.
+
[small]
`tab-title` string::
The title displayed for this page when it is displayed as a tab. Useful if you want to show a shorter title in the tab and a longer one in the breadcrumb or search results.
+
[small]
`page-links` list of string::
Links which are displayed in the page header. Can be used for linking, for example, to the component repository, Figma file, or other resources. The links are defined using AsciiDoc syntax, and they can also contain simple formatting.
+
[small]
`order` number::
Overrides the placement of the page in the navigation tree among the sibling pages in the same section. By default, pages are ordered alphabetically based on the title. Pages without an order are placed after ordered pages. It's a good practice to make them spaced by 10 or 100, so you can add pages between existing ones without changing the number in other pages.
+
[small]
`banner` string::
Define a banner which is shown directly under the site header. A banner defined in the root `index.adoc` file is shown on all documentation pages, but it can be overridden with a page level banner.
+
[small]
`banner-style` string::
Define the banner style. Possible values are `tip`, `important`, `warning`, and `caution`.
+
[small]
`banner-id` string::
Define the banner ID. If defined, the user can dismiss the banner permanently on their device. A banner without an ID is displayed again after a page reload.
+
[small]
`section-nav` string::
Allows you to control the page navigation item. Possible values are:
+
- `expanded`: Expand this section in the navigation tree by default. Only applicable for `index.adoc` pages, which are not using tabbed page layout.
- `hidden`: Hide this page from the navigation tree, section outlines, and page navigation at the bottom of each page. If you set this on an `index.adoc` page, all sub-pages are also hidden from the navigation tree, but they are not hidden from section outlines or page navigation.
- A custom value, or a combination of values. The complete value is used as a class name on the corresponding HTML element in the navigation tree and section outlines, which allows you to add custom CSS styles for that item.
+
[small]
`url` string::
Define an external URL to link to. This causes the page to not be created on the documentation website (i.e., all content in that file is ignored). The navigation item is instead a link to this external URL.

The following is a comprehensive example of the page metadata attributes:

.`index.adoc`
[source,yaml]
----
---
title: Accordion
description: Accordion is a vertically stacked set of expandable panels. It reduces clutter and helps maintain the user's focus by showing only the relevant content at any time.
layout: tabbed-page
tab-title: Usage
page-links:
  - https://github.com/vaadin/vaadin-flow-components/releases/tag/{moduleMavenVersion:com.vaadin:vaadin-accordion-flow}[Flow {moduleMavenVersion:com.vaadin:vaadin-accordion-flow}]
  - https://github.com/vaadin/web-components/tree/v{moduleNpmVersion:@vaadin/accordion}/packages/accordion[Web Component {moduleNpmVersion:@vaadin/accordion}]
order: 10
banner: See the new https://example.org/blog[blog post]!
banner-style: tip
banner-id: my-new-blog-post
section-nav: expanded beta-component
---

// This is the main page heading...
= Accordion

// ...and the rest of the page content goes here
----

== Page Partials

Files, whose name starts with an underscore (e.g. `_shared.adoc`) and which don't define any <<metadata,page metadata>>, do not appear as a page in the website. These files can be used to share content using AsciiDoc's https://docs.asciidoctor.org/asciidoc/latest/directives/include/[include directive].

== Main Landing Page & Site name

The main landing page of the documentation website is defined with the `articles/index.adoc` file. The `title` front matter attribute defines the visible name in the website header.

== Section Outline

Using the section outline macro, section index pages (i.e., all `index.adoc` files) can include an automatically generated outline of its sub-pages and sub-sections. The outline lists each sub-page or sub-section name and description.

For example:

.`index.adoc`
[source,asciidoc]
----
---
title: Section Name
description: This section contains multiple sub-pages and sub-sections.
---

= Section Name

Here's a brief overview of the contents in this section.
You can learn more from the following pages:

// tag::snippet[]
section_outline::[]
// end::snippet[]
----

This macro is not part of the standard AsciiDoc syntax, but an extension Design System Publisher provides.


[[asciidoc]]
== AsciiDoc Syntax

The AsciiDoctor documentation has a https://docs.asciidoctor.org/asciidoc/latest/syntax-quick-reference/[quick reference for the AsciiDoc syntax]. Here's a list of some useful features:

- https://docs.asciidoctor.org/asciidoc/latest/tables/build-a-basic-table/[Tables];
- https://docs.asciidoctor.org/asciidoc/latest/blocks/admonitions/[Admonitions] (i.e., highlighted note blocks);
- https://docs.asciidoctor.org/asciidoc/latest/directives/include/[Includes] (i.e., embed content from another file);




[[code]]
== Code Examples

To display monospace text within regular text, wrap words in backticks (i.e., the ``` character). For example:

====
[source,asciidoc]
----
A paragraph with `monospace` text.
----

A paragraph with `monospace` text.
====

Use https://docs.asciidoctor.org/asciidoc/latest/verbatim/source-blocks/[source code blocks] to display code or command line examples. Syntax highlighting for various languages is supported. The most commonly used ones are `java`, `typescript` `html`, and `css`. For example:

====
[source,asciidoc]
-----
// tag::snippet[]
[source,java]
// end::snippet[]
----
Button button = new Button("My Button");
----
-----

[source,java]
----
Button button = new Button("My Button");
----
====

[[source-title]]
=== Source Code Block Title

By default, the source code language is used as the title of the block. You can define a https://docs.asciidoctor.org/asciidoc/latest/blocks/add-title/#add-a-title-to-a-block-with-attributes[custom title] as well. For example, you could define a file name to illustrate the location of the example code:

====
[source,asciidoc]
-----
// tag::snippet[]
.MyButtonExample.java
// end::snippet[]
[source,java]
----
Button button = new Button("My Button");
----
-----

.MyButtonExample.java
[source,java]
----
Button button = new Button("My Button");
----
====


[[code-include]]
== Include Code Examples from Source Files

You can include code examples from any file in the documentation project. Primarily, from files in the `frontend` and `src/main/java` source code folders, but practically from any folder in the project. The benefit of including them from the source code folders is that those files are compiled during the build, which ensures that any compilation errors in the code examples are caught early.

Use the AsciiDoc include directive to include them in code blocks as follows:

[source,asciidoc,subs="-attributes"]
-----
[source,java]
----
\include::{root}/src/main/java/path/to/MyExample.java[]
----
-----

Use the `\{root}` attribute reference at the start of the path, if you want to use an absolute reference, starting from the project root. Otherwise the path is relative to the AsciiDoc file.

By default, the name of the file you include is used as the title for the source code block. You can <<source-title,customize the title>> if needed.

You can pass various parameters to the include directive, between the trailing square brackets, to affect how the code example is included.


=== Include Parameters

[small]
`render`::
Renders a interactive example, as described in <<code-render>>.
+
[small]
`tags=<name>`::
Specifies tags for extracting a source code snippets. See <<snippets>> for more information.
+
[small]
`indent=<spaces>`::
Specifies the indentation of the code inside the listing. Without the parameter, the indentation in the source listing is used. You should use `indent=0`.
+
[small]
`group=<name>`::
Groups the file under a group tab. You can use this for language groups, such as `group=Java` and `group=TypeScript` in corresponding include statements. You shouldn't use it if you only have a single group, as it would show an unnecessary tab. See <<example-groups>> for more information.
+
[small]
`hidden`::
Hides the example. This is necessary for TypeScript counterparts of Java examples, which are only included to load component styles, as described in <<typescript-counterparts>>.


=== Snippets

Snippets are segments of code examples that are displayed by default, instead of the entire source code of an included file. The *Expand code* button in the example reveals the rest of the included file. This can be useful for making it easier for readers to see the most relevant part of the example.

Snippets are defined in the source code as comments:

- `tag::snippet[]` marks the beginning of the snippet;
- `end::snippet[]` marks the end of the snippet.

The snippet name between the colons and square brackets can be any string. You don't need to name it "snippet".

Write the comment in the format defined for the example's syntax highlighting. For TypeScript examples, this means that code tagged with `[source,html]` must use HTML comments within an HTML literal in the code. Here are examples for commonly used languages in the documentation:

[.example]
--
.Java
----
public MyComponentExample() {
  // tag::snippet[]
  MyComponent myc = new MyComponent("My component");
  // end::snippet[]
  add(myc);
}
----

.TypeScript
----
render() {
  // tag::snippet[]
  return html`
    <!-- tag::another-snippet[] -->
    <my-component>My component</my-component>
    <!-- end::another-snippet[] -->
  `;
  // tag::snippet[]
}
----

.HTML
----
<div>
  <!-- tag::snippet[] -->
  <my-component>My component</my-component>
  <!-- end::snippet[] -->
</div>
----

.CSS
----
/* tag::snippet[] */
html {
  color: black;
}
/* end::snippet[] */
----
--

Snippets must be enabled in the `include::[]` directive in the page content, by adding the `tags` attribute in the brackets following the path, indicating which named snippet to include. For example:

[source,asciidoc,subs="verbatim,quotes"]
-----
[source,java]
----
\include::...[...,*tags=snippet*]
----
-----

See https://docs.asciidoctor.org/asciidoc/latest/directives/include-tagged-regions/[Including Content by Tagged Regions] in the AsciiDoc documentation to learn more how you can use snippets.


[[hidden-source-lines]]
=== Excluding Source Code Lines

Parts of the source code can be entirely omitted from the rendered code examples by appending a specific comment after the line. For example, here's how you would hide an annotation in a Java example:

[source,java]
----
// The following line would not be shown
// if this code was added using the include directive
// tag::highlight[]
@HiddenAnnotation // hidden-source-line
// end::highlight[]
public MyComponentExample() {
  MyComponent myc = new MyComponent("My component");
  add(myc);
}
----

This is useful for excluding code that's only needed for the <<rendered-examples,rendered example>> but not relevant for normal use of the component.

This isn't a standard AsciiDoc feature, but an extension Design System Publisher provides.


[[example-tabs]]
=== Listing Multiple Source Code Blocks in an Example

You can have multiple files in a code example if you specify them inside an `.example` style block. This is a good practice for showing a UI source code example, while having a data model or resource files available.

====
[source,asciidoc,subs="-attributes"]
-----
[.example]
--
[source,java]
----
\include::{root}/src/main/java/com/vaadin/demo/flow/application/events/EventsLambda.java[tags=snippet,indent=0]
----

[source,java]
----
\include::{root}/src/main/java/com/vaadin/demo/flow/application/events/EventsAnon.java[tags=snippet,indent=0]
----
--
-----

[.example]
--
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/flow/application/events/EventsLambda.java[tags=snippet,indent=0]
----

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/flow/application/events/EventsAnon.java[tags=snippet,indent=0]
----
--
====

[[example-styles]]
==== Example Style Block Styles

You can use the following styles to control the behaviour of example style blocks:

`show-code`::
Automatically shows the code listing. It's by default initially closed.
+
[source,asciidoc]
----
[.example.show-code]
----

`render-only`::
Don't show code listing at all.
+
[source,asciidoc]
----
[.example.render-only]
----
+
This doesn't disable the <<example-groups,example group tabs>>.


[[example-groups]]
=== Group Source Code Blocks

When listing multiple source code blocks in one example, they can be grouped to create collections of related source files by including the `group` attribute in the include directive. Each group can include a description for its contents written before each source code block.

A common use case for the grouping is to show alternative approaches for achieving the same end result. For example, how to implement a certain user interface in either Java or TypeScript:

====
[source,asciidoc,subs="-attributes"]
-----
[.example.show-code]
--
Here is some text to describe the Java example.
You could mention things like the `Button` class.

[source,java]
----
\include::{root}/src/main/java/com/vaadin/demo/flow/application/events/EventsBasic.java[render,tags=snippet,indent=0,group=Java]
----

Here is some text to describe the TypeScript example.
You could mention things like the [methodname]`render()` method.

[source,typescript]
----
\include::{root}/frontend/demo/flow/application/events/events-basic.ts[render,indent=0,group=TypeScript]
----
--
-----

[.example.show-code]
--
Here is optional text to describe the Java example.
You could mention things like the `Button` class.

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/flow/application/events/EventsBasic.java[render,tags=snippet,indent=0,group=Java]
----

Here is optional text to describe the TypeScript example.
You could mention things like the [methodname]`render()` method.

[source,typescript]
----
include::{root}/frontend/demo/flow/application/events/events-basic.ts[render,tags=snippet,indent=0,group=TypeScript]
----
--
====



[[code-render]]
== Rendered Examples

You can render a <<code-include,code example>> as an interactive example by including `render` attribute in the include directive. Only Java and TypeScript examples can be rendered as interactive. Here are examples how to render a Java-based and a TypeScript-based example:

[.example]
--
[source,asciidoc,subs="-attributes"]
-----
<source-info group="Java"></source-info>
[source,java]
----
\include::{root}/src/main/java/com/vaadin/demo/component/mycomponent/MyComponent.java[render]
----
-----

[source,asciidoc,subs="-attributes"]
-----
<source-info group="TypeScript"></source-info>
[source,typescript]
----
\include::{root}/frontend/demo/component/my-component/my-component.ts[render]
----
-----
--


[[typescript-counterparts]]
=== Rendered Java Examples Require TypeScript Counterpart

Styles for any components that are used in an example are only loaded for TypeScript examples. You therefore always need a TypeScript counterpart for any Java example. Otherwise, the components aren't styled and the example appears broken. The TypeScript example doesn't need to be functional, it only needs to import the needed components.

The example shouldn't have a `group` parameter, and the TypeScript example should have parameter `hidden` instead of `render`.

====
[source,asciidoc]
-----
[.example.show-code]
--
[source,java]
----
\include::/src/main/java/com/vaadin/demo/flow/application/events/EventsBasic.java[render,tags=snippet,indent=0]
----

[source,typescript]
----
\include::/frontend/demo/flow/application/events/events-basic.ts[hidden]
----
--
-----

[.example.show-code]
--
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/flow/application/events/EventsBasic.java[render,tags=snippet,indent=0]
----

[source,typescript]
----
include::{root}/frontend/demo/flow/application/events/events-basic.ts[hidden]
----
--
====

Alternatively, you can use the `IMPORT_EXAMPLE_RESOURCES=true` <<configuration#options,configuration option>> to load all front-end resources upfront. Then it is enough that you include the Java code example without an additional or hidden TypeScript example.





== How to Write Examples That Can Be Rendered

Before embedding a component example on a page, you need to create the example itself.

Add dependencies for custom components to [filename]`pom.xml` the same way as a <<{articles}/styling/advanced/multi-app-themes#,custom theme JAR>>. Components and themes can be included in the same dependency.

=== Java Examples

Place Java-based examples in sub-folders inside the [filename]`src/main/java/` folder. Each example needs to be in its own file.

----
my-docs
└── src/main
    └── java/com/vaadin
        └── demo
            └── component
                ├── accordion
                ⋮   ├── AccordionBasic.java
                ⋮   ├── AccordionDisabledPanels.java
                ⋮   ⋮
                ├── mycomponent
                ⋮   ├── MyComponentExample.java
                ⋮   ⋮
----


To add examples for a new component, create a folder inside the component folder with a Java file inside it. For example:

.`src/main/java/com/vaadin/demo/component/mycomponent/MyComponentExample.java`
[source,java]
----
package com.vaadin.demo.component.mycomponent;
import com.vaadin.flow.component.html.Div;
import com.vaadin.flow.router.Route;
import com.vaadin.demo.DemoExporter; // hidden-source-line
import com.example.MyComponent;

@Route("my-component-example") // <2>
public class MyComponentExample extends Div { // <1>

    public MyComponentExample() {
        MyComponent myc = new MyComponent("My component");
        add(myc); // <3>
    }

    // <4>
    public static class Exporter extends // hidden-source-line
        DemoExporter<MyComponentExample> {} // hidden-source-line
}
----
<1> A class that extends `Div` or some other container like `VerticalLayout`
<2> with an optional `@Route` annotation with a route name that's unique within the entire website
<3> and a constructor that adds the desired UI as a child to the class.
<4> A static inner class that extends the `DemoExporter` class with a type parameter matching the example class.

Design System Publisher uses `spring-boot-devtools` to automatically rebuild the Java examples when you modify and save them, if you've configured your editor or IDE to do so. Rebuilding the Java examples typically takes about 30 seconds, after which the page must be manually reloaded.

=== TypeScript Examples

Place TypeScript-based examples in sub-folders inside the `frontend/` folder. Each example needs to be in its own file.

----
my-docs
└── frontend
    └── demo
        └── component
            ├── accordion
            ⋮   ├── accordion-basic.ts
            ⋮   ├── accordion-disabled-panels.ts
            ⋮   ⋮
            ├── my-component
            ⋮   ├── my-component-example.ts
            ⋮   ⋮
----

To add examples for a new component, create a folder with a TypeScript file inside it. For example:

.`frontend/demo/components/my-component/my-component-example.ts`
[source,typescript]
----
import '../../init'; // hidden-source-line
import { applyTheme } from 'generated/theme';
import { html, LitElement, customElement } from 'lit-element';

import '@my-org/my-component/my-component';

@customElement('my-component-example') // <1>
export class Example extends LitElement { // <2>
  protected createRenderRoot() { // <3>
    const root = super.createRenderRoot();
    applyTheme(root);
    return root;
  }

  render() { // <4>
    return html`
      <my-component>My component</my-component>
    `;
  }
}
----
<1> A `@customElement` annotation with a name that's unique within the entire website.
<2> A class that extends `LitElement`.
<3> A `createRenderRoot()` method that calls the `applyTheme(root)` method (this applies your custom theme to the example).
<4> A render method that returns the HTML for the example.

TypeScript code examples don't refresh automatically. The code example displayed below a rendered example isn't automatically refreshed when you edit the source AsciiDoc file in your text editor. To refresh the code example the page's text content needs to be re-saved for Design System Publisher to rebuild the page, and you need to reload the page.


[discussion-id]`6DF51E1C-15BB-4E15-A3C7-5C616B7BFC35`
