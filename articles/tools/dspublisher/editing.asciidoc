---
title: Editing Content
order: 40
---

= Editing Content

The [filename]#articles/ds# folder contains folders representing the website's top-level sections (1).
Each page within a top-level section has its own sub-folder (2), and an [filename]#index.asciidoc# file (3) containing the page's main content.
Pages can be divided into multiple tabs by AsciiDoc files (4) for each tab.
Top-level sections can have their own index pages represented by [filename]#index.asciidoc# files in the section's root folder (5).

.[filename]#my-docs#
----
└── articles
    └── ds
        └── components              <1>
            ├── accordion           <2>
            │   ├── index.asciidoc  <3>
            │   └── api.asciidoc    <4>
            ⋮
            └── index.asciidoc      <5>
----

For example, the above structure corresponds to an Accordion page in the Components section, containing Usage and API tabs:

.A tabbed page
image::images/tabbed-page.png[Documentation page with "Usage" and "API" tabs]

Whenever changes to a page's contents are saved, Publisher rebuilds the page and automatically refresh the page after a couple of seconds.

== Page Metadata

Each AsciiDoc file starts with a YAML formatted metadata block (called the “front matter”), defined between lines with three dashes (`---`).
The following properties can be defined in this block:

[cols=2,frame=none,grid=rows]
|===
|`title` (string)
|The page's title as shown in the navigation tree, breadcrumbs, search results and, for tabbed pages, in the page header. The title displayed for non-tabbed pages is defined with the <<page-content-syntax,page title heading>>.

|`layout` (string, optional)
|Page layout. Set to `tabbed-page` for pages containing multiple tabs.

|`tab-title` (string, optional)
|The title displayed for the tab in pages containing multiple tabs.

|`page-links` (string[], optional)
|Links to be displayed in the page header. Can be used for linking, for example, to the component repository, Figma file, or other resources.

|`order` (number, optional)
|Overrides the default placement of the page in the navigation tree.
|===

.Example front matter block
[.example]
--
.`index.asciidoc`
[source,yaml]
----
---
title: Accordion
layout: tabbed-page
tab-title: Usage
page-links:
  - https://github.com/vaadin/vaadin-flow-components/releases/tag/{moduleMavenVersion:com.vaadin:vaadin-accordion-flow}[Flow {moduleMavenVersion:com.vaadin:vaadin-accordion-flow}]
  - https://github.com/vaadin/vaadin-accordion/releases/tag/v{moduleNpmVersion:vaadin-accordion}[Web Component {moduleNpmVersion:vaadin-accordion}]
---

= Accordion  // <- title displayed on the page itself
----
--

== Adding Pages

New pages are added by creating a new AsciiDoc file in the desired folder.
To add a new component page, create a folder inside [filename]#articles/ds/components#, add a new [filename]#index.asciidoc# file inside it, and configure its metadata.

It takes a few seconds for Publisher to add the new page to the navigation tree, after which the page refreshes automatically.
You need to refresh the browser to use the updated search index.

== Page Content Syntax [[page-content-syntax]]

The AsciiDoctor site has a handy https://docs.asciidoctor.org/asciidoc/latest/syntax-quick-reference/[quick reference for the AsciiDoc format].

.Common AsciiDoc formatting syntax
[cols=".^1l,.^1a",frame=none,grid=rows]
|===

|= Page Title
|
[discrete]
= Page Title

|== Level 1 Section Title
|
[discrete]
== Level 1 Section Title

|=== Level 2 Section Title
|
[discrete]
=== Level 2 Section Title

|==== Level 3 Section Title
|
[discrete]
==== Level 3 Section Title

|*bold text*
|*bold text*

|_italic text_
|_italic text_

|`monospace text`
|`monospace text`

|#highlighted text#
|#highlighted text#

| https://example.com[A hyperlink]
| https://example.com[A hyperlink]

|<<../path/to/folder#, Link to another folder's index page>>
|xref:../path/to/folder#[Link to another folder's index page, role=skip-xref-check]

|<<../path/to/folder/page#, Link to another page>>
|xref:../path/to/folder/page#[Link to another page, role=skip-xref-check]

|<<../path/to/folder/page#section, Link to another page's section>>
|xref:../path/to/folder/page#section[Link to another page's section, role=skip-xref-check]

|
* Bullet list item
** Nested bullet list item
|
* Bullet list item
** Nested bullet list item

|
. Numbered list item
.. Nested numbered list item
|
. Numbered list item
.. Nested numbered list item

|
* [ ] Checkbox, unchecked
* [x] Checkbox, checked
|
* [ ] Checkbox, unchecked
* [x] Checkbox, checked

|image::path/to/image.png[Alt text]
|image::images/example-image.jpg[Alt text, 100, 100]
|===

Images are automatically scaled and optimized (excluding SVG images) for the production build.

Other common features include:

- https://docs.asciidoctor.org/asciidoc/latest/tables/build-a-basic-table/[Tables]
- https://docs.asciidoctor.org/asciidoc/latest/blocks/admonitions/[Admonitions] (highlighted note blocks)
- https://docs.asciidoctor.org/asciidoc/latest/syntax-quick-reference#literals-and-source-code[Literals and source code blocks]. See <<./ui-examples#,Adding UI Examples>> for how to embed live UI samples with code snippets to pages.
- https://docs.asciidoctor.org/asciidoc/latest/directives/include/[Includes] (embed content from another file)
