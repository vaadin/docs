---
title: Collaboration List
order: 10
---


[[ce.collaboration-list]]
= Store Ordered Values in Topics

The Topic API provides the [classname]`CollaborationList` data structure to store ordered values and subscribe to their changes. You can get a [classname]`CollaborationList` by its name in the Topic connection activation callback.

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/collaboration/CollaborationListExample.java[tags=snippet;!result,indent=0]
----

When you've gotten the list instance, you can insert values at the end of the list with the [methodname]`insertLast()` method.

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/collaboration/CollaborationListExample.java[tags=result;!future;!key,indent=0]
----

Since the insertion is asynchronous, the method returns a result object from which you can get a [classname]`CompletableFuture` that you can use to determine when the insertion has been done.

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/collaboration/CollaborationListExample.java[tags=result;!key,indent=0]
----

The result object also provides the `ListKey` of the inserted item, which you can use to replace the item itself, get its current value, or remove it from the list.

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/collaboration/CollaborationListExample.java[tags=result;!future;!advanced,indent=0]
----


== Advanced List Operations

The `ListOperation` class allows you to prepare a list operation that can then be applied to the list using the `CollaborationList::apply` method.

The reason you may want to use this class is to define certain conditions that must be met when the operation is attempted. If a condition isn't met, the operation isn't completed. This is useful to protect against duplicate operations.

The `ListOperation` has several static and conditional methods for inserting values:

|===
|Method |Type | Description

|`insertFirst()`
| static
| Inserted at the beginning of the list.

| `insertLast()`
| static
| Inserted at the end of the list.

| `insertBefore()`
| static
| Inserted immediately before a specified key.

| `insertAfter()`
| static
| Inserted immediately after a specified key.

| `insertBetween()`
| static
| Shorthand for `insertAfter(value, keyBefore).ifNext(keyBefore, keyAfter)`.

| `ifFirst(key)`
| conditional
| The specified `key` must be the first in the list.

| `ifLast(key)`
| conditional
| Must be the last in the list.

| `ifPrev(key, keyPrev)`
| conditional
| The specified `keyPrev` must be immediately before `key`.

| `ifNext(key, keyNext)`
| conditional
| The specified `keyNext` must be immediately after `key`.

| `ifEmpty()`
| conditional
| The list must have no entries.

| `ifNotEmpty()`
| conditional
| The list must have at least one entry.

|===

The example here shows how some of these methods might be used:

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/collaboration/CollaborationListExample.java[tags=advanced,indent=0]
----


[discussion-id]`106C5E39-A7E3-48D9-AF74-2E9A9A6576DF`
