---
title: Topic API
order: 9
---


[[ce.topic-tutorial]]
= Getting Started with Topic API

This tutorial shows how to use the low-level Collaboration Kit APIs, by updating and subscribing to a topic map.

To be more productive in creating collaborative applications, use the high-level APIs as described in the <<../tutorial#, Quick Start Guide>>.


[[ce.topic-tutorial.setup]]
== Preparations

Follow the preparation steps in the <<../tutorial#ce.tutorial.setup, Preparing the Application>> in the Quick Start Guide.


[[ce.topic-tutorial.add-collaboration-features]]
== Add Collaboration Features

This tutorial shows how to build a view with a checkbox where the user can choose whether they're in a _Friday mood_.


=== Create a Simple View

First, create the view with a checkbox, but not any collaborative functionality -- at least not yet.

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/collaboration/TopicView.java[tags=topic-view;add-components;!*,indent=0]
----


=== Define Topic Connection

Sharing data between multiple users happens through a `TopicConnection` instance. By default, the connection is deactivated until its related component is attached to the UI.

Open a connection to the `tutorial` topic, and define the activation callback which is triggered when the current `TopicView` component (i.e., `this`) is attached. The user who is related to the topic connection must be defined.

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/collaboration/TopicView.java[tags=user-info;open-topic-method-call;!*,indent=0]
            return null;
include::{root}/src/main/java/com/vaadin/demo/collaboration/TopicView.java[tags=open-topic-method-call-end;!*,indent=8]
----

The activation callback should return a registration, which Collaboration Kit runs when the connection is deactivated. Since the example does not yet register any listeners that need clean-up, it can return `null`.


=== Define Topic Category

The topic stores collaborative data in named maps and lists.

In the activation callback, get a map by its name:

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/collaboration/TopicView.java[tags=user-info;open-topic-method-call;get-map;!*,indent=0]
            return null;
include::{root}/src/main/java/com/vaadin/demo/collaboration/TopicView.java[tags=open-topic-method-call-end;!*,indent=8]
----


=== Pass Values to Topic

The first actual step to making the application collaborative is to update the topic whenever the checkbox value changes. The key `isFriday` is associated with the value of the checkbox. Add a value change listener that updates the related topic map.

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/collaboration/TopicView.java[tags=open-topic-method-call;get-map;registration;open-topic-method-call-end;!*,indent=0]
----

The topic's structure now looks as follows:

----
Topic maps
|_ fieldValues
  |_ isFriday: true/false
----

.Add Scope to Topic Data
[TIP]
By default, values are stored in the Topic until explicitly removed. You can use methods accepting a scope parameter and use `EntryScope.CONNECTION` to have the entry removed when the connection is deactivated.


=== Subscribe to Topic Changes

The final part of the code is to subscribe to updates to the topic map, and to update the checkbox if the related map is changed. This is also done in the activation callback so that the subscription is opened only when the view is actually used.

It's also necessary to return the registration of the listener so it can be removed when the component is detached to avoid leaking memory.

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/collaboration/TopicView.java[tags=open-topic,indent=0]
----

.Combining Registrations
[TIP]
In case there are many registrations, they can be combined by `Registration.combine(registration1, registration2);`.


[[ce.topic-tutorial.run]]
== Run the Application

Follow the instructions in the application's `README.md` file to start the application. Then open `http://localhost:8080/` in multiple browser tabs to see how a change made in one tab is automatically shown in the other tabs.


[discussion-id]`D24BC999-9D07-4390-BC29-F57C87DBA927`
