---
title: Clustering Support
order: 20
---


[[ce.backend]]
= Implementing Support for Clustered Environments
:experimental:

Using Collaboration Kit with its default settings in a clustered environment results in users being able to collaborate only with other users connected to the same application instance, the same node. To run clustered application deployments, Collaboration Kit provides the [classname]`Backend` superclass that can be extended to support multi-instance environments.

This page shows how to implement a custom backend to support clustering on the https://hazelcast.com[Hazelcast] platform.

.Experimental Feature
[IMPORTANT]
The Collaboration Kit backend for clustering support is an experimental feature. The behavior, the API, as well as the look-and-feel, may change. You can enable it through a <<Feature Flag>>.


== Event Log Basics

Collaboration Kit uses a custom [classname]`Backend` implementation as the gateway for accessing Event Logs. An _Event Log_ is an ordered log of submitted events involving Topic data, such as added items or value changes. The [classname]`EventLog` API provides methods to submit new events to the log and to add a subscriber that receives past and future events. All events are marked by a unique identifier. The API uses it for a method that removes all events in the log before a given identifier.


=== Event Log for Hazelcast

Hazelcast provides a straightforward streaming API based on shared maps and lists. Start by implementing the [classname]`EvengLog` interface for the reference Hazelcast platform. The Event Log can be implemented to make use of a Hazelcast [classname]`IList`. However, you'll need a class to store both the event identifier and the payload, first.

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/collaboration/hazelcast/HazelcastBackend.java[tags=id-payload,indent=0]
----

Once you have that, you can start implementing the interface methods. The [methodname]`submitEvent` method uses the event identifier and payload so you can store them in a new [classname]`IdAndPayload` object. You may also add it to the Hazelcast list for the Event Log.

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/collaboration/hazelcast/HazelcastBackend.java[tags=event-log;submit-event;!*,indent=0]
----

To implement subscriptions to events, add an item listener to the Hazelcast list. The subscriber then receives all past and future events in the Event Log. A new subscriber receives all earlier events from the log in their original order. This allows it to synchronize to the latest state. New events are delivered in order, after all earlier events have been delivered. The [methodname]`subscribe` method may not be invoked again until the previous subscriber has been removed.

The [methodname]`subscribe` method optionally takes the identifier of the last known event so that the subscriber is notified only about newer events. If an identifier is provided but not found in the Event Log, an [classname]`EventIdNotFoundException` is thrown.

.Exception Handling
[NOTE]
When the code calling this method catches an exception, it may retry the subscription with another identifier.

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/collaboration/hazelcast/HazelcastBackend.java[tags=subscribe,indent=0]
----
<1> Only a single subscriber is allowed: an exception is thrown when there is one, already.
<2> If an event identifier is provided, the list is checked to see if it's contained in it. If it doesn't, an [classname]`EventIdNotFoundException` is thrown.
<3> An item listener is added to the Hazelcast list to handle new items and those that have been removed.
<4> All past events are delivered initially.
<5> [classname]`Registration` is returned and can be used to remove the subscriber.

The [methodname]`deliverEvents` method is `synchronized` to prevent it from being invoked simultaneously by multiple threads -- and to avoid the subscriber being notified of duplicate events. The method keeps track of the Hazelcast list index to identify the next event. It increments that index until all events are delivered. If an event identifier is set as the starting point, no new events are delivered until that identifier is reached.

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/collaboration/hazelcast/HazelcastBackend.java[tags=deliver-events,indent=0]
----

The last method to implement for the [classname]`EventLog` interface is  [methodname]`truncate`. This method is used to limit the number of events contained in the log, preventing it from growing infinitely. It takes the identifier of the oldest known event that should be preserved, or, if a `null` identifier is provided, it empties the entire log.

To implement this behavior for Hazelcast, create a [classname]`Predicate` class and pass it to the [methodname]`removeIf` method in the list.

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/collaboration/hazelcast/HazelcastBackend.java[tags=truncate,indent=0]
----


== Opening an Event Log

Once you have a Hazelcast implementation of the [classname]`EventLog` interface, you'll need to extend the [classname]`Backend` class to be able to create and get instances of it. Since this implementation depends only on a single Hazelcast [classname]`IList`, it's simple to implement the [methodname]`openEventLog` method. You can do so by returning a new instance of the [classname]`HazelcastEventLog` with the list named after the `logId` parameter.

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/collaboration/hazelcast/HazelcastBackend.java[tags=openEventLog,indent=0]
----


== Event Log Snapshots

A _snapshot_ is an opaque representation of data at a certain moment in time. It can be used by nodes joining a cluster to catch up with a recent state of data -- without the need to replay all events. Snapshots are identified by name. Each version of a named snapshot is assigned an extra unique identifier.


=== Loading a Snapshot

To load the latest version of a snapshot, the [classname]`Backend` class provides the [methodname]`loadLatestSnapshot` method. This method can be implemented for Hazelcast by using a map to store the latest available snapshot.

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/collaboration/hazelcast/HazelcastBackend.java[tags=loadLatestSnapshot,indent=0]
----


=== New Snapshot

To submit a new snapshot of data, use the [methodname]`replaceSnapshot` method. It takes the name of the snapshot, the expected unique identifier of the latest snapshot, the unique identifier of the new snapshot, and the payload of the snapshot itself. To implement this method for Hazelcast, you need some logic to verify that the latest snapshot is the expected snapshot.

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/collaboration/hazelcast/HazelcastBackend.java[tags=replaceSnapshot,indent=0]
----


== Node Identity & Membership Events

The primary purpose of the Backend API is to support collaborative features in applications that are deployed in clustered environments. Every [classname]`Backend` instance represents a member of the cluster and is uniquely identified by a [classname]`UUID`, which is returned by the [methodname]`getNodeId` method. For example, you could return the local member identifier for your Hazelcast implementation.

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/collaboration/hazelcast/HazelcastBackend.java[tags=getNodeId,indent=0]
----

When many [classname]`Backend` instances are involved, it's necessary to know when they join or leave the cluster. For this purpose, the [classname]`Backend` provides an implementation of the [methodname]`addMembershipListener` method that takes a [classname]`MembershipListener` and notifies it when cluster members join or leave. Since Hazelcast uses the same concept, the implementation is straightforward: You only need to map Hazelcast's events to Collaboration Kit's [classname]`MembershipEvent` events. This grabs the [classname]`MembershipEventType` (i.e., `JOIN` or `LEAVE`), and the identifier of the member.

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/collaboration/hazelcast/HazelcastBackend.java[tags=addMembershipListener,indent=0]
----

.Registration Object
[NOTE]
The [methodname]`addMembershipListener` returns a [classname]`Registration` object that can be used later to remove the listener.


== Feature Flag

To use the Collaboration Kit backend for clustering support, you must enable it with the `collaborationEngineBackend` feature flag.

See <<{articles}/configuration/feature-flags#,Feature Flags>> for instructions on how to do this.

[discussion-id]`AB472607-53E3-481D-AF99-93E3F6ED8B61`
