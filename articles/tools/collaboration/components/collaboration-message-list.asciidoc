---
title: Message List
order: 3
---


[[ce.collaboration-message-list]]
= Real-Time Chat & Commenting Components

You can add a real-time chat to your application by using the [classname]`CollaborationMessageList` and [classname]`CollaborationMessageInput` components.

.Example of `CollaborationMessageList` & `CollaborationMessageInput`
[.fill.white]
image::images/collaboration-messages-example.png[A Chat with three messages and controls for entering new messages, width=399]

These enhance the regular [classname]`MessageList` and [classname]`MessageInput` components by synchronizing the messages for all users connected to the same topic. The message list only renders the submitted messages, while the message input provides controls for submitting new messages. Here's an example of how to set them:

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/collaboration/MessageListDocumentation.java[tags=message-list-and-input,indent=0]
----

.Example Classes
[NOTE]
[classname]`User` and [classname]`UserService` are application-specific example classes. They're not part of the Collaboration Kit API.

The [classname]`CollaborationMessageList` constructor takes two arguments: information about the end user associated with this session; and a topic identifier. The user information is used to render the user name and avatar in the messages submitted by the user. See the <<collaboration-avatar-group#ce.configuring-avatars, `CollaborationAvatarGroup` documentation>> for more details on how the avatars are rendered, or how to load images from a backend with the [methodname]`setImageProvider()` method.

The topic identifier works the same as for other Collaboration Kit features. The data in Collaboration Kit is shared among those users who are connected to the same topic. With these components, the topic acts like a chat room.

In the example above, the topic identifier is hard-coded as "general". This means that every user in this view sees each other's messages. You can dynamically change the topic with the [methodname]`setTopic()` method when the user makes a selection in the UI.

[classname]`CollaborationMessageInput` takes the message list component as its constructor argument. It connects with the list to submit messages to its current topic. When the topic identifier for the list component is `null`, no messages are displayed: the connected message input is disabled.

After constructing the components, the last required step is to place them somewhere in your view. Here's an example of placing the message list on top of the input in a layout with a defined size:

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/collaboration/MessageListDocumentation.java[tags=message-list-layout,indent=0]
----


== Persisting Messages

The topic data in Collaboration Kit is stored only in the application memory. This applies also to messages in a [classname]`CollaborationMessageList`. This means that all submitted messages are lost when restarting the server.

To solve this problem, you can provide a [classname]`CollaborationMessagePersister` to store the messages in a backend. This is described in the xref:../managers/message-manager#ce.message-manager.persister[Message Manager documentation]. This component uses the manager, internally.

You can set the message persister in the message list's constructor like so:

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/collaboration/MessageListDocumentation.java[tags=message-list-ctor-persister,indent=0]
----


== Using Custom Input Components

Instead of using the provided [classname]`CollaborationMessageInput` component, you can configure your own component to submit messages. The component can be registered with [methodname]`CollaborationMessageList::setSubmitter()`.

The following example shows how to submit messages with the [classname]`TextField` and [classname]`Button` components:

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/collaboration/MessageListDocumentation.java[tags=message-list-submitter,indent=0]
----

The [methodname]`setSubmitter()` method takes a callback. Collaboration Kit calls it when a new topic connection is established (i.e., the topic identifier is set to a non-null value).

This callback should be used to configure any listeners for submitting new messages to [classname]`CollaborationMessageList` through the provided [classname]`ActivationContext`. The callback should return another callback for clean-up when the topic connection is deactivated (i.e., topic identifier is changed). Notice how the submit button is enabled only when there's an active topic connection.

.Use [classname]`MessageManager`
[TIP]
Messages can also be submitted programmatically to the list using a [classname]`MessageManager` instance with the same topic identifier. This is described in the xref:../managers/message-manager#ce.message-manager[Message Manager documentation].


== Customizing Messages

[classname]`CollaborationMessageList` enables changing the properties of [classname]`MessageListItem` items after they're generated. You can do that by providing a [classname]`MessageConfigurator`.

The following example shows how to use a message configurator to add a custom style to the current user's messages:

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/collaboration/MessageListDocumentation.java[tags=message-list-configurator;message-list-configurator-style;!*,indent=0]
----

See the <<{articles}/components/message-list#styling, Styling>> section in the Message List documentation for details on how to style messages based on the theme.

The message configurator can also be used to change the text content of messages. For example, it could censor certain words in messages, as is shown in the following example:

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/collaboration/MessageListDocumentation.java[tags=message-list-configurator;message-list-configurator-censor;!*,indent=0]
----

[discussion-id]`D91C0FE2-4BAC-4987-8763-956C5ABD9C2A`
