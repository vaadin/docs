---
title: Development Mode
description: Vaadin Development Mode makes application development faster by enabling easier debugging with a live-reload, front-end development server and helpful debugging tools.
order: 20
---

== Overview
Vaadin application can run in two modes: development mode and production mode.

Development mode aims to make it as easy as possible to build the application.
Changes you make to the project are picked up automatically and the browser is refreshed to show them.
The amount of data sent to the browser is not optimized to be small but instead contains debug information to make it easier to find the cause of problems.
Development mode provides a helpful debugging tools and information (the development tools window) available in the browser.


Development mode can further be divided into two modes:

- Using a pre-compiled front-end bundle
- Running with a front-end development server.

The difference between these modes is in how the front-end files are handled: when the front-end development server is up and running, it serves JavaScript, CSS and other front-end files to the browser one by one when they are requested, instead of the Java server the application is running on.
Otherwise, the front-end files are pre-compiled into a front-end bundle and this bundle is served to the browser similarly as in the production mode.

== Pre-Compiled Front-End Bundle For Faster Start-Up

The build and start-up time can be improved significantly if no front-end installation or re-compilation is done at any point: installing Node.js, running Vite and npm/pnpm packages installation.
If your project only uses the standard Vaadin Flow components or third-party Vaadin add-ons (e.g. from Vaadin Directory), including only Flow components, Vaadin then skips the re-compilation and uses the default set of components, themes and front-end files shipped with the Vaadin platform.

On the other hand, once any custom JavaScript/TypeScript codes or add-ons
with front-end customisations are added to the project, the re-compilation is triggered by Vaadin during next start-up using npm/pnpm and Vite.
Vaadin does it automatically and is able to spot the front-end customisations.
Making a new front-end bundle takes time still, but then all the output files (located in the `dev-bundle` directory inside project's root) can be added to the Version Control System, so that other developers can fetch it and run the application as though it uses a default bundle.

Thus, Vaadin defines two origins of the front-end development bundle: the "default" bundle updated and provided by the Vaadin platform in each release version, and the "application" bundle, which is made by local run of the project and taking into account the specific front-end customisations.
To let the "default" bundle be visible for Vaadin, one should add the dependency `com.vaadin:vaadin-dev-bundle` (with no version, since it's controlled by Vaadin platform).

Vaadin makes a new "application" bundle in the following cases:

- npm/pnpm package is added with `@NpmPackage` or directly into [filename]`package.json`
- CSS or JavaScript is added with `@CssImport`, `@JsModule` or `@JavaScript`
- Vaadin add-on with front-end customisations is added
- no `com.vaadin:vaadin-dev-bundle` dependency added to the project

Custom theme files are served separately from the front-end bundle, i.e. they can be modified on the fly and the browser live-reload would trigger refresh immediately, no re-compilation is needed.
When customising a theme for the application in this mode, the following points should be taken into account:

- Vaadin component's styles are set up in [filename]`styles.css` (or in the imported style sheet file located in the theme directory) with the `::part()` selector.
- Use the `assets` block in the [filename]`theme.json` file to specify the external assets, like fonts, images or style sheets, to be added into the "application" development bundle, so that they can be visible and used in the application.


This mode is available since *Vaadin 24.0* behind a feature flag `com.vaadin
.experimental.expressBuild`.

== Front-End Development Server For Easier Debugging

When working with a frontend heavy project, there can be a frontend development server running for fast compilation and live-reload when the frontend files are changed.

Vaadin uses Vite to speed up frontend development by enabling the client-side live-reload, so that JavaScript/TypeScript changes made are immediately updated to the browser. Vite only re-compiles what has actually changed, making hot reload fast.

Vite installation is made through npm/pnpm and running Vite requires Node.js.

Vaadin sets up the front-end development server by default.
