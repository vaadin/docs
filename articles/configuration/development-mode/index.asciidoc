---
title: Development Mode
description: Vaadin Development Mode is aimed at making application development faster by enabling easier debugging with a live-reload and front-end dev server.
order: 20
---

== Overview
Vaadin provides a mode, called "Development Mode", that enables easier debugging and fast start-up.

Depending on how much front-end customisations does your project have, you may want to choose running the application with the front-end dev server or without it.

The difference is that, if the front-end dev server is up and running, Vaadin uses it to serve JavaScript, CSS and other front-end files to the browser, instead of the Java server the application is running on.

This is so that, if you change a JavaScript or CSS file, your changes are picked up and served automatically, which gives a gain in productivity because no application's restart is needed.

On the other hand, if the development of your project doesn't assume an intensive change of the front-end files, you may want to not use the front-end dev server at all.
This means that the Node.js, Vite and npm/pnpm packages installation is not needed, which gives a significant profit in build and start-up time.
Vaadin uses pre-compiled front-end bundle shipped with the Vaadin platform, so that all the Vaadin components are already included.

To recap, whether to use the front-end dev server or not is a trade-off between a faster application start-up and faster show up for the changes in the browser.

[role="since:com.vaadin:vaadin@V24"]
== Pre-Compiled Front-End Bundle For Faster Start-up

The build and start-up time can be improved significantly if no front-end installation or re-compilation is done at any point.
If your project only uses the standard Vaadin Flow components or third-party Vaadin add-ons (e.g. from Vaadin Directory), including only Flow components, Vaadin then skips the re-compilation and uses the default set of components, themes and front-end files.

On the other hand, once any custom JavaScript/TypeScript codes or add-ons with front-end customisations are added to the project, the re-compilation is done during next start-up using npm/pnpm and Vite.
Vaadin does it automatically and is able to spot the front-end customisations.
Making a new front-end bundle takes time still, but then all the output files (located in the `dev-bundle` directory inside project's root) can be added to the Version Control System, so that other developers can fetch it and run the application as though it uses a default bundle.

Thus, Vaadin defines two origins of the front-end dev bundle: the "default" bundle updated and provided by the Vaadin platform in each release version, and the "application" bundle, which is made by local run of the project and taking into account the specific front-end customisations.
To let the "default" bundle be visible for Vaadin, one should add the dependency `com.vaadin:vaadin-dev-bundle` (with no version, since it's controlled by Vaadin platform).

Vaadin makes a new "application" bundle in the following cases:

- npm/pnpm package is added with `@NpmPackage` or directly into [filename]`package.json`
- CSS or JavaScript is added with `@CssImport`, `@JsModule` or `@JavaScript`
- Vaadin add-on with front-end customisations is added
- no `com.vaadin:vaadin-dev-bundle` dependency added to the project

Custom theme files are served separately from the front-end bundle, i.e. they can be modified on the fly and the browser live-reload would trigger refresh immediately, no re-compilation is needed.
When customising a theme for the application with no dev server used, the following points should be taken into account:

- Vaadin component's styles are set up in [filename]`styles.css` (or in the imported style sheet file located in the theme directory) with the `::part()` selector.
- Use the `assets` block in the [filename]`theme.json` file to specify the external assets, like fonts, images or style sheets, to be added into the "application" dev bundle, so that they can be visible and used in the application.

See <<{articles}/styling/custom-theme/custom-theme-configuration#,Theme Configuration>> for more information.

This mode is available since *Vaadin 24.0* behind a feature flag `com.vaadin.experimental.expressBuild`, see <<{articles}/configuration/feature-flags#,Feature Flags>> for more information about the feature flags.

== Front-End Dev Server For Easier Debugging

Vaadin uses the front-end dev server provided by Vite for enabling the client-side live-reload, so that the JavaScript/TypeScript changes made are immediately shown in the browser. Vite is optimised to re-compile only what is actually changed, which speeds up the hot reload.

Vite is distributed as an npm/pnpm package and, as a consequence, requires the Node.js and npm/pnpm installation.

See <<{articles}/configuration/development-mode/node-js#,Node.js installation>> and <<{articles}/configuration/development-mode/npm-pnpm#,Configuring front-end package manager>> for more information.

This mode should be used in case of a components/view made using <<{articles}/create-ui/templates#,Templates>> are present in the project.

Vaadin sets up the front-end dev server by default.

== Topics

section_outline::[]
