---
title: Development Mode
description: Vaadin Development Mode makes application development faster by enabling easier debugging with a live-reload, front-end development server and helpful debugging tools.
order: 20
---

== Overview
Vaadin application can run in two modes: development mode and production mode.

Development mode aims to make it as easy as possible to build the application.
Changes you make to the project are picked up automatically and the browser is refreshed to show them.
The amount of data sent to the browser is not optimized to be small but instead contains debug information to make it easier to find the cause of problems.
Development mode provides many helpful debugging tools and debug information (through the development tools window) is made available in the browser.

<<{articles}/production#,Production mode>> aims to send as little data as possible to the browser of the end user and otherwise also optimize the performance wherever possible.
No development tools are used and debug information is disabled.

Development mode can further be divided into two modes:

- Using a pre-compiled front-end bundle
- Running with a front-end development server.

The difference between these modes is in how the front-end files are handled:

Using pre-compiled front-end bundle the front-end files are collected and compiled into a bundle and are served to the browser similarly as in production mode, but with debug features enabled.

Running with the front-end development server JavaScript, CSS and other front-end files are served by it to the browser one by one when they are requested, instead of the Java server the application is running on.

[role="since:com.vaadin:vaadin@V24"]
== Pre-Compiled Front-End Bundle For Faster Start-Up

The build and start-up time can be improved significantly if no front-end installation or compilation is made.
This means not installing the tools Node.js, npm/pnpm and downloading npm packages, nor running the Vite development server.
If your project only uses the standard Vaadin Flow components or third-party Vaadin add-ons (e.g. from Vaadin Directory) without client-code, Vaadin then skips front-end compilation and uses the default themes and front-end files shipped with the Vaadin platform.

Adding any custom JavaScript/TypeScript or add-ons with front-end customisations to the project triggers the front-end re-compilation with Vite during next application's start-up.
Any new or missing front-end packages are downloaded using npm/pnpm before build.
Vaadin does this automatically and is able to spot the front-end customisations.

Making a new front-end bundle takes time, but the generated front-end files (located in the `dev-bundle` directory inside project's root) can be added to the Version Control System, so that other developers can fetch it and run the application bundle.
Application bundle is the same as the default bundle, but made for the specific application.

Thus, Vaadin defines two origins of the front-end development bundle: the "default" bundle updated and provided by the Vaadin platform in each release version, and the "application" bundle, which is made by local run of the project and taking into account the specific front-end customisations.
To let the "default" bundle be visible for Vaadin, one should add the dependency `com.vaadin:vaadin-dev-bundle` (with no version, since it's controlled by Vaadin platform).

Vaadin generates an "application" bundle in the following cases:

- npm/pnpm package is added with `@NpmPackage` or directly into [filename]`package.json`
- CSS or JavaScript is added with `@CssImport`, `@JsModule` or `@JavaScript`
- Vaadin add-on with front-end customisations is added
- custom theme packaged as a `JAR` dependency is added, if it defines any assets to be added to the project
- no `com.vaadin:vaadin-dev-bundle` dependency added to the project

Custom theme files are served separately from the front-end bundle, i.e. they can be modified on the fly and the browser live-reload would trigger refresh immediately, no re-compilation is needed.
When customising a theme for the application in this mode, the following points should be taken into account:

- Vaadin component styles are set up in [filename]`styles.css` (or in the imported style sheet file located in the theme directory) with the `::part()` selector.
- Use the `assets` block in the [filename]`theme.json` file to specify the external assets, like fonts, images or style sheets, to be added into the "application" development bundle, so that they can be used in the application.

See <<{articles}/styling/custom-theme/custom-theme-configuration#,Theme Configuration>> for more information.

This mode is available since *Vaadin 24.0* behind a feature flag `com.vaadin.experimental.expressBuild`, see <<{articles}/configuration/feature-flags#,Feature Flags>> for more information.

== Front-End Development Server For Easier Debugging

When working with a frontend heavy project, there can be a frontend development server running for fast compilation and live-reload when the frontend files are changed.

Vaadin uses Vite to speed up frontend development by enabling the client-side live-reload, so that JavaScript/TypeScript changes made are immediately updated to the browser. Vite only re-compiles what has actually changed, making hot reload fast.

Vite installation is made through npm/pnpm and running Vite requires Node.js.

See <<{articles}/configuration/development-mode/node-js#,Node.js installation>> and <<{articles}/configuration/development-mode/npm-pnpm#,Configuring front-end package manager>> for more information.

This mode is recommended if components/views use <<{articles}/create-ui/templates#,Templates>> and are edited often.

Vaadin sets up the front-end development server by default.

== Topics

section_outline::[]
