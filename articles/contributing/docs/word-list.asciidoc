---
title: Word List
order: 40
---

= Word List
:experimental:

include::_custom-styles.adoc[]

// Disabling certain Vale checks for this unique document.
pass:[<!-- vale Vaadin.Abbr = NO -->]
pass:[<!-- vale Vaadin.Contractions = NO -->]
pass:[<!-- vale Vaadin.EN_US = NO -->]
pass:[<!-- vale Vaadin.FirstPerson = NO -->]
pass:[<!-- vale Vaadin.HeadingCase = NO -->]
pass:[<!-- vale Vaadin.HeadingPunctuation = NO -->]
pass:[<!-- vale Vaadin.JustSimply = NO -->]
pass:[<!-- vale Vaadin.Periods = NO -->]
pass:[<!-- vale Vaadin.Please = NO -->]
pass:[<!-- vale Vale.Spelling = NO -->]
pass:[<!-- vale Vaadin.ThereIs = NO -->]
pass:[<!-- vale Vaadin.TooWordy = NO -->]
pass:[<!-- vale Vaadin.Terms = NO -->]
pass:[<!-- vale Vaadin.We = NO -->]
pass:[<!-- vale Vaadin.Will = NO -->]
pass:[<!-- vale Vaadin.Wordiness = NO -->]


== A

=== above
Don't use _above_ to indicate the position of an item on a page. Various devices, screen readers and browsers may position elements in different places. Instead, use words such as _previous_ or _earlier_.

=== add-on

=== agnostic
This term is sometimes used to indicate the absence of a dependence on some other software component, such as an operating system or platform. It's better to use a clearer term, such as _platform-independent_.

=== aka
This is an abbreviation of _also known as_. Although it may be briefer, it has tone not appropriate for software documentation. Instead, use parentheses or the word _or_. For example:

[example.recommend]
The company specializes in software as a service *(SaaS)*.
[example.avoid]
The company specializes in software as a service, *a.k.a. SaaS*.

[example.recommend]
Each instantiated object of the class has a separate copy, *or instance*.
[example.avoid]
Each instantiated object of the class has a separate copy, *a.k.a. instance*.

=== ampersand (&amp;)
Don't use the ampersand character in place of _and_ in general text. It may be used in page titles, as well as section and sub-section headings.

=== app
Although it's widely accepted and understood, use _application_ rather than _app_.

=== approximately
Write this word in full. Don't use [line-through]#_approx_#.

[[as_if_or_like]]
=== as if, like?
When stating that something looks like something else, you should be referring to a thing and not an action -- regardless of what extra words you might add to make it understandable, even though it may be a common way of speaking. For example, read these two sentences:

[example.recommend]
It looks as if it's going to rain.
[example.avoid]
It looks like it's going to rain.

The second example likens the subject, which is a noun, to a verb phrase. That's not preferred. An alternative, if you want to use the word "like", then liken the subject to a noun or noun phrase like so:

[example.recommend]
It looks like rain.

[[as_or_like]]
=== as, like
_As_ "expects" to be followed by a verb clause. Instead, _like_ "expects" to be followed by a noun or noun phrase -- a phrase that has the grammatical function of a noun. For example:

[example]
====
_Edit the file *as* you would normally._ +
+++[+++Not _[line-through]#like# you would_.+++]+++

_Make the amendments *as* described below._ +
+++[+++Not _[line-through]#like# described_.+++]+++

_**As** I have already mentioned, the software is open source._ +
+++[+++Not _[line-through]#like# I have already mentioned_.+++]+++
====

=== as such
_As such_ does *not* mean _for that reason_.

Instead, it means _in its role as the previously mentioned thing_. +
For example:

[example]
====
_This software is the most capable of its peer group and, *as such*, is an excellent buy._ +
+++[+++That is, _as the most capable of its peer group&hellip;_.+++]+++

_I was the chief designer on this project and, *as such*, I take full responsibility for design defects._ +
+++[+++That is, _as the chief designer&hellip;_.+++]+++
====

_As such_ is often incorrectly used in place of phrases like _so_ or _consequently_.
Here are some examples of *incorrect* usage:

[example]
====
_Developers appreciate the convenience of the toolkit and, [line-through]#as such#, it's a popular choice._ +
+++[+++Incorrect+++]+++

_The team were in a hurry to complete the project and, [line-through]#as such#, made several poor decisions._ +
+++[+++Incorrect+++]+++
====

=== ASCII

ASCII is an abbreviation for the American Standard Code for Information Interchange. It should always be written as an abbreviation and now written out, with the rarest of exceptions as it is here. It also should not include periods after each letter (i.e., not A.S.C.I.I.). Written as ASCII is acceptable.

=== aspect ratio

=== asynchronous
The adjective is _asynchronous_. The adverb is _asynchronously_. Don't use _async_ or _asynch_.

=== authenticate

=== auto-
No general rule exists on whether to hyphenate a word that begins with the prefix _auto-_. +
It's best to check in the dictionary.

If the word isn't given either in this guide or in the Merriam-Webster online dictionary, don't invent it yourself; use another term, for example with the adverb _automatically_.

== B
=== back button

=== backup, back up
The noun and adjective are _backup_.
The verb is _to back up_.
For example:

[example]
====
_Confirm that the *backup* completed successfully._ +
+++[+++Noun+++]+++

_It's vital to have reliable *backup* procedures in place._ +
+++[+++Adjective+++]+++

_You should back up all your files regularly._ +
+++[+++Verb+++]+++

_The data is subsequently *backed up* to the cloud._ +
+++[+++Verb+++]+++
====

=== backend

=== backward compatibility
The noun is _backward compatibility_.
The adjective is _backward-compatible_.

=== backspace

=== bandwidth

=== base64

=== below
Don't use _below_ to indicate the position of an item on the screen, as different devices and browsers may position elements differently. Instead, use _later_ or _in the following_.

=== beta
The word _beta_ should be written in lowercase, unless it appears differently as part of a defined product name.

=== big-endian

=== blacklist
Don't use the term _blacklist_. Instead, use _deny list_ or _block list_. The opposite is _allow list_, not _whitelist_.

=== blind
Avoid using _blind_ in an idiomatic or metaphorical sense.

To refer to people, use, for example, _a blind person_ or _a visually impaired person_ (whichever is more accurate in the context).

See also <<color_blind,color blind>>.

=== Bluetooth
_Bluetooth_ is a proper noun, so it should be capitalized.

=== Boolean
Capitalize _Boolean_ in general use.

=== bot

=== both
"Both" is an emphatic word that applies specifically to two stated things. +
It can't be used for more than two. +
For example:

[example.recommend]
This functionality is available in both Eclipse and NetBeans.
[example.avoid]
This functionality is available in both Eclipse, NetBeans, and IntelliJ IDEA.

To apply similar emphasis to more than two things, it would be necessary to say something like:

[example.recommend]
This functionality is available in all of Eclipse, NetBeans, and IntelliJ IDEA.

However, it might be more elegant to say, for example:

[example.recommend]
Eclipse, NetBeans, and IntelliJ IDEA all have this functionality.

=== breakpoint
// MS

=== built-in
The adjective is _built-in_ when it's used attributively (that is, *before* the noun that it describes). +
When it's used predicatively (that is, *after* a verb such as _be_, _seem_, _look_), the adjective phrase is _built in_.
For example:

[example]
====
_The device has a *built-in* DVD drive._ +
+++[+++The adjective is used attributively.+++]+++

_The DVD drive is *built in*._ +
+++[+++The adjective is used predicatively.+++]+++

_The device has a DVD drive *built in*._ +
+++[+++The adjective is used predicatively.+++]+++
====
//-

== C

=== cache, cached, caching

=== callback, call back
The noun and adjective are _callback_. The verb is _call back_.

// === call-out, call out
// The noun and adjective are _call-out_. The verb is _call out_.

=== cancel
_canceled_, _canceling_, _cancellation_.
// MS

=== catalog

Use _catalog_, not _[line-through]#catalogue#_.


=== cell phone
Don't use [line-through]#_cell phone_#. +
Instead, use _mobile_ or _mobile phone_.

=== check
Don't use _check_ to refer to selecting a checkbox in the user interface. +
Instead, use _select_.

=== check mark
In the UI, a _check mark_ is a visual indication that an item is selected.

=== checkbox
The spelling is _checkbox_.

Use _select_ and _clear_ to refer to user interaction with checkboxes.

=== click
_Click_ is both a verb and a noun.

Use _click on_ when referring to "virtual" objects, for example, when instructing the reader to click on a part of the user interface (e.g., a button):

[example.recommend]
Enter the required details and *click on* [guibutton]*OK*.
[example.recommend]
Enter the required details and *click on* the [guibutton]*OK* button.
[example.avoid]
Enter the required details and *click* the [guibutton]*OK* button.

Use _click_ (i.e., without _on_) when referring to physical objects, for example, when instructing the reader to click a specific mouse button:

[example.recommend]
*Click* the right mouse button to access the context menu.
[example.avoid]
*Click on* the right mouse button to access the context menu.

More-specific variants are _left-click_, _right-click_, and _double-click_ (all hyphenated). +

[example.recommend]
*Right-clicking on* the drop-down presents the user with more options.



=== client side
When used as a noun phrase, _client side_ has no hyphen:

[example.recommend]
The validation is handled on the *client side*.
[example.avoid]
The validation is handled on the *clientside*.

When used as an adjective phrase, it should be written with a hyphen to avoid ambiguity:

[example.recommend]
*Client-side* processing handles the validation.

=== client&nbsp;/&nbsp;server
Use non-breaking spaces before and after the slash ("/") character.
In AsciiDoc, this would be written as `client\&nbsp;/\&nbsp;server`.

=== cloud

=== codebase
[example.recommend]
codebase
[example.avoid]
code base

=== colon (:)
The function of a colon in a sentence is to signal the beginning of an explanation or a list. +
Often, we can think of it as saying +
_and this is it&hellip;_ +
or +
_and the following is what I'm talking about&hellip;_. +
Some examples of this are:

[example]
====
_There can be only one reason he is late**:** he has missed the flight._ +
_Annabel has three valuable characteristics**:** she is clever, she is conscientious, and she is honest._ +
_On seeing the results of my work, I felt only one emotion**:** pride._
====

A colon is also commonly used to introduce a list, particularly at the end of a sentence. +
For example:

[example]
====
_The parameter can be of several types**:** integer, boolean, or string._ +
_Three cities are in the running to stage the next Olympics**:** Beijing, Chicago, and Melbourne._
====

A colon shouldn't be used to join two full clauses outside the uses mentioned here. +
If you are looking for the right punctuation to join two clauses that have some logical relationship, consider using a semi-colon. +
Don't use a comma for this purpose.

Vaadin uses US English in its documentation.
US usage allows a colon to be followed by a sentence beginning with a capital letter, if that sentence is the first of two or more sentences that are governed by the same colon.

[example]
====
_There may be several reasons to learn Esperanto**: I**t is completely regular, so you don't need to learn a lot of exceptions.
It isn't associated with any specific country, so has no political baggage.
Finally, it's just fun to learn._
====

However, if the colon governs only one sentence, begin the sentence with a lowercase letter:

[example]
====
_I can give you one good reason to learn Esperanto**: i**t is fun to learn._
====

[[color_blind]]
=== color-blind
Use the term _color-blind_ only in its literal sense, to refer to a person who is unable to distinguish certain colors.

=== combo box

[example.recommend]
combo box
[example.avoid]
combobox


=== command line
When it's used as a noun phrase, write _command line_.
When it's used as an adjective phrase, write _command-line_.
For example:

[example.recommend]
You can invoke the tool from the command line.
[example.recommend]
Several command-line options are available.

However, see <<command_line_interface,"command line interface">>

[[command_line_interface]]
=== command line interface
This is a common, easily recognized phrase, so it's unnecessary to hyphenate _command line_ here.

In the first reference in the document, write this as _command line interface ("CLI")_.
In subsequent occurrences, it's acceptable to write it as _CLI_.

=== command prompt
In the context of the command line interface, the _command prompt_ indicates the location where the user may enter a command.
Typical command prompts are "$ " (in Unix-like systems) and "C:\> " (in Windows-based systems).

=== consist of
This indicates that one thing is made up of one or more other things, and nothing else.
If you want to say that one thing is made up of one or more things *plus* some other things, use _include_.
For example:

[example]
====
_The course consists of six modules._ +
+++[+++In other words, there are six (and only six) modules in the course.+++]+++

_The course includes two modules on object-oriented design._ +
+++[+++In this case, the two modules on object-oriented design are a part of the course.+++]+++
====

=== config

Avoid this as an abbreviation for _configuration_.
Spell it out in full.

=== CPU

=== CSS
It's acceptable to use _CSS_, rather than write out _cascading style sheets_ in full. +
Don't use the extension _.css_ to refer to a file type.

=== cross-site request forgery
On the first mention, write this as _cross-site request forgery (CSRF)_.
On subsequent mentions, _CSRF_ is sufficient.

=== CSV
Don't use the extension _.csv_ to refer to a file type. +
Instead, use the capitalized abbreviation _CSV_. +
For example:

[example.recommend]
You can download this as a *CSV* file.
[example.avoid]
You can download this as a *.csv* file.

== D

=== data
Although _data_ is, strictly speaking, a plural Latin form, the generally accepted convention is to treat it as singular. For example:

[example]
====
_We need to ensure that the data is encrypted._ +
+++[+++Not _the data are encrypted_+++]+++
====

=== daylight saving time

=== decrement
The verb _decrement_ means to decrease an integer by a specified value.
It's the opposite of _increment_.

=== deprecate
In the context of software development, if something is _deprecated_, it means that it's *recommended* not to use this thing. +
It doesn't mean that it isn't possible to use it.

The term _deprecated_ is often used in situations where that particular thing is scheduled to become unavailable at some point in the future.

=== desire
Don't use _desire_ as a synonym for _want_. +
Instead, use _want_.

=== determinate progress bar
A _determinate progress bar_ is a progress indicator that informs the user how much of a process has been completed, and how much remains to be done.

// === DevOps
// An abbreviation of _development operations_.
// Write it as _DevOps_.

=== dialog

A _dialog_ or _dialog box_ is an element of the user interface. +
A _dialogue_ is a conversation between two people.

=== different
Use _different from_, rather than _different than_ or _different to_.

=== direction keys
Don't use the term _direction keys_. +
Instead, use _arrow keys_.

// === directory
// Use _directory_, instead of _folder_, unless there is a good reason to do otherwise. +
// One such reason might be that the tool under discussion uses the term _folder_ in its user interface.

=== distributed denial-of-service
On the first mention, write _distributed denial-of-service (DDOS)_.
On subsequent mentions, it's sufficient to write _DDOS_.

=== DNS
_DNS_ is an abbreviation of _Domain Name System_ (not _Server_), which is a protocol. +
A server that operates this system is a _DNS server_. +
A client of such a server is a _DNS client_.

=== document
Write this in full. +
Don't write _doc_.

=== dos and don'ts

// === dropdown
// Use _overlay_ rather than _dropdown_.

=== due to
Avoid using _due to_. +
Instead, use _because of_ or _as a result of_.

== E

// Rarely used
// === e-book
// === e-commerce

=== e.g.
See <<styleguide#latin-abbreviations,Latin Abbreviations>>.

=== either
Like the word _both_, the word _either_ is used in the context of two things. +
For example:

[example.recommend]
The parameter can be *either* an integer or a boolean.

It isn't correct to use _either_ where there is a choice between more than two things. For example:

[example.recommend]
The parameter can be an integer, a boolean, or a string.
[example.avoid]
The parameter can be *either* an integer, a boolean or a string.

For added emphasis, we could also say:

[example.recommend]
The parameter can be any of an integer, a boolean, or a string.

For clarity, _either_ should be placed as close as possible to the point where choice occurs. For example:

[example.recommend]
You can choose *either* to ignore the message or to fix the problem before continuing.
[example.avoid]
You can *either* choose to ignore the message or to fix the problem before continuing.

=== element
Use _element_, rather than _tag_, when referring to HTML elements.

=== email

=== end user
The noun is _end user_. The adjective phrase is _end-user_.
For example:

[example]
====
_The choice of license depends on the number of *end users*._ +
_This minimizes the level of *end-user* support that you need to provide._
====

=== enter
In the context of IT systems, _to enter_ refers to inputting a specific piece of data to the system.
For example:

[example]
====
_Enter your user ID and press [guibutton]*OK*._
====

=== Escape Key

=== etc.
This abbreviation is always terminated by a period.

Don't use _etc._ in situations where it isn't clear exactly what it means. +
For example:

[example]
====
_Always be sure to include the currency symbol, such as "$", "£", "€", **etc**._ +
+++[+++Here, it's clear that _etc._ refers to all the other possible currency symbols.+++]+++

_Check that the problem wasn't caused by a misspelt variable name, **[line-through]#etc.#**_ +
+++[+++In this case, it's unclear what other issues might have caused the problem.+++]+++
====


== F
=== F1, F2, F3, etc.


=== FAQ
_FAQ_ is an abbreviation for _frequently asked question_.
The term is sufficiently well known for it not to need explanation. +
The plural is _FAQs_.

=== fast-forward
_Fast-forward_ can be a noun, an adjective or a verb.

=== fewer
_Fewer_ (not _less_) should be used with countable nouns.
For example:

[example.recommend]
There were *fewer* problems with this version of the software.
[example.avoid]
There were *less* problems with this version of the software.

[example.recommend]
*Fewer and fewer* people use landlines these days.
[example.avoid]
*Less and less* people use landlines these days.

// === field
// Use the term _field_ in the context of databases. +
// Don't use _field_ in the context of the UI. +
// Instead, use, for example, _box_.

=== filename

If it stands alone, so to speak, "filename" is acceptable as a compound word -- but definitely not a hyphenated word (i.e., "file-name"). Generally, don't write it as two separate words. However, the term could be split and rearranged into a noun phrase: "name of the file". It can also be split if  "name" supports another adjective in a phrase: "path and file name."

=== firewall

=== floating-point
_Floating-point_ is an adjective.

=== following
_Following_ may be used with some more specific term.
For example:

[example]
====
_the *following* example_ +
_the *following* text_ +
_the *following* procedure_
====

However, it may not always be necessary to be so specific. We may use the expression _the following_ as a noun phrase on its own. For example:

[example]
====
_**The following** is an example of how to use this functionality._ +
_It may be instantiated using the default parameters, as in *the following*:_
====

=== font size

=== for example
Use _for example_ in preference to _e.g._

If you use _for example_ in the middle of a sentence, use a semi-colon if there is a possibility of doubt which part of the sentence it relates to. +
For example:

[example]
====
_US and UK spelling have some differences, *for example*, the preference for_ z _or_ s _in verbs that end in -ize._ +
+++[+++On first reading, the reader may hesitate over which part of the sentence _for example_ refers to.+++]+++

_US and UK spelling have some differences; for example, the preference for_ z _or_ s _in verbs that end in_ -ize. +
+++[+++The semi-colon makes it easier for the reader to interpret the sentence correctly on first reading.+++]+++
====

[[former]]
=== former
The word _former_ identifies the first of *two* options previously mentioned.
(_Former_ is often used in conjunction with _latter_, which indicates the *last* of two options previously mentioned.) +
It isn't correct to use _former_ in a situation where more than two options have been mentioned. +
For example:

[example]
====
_Anil spends his spare time playing squash and doing crosswords. The *former* helps him to stay fit; the *latter* keeps his brain sharp._
====

_Former_ is also used as an adjective to indicate that a person or place had a certain role in the past.
For example:

[example]
====
_Anne is a *former* systems analyst who now acts as a security consultant to the company._ +
+++[+++That is, Anne used to be a systems analyst.+++]+++

_The company has its offices in a *former* bakery._ +
+++[+++That is, the company's offices used to be a bakery.+++]+++
====

=== forward compatibility
The noun is _forward compatibility_. +
The adjective is _forward-compatible_.

=== freeze
Don't use _freeze_ to refer to a situation when a program stops responding. +
Instead, write _stops responding_.

=== frontend
The noun phrase is _frontend_. +
The adjective is _front-end_. +
For example:

[example]
====
_Processing takes place at the *frontend*._ +
_**Front-end** processing is kept to a minimum._
====

== G

// Rarely used
// === Gbps
// Abbreviation of _gigabits per second_. +
// Don't use _Gb/s_.

=== GDPR
On the first mention, use _the General Data Protection Regulation (GDPR)_. On subsequent mentions, use _the GDPR_ -- without periods.

// Rarely used
// === GIF
// Don't use the extension _.gif_ to refer to a file type.

=== gray
//

== H

=== half
In compound phrases with _half_, use a hyphen. For example:

[example]
====
_half-life_ +
_half-length_ +
_half-price_
====

=== handheld

=== hang
Don't use _hang_ to refer to a situation when a program stops responding. Instead, write _stops responding_.

// Rarely used
// === hard disk
// === hard drive

=== hard-code
The verb is _hard code_. The adjective is _hard-coded_.
// MS

=== he, she, they
It's important to avoid using gender-specific pronouns (unless there is a significant reason for doing so). +
Don't overuse _he&nbsp;/&nbsp;she_ or _he or she_, as this quickly becomes tedious.

The generally accepted approach is to use the pronoun _they_. +
For example:

[example]
====
_Each person must do what *they* think best._ +
+++[+++Not _what he or she thinks best_.+++]+++
====

However, if you can easily avoid the issue by using the plural, do so. +
For example:

====
_**People** must do what *they* think best._
====

=== hexadecimal
Write out _hexadecimal_ in full. +
Don't abbreviate it to _hex_.

=== hierarchy

=== his, her, their

=== hit
Don't use _hit_ to refer to pressing a key. +
Instead, use _press_.

=== home page

// Rarely used
// === hopefully
// Don't use _hopefully_ to mean _it's hoped that_.
// Instead, use _<the subject of the sentence> hopes to_. +
// If you must use a passive construction, write _it's hoped that_. +
// For example:

// [example.recommend]
// The company *hopes to* release the new version at the beginning of July.
// [example.recommend]
// *It's hoped that* the new version is released at the beginning of July.

// [example.avoid]
// *Hopefully*, the new version is released at the beginning of July.

=== host name
// MS

// === hyperlink
// Use _hyperlink_ in preference to _link_.

== I

=== i.e.
See <<styleguide#latin-abbreviations,Latin Abbreviations>>.

// Rarely used in our docs
// === I/O
// It's OK to write _I/O_, with no spaces. +
// If you expand it to _input&nbsp;/&nbsp;output_, insert non-breaking spaces (`\&nbsp;`) around the slash character.

=== if clauses in the future
Clauses that refer to conditions in the future use the present tense. The "result" clause uses the appropriate future form or imperative form. For example:

_If there *are* any further releases, you will receive an advisory email._ +
+++[+++Not _If there will be&hellip;._+++]+++

_Send us a message via our contact page if you *have* any problems._ +
+++[+++Not _If you will have&hellip;._]


=== if or whether
Use _if_ in clauses that express a simple conditional meaning. +
Use _whether_ in clauses that express uncertainty between two possibilities.
Sometimes, either is acceptable. +
For example:

[example]
====
_Let me know *if* you need help._ +
+++[+++This is a simple condition; that is, if the situation arises that you need help, let me know.+++]+++

_Let me know *whether* the fix works._ +
+++[+++That is, let me know which of the situations is true: does the fix work, or doesn't it work?+++]+++
====

// Conflicts with a Vale rule
// === in order to
// Use _in order to_ for clarity, especially after verbs that are followed by the infinitive (_to_) form, such as _need_, _want_, _start_. +
// For example:

// [example]
// ====
// _This the information you *[line-through]#need to use#* the components correctly._ +
// +++[+++The reader may misinterpret this on first reading.+++]+++

// _This the information you *need in order to use* the components correctly._ +
// +++[+++Slightly more verbose, but clearer.+++]+++
// ====

=== indent
_Indent_ is a verb that means to apply a greater left (and sometimes right) margin to text than that of the preceding material. The purpose of indentation is to show some distinction between one piece of text and the next.

Don't use _outdent_, as it's often unclear what exactly this means in a given situation. Look for a different way to express this idea.

=== indeterminate progress bar
An _indeterminate progress bar_ is a progress indicator in a situation where it isn't possible to determine and show how much of the process remains to run.

=== information
"Information" is an uncountable noun.
In other words, we can't talk about _[line-through]#one information#_, _[line-through]#two informations#_, etc. +
For the same reason, we can't say _[line-through]#an information#_, as this implies a quantity of one. +

If we want to talk about quantity in relation to information, there are several options:

- use an intermediary word, such as _piece_ or _bit_
- use a quantifier, such as _a lot of_, _lots of_, _some_, _a little_, etc.

=== input
Don't use _input_ as a verb. Instead, write _enter_ -- maybe _type in_.

=== internet

=== Internet of Things
On the first mention, write as _Internet of Things (IoT)_. +
On subsequent mentions, write as _IoT_.

// === insertion point
// The point on the screen where the user enters data.

=== italics
The noun is _italics_. +
The adjective is _italic_. +
The verb is _italicize_.

=== its vs. it's
Possessive adjectives have no apostrophes. Likewise, the possessive form of the word _it_ is _its_, with no apostrophe. This is logical and consistent with the other possessive adjectives (e.g., _he_ &rarr; _his_, _she_ &rarr; _her_).

_It's_ with an apostrophe is a contracted form _it is_ or _it has_, depending on the context, similar to _he's_.

== J

=== JavaScript

// Rarely used
// === JPEG
// Don't use the filename extension _.jpg_ to refer to a file type.

// Rarely used
// === justified
// Text that is _justified_ is aligned on the left and on the right.

== K

// Rarely used
// === Kbps
// Abbreviation for _kilobits per second_. +
// Don't use _kb/s_.

=== key
Don't use this as a synonym for crucial.

=== key-value pair
Use a hyphen, rather than an en-dash.

=== keypress

=== keystroke

=== keyword

=== knowledge base

== L

=== -l- or -ll-?
In US English (which is used in Vaadin documentation), if a verb ends in the letter _l_, the final _l_ isn't usually doubled when a suffix (_-ing_, _-ed_, _-er_) is added. +
The exception is when the final syllable is stressed. +
For example:

[example]
====
_cancel_, _canceling_, _canceled_ +
_travel_, _traveling_, _traveled_ +
_excel_, _excelling_, _excelled_
====

=== labeled

=== latter
See <<former,"former">>

=== layout, lay out
The noun is _layout_. +
The verb is _lay out_.

=== lead
The past simple and past participle of _lead_ is _led_. For example:

[example]
====
_This situation led to various problems._ +
_He has led the company since 2006._
====

// Rarely used
// === leverage
// Avoid using this as a verb. +
// Consider using _take advantage of_ or _make effective use of_.

=== like or as?
See <<as_or_like, as or like?>>

=== list box

=== lives

When writing about software, don't write something like, "it _lives_ there". It's not alive. Write instead "it's located there", or something similar.

=== login
The noun is _login_. +
The verb is _to log in (to)_.

=== lower
Don't use _lower_ to refer to earlier versions of software. +
Instead, use _earlier_.

== M

=== macOS
Use _macOS_, even at the beginning of a sentence.

=== mailbox

=== markup
The noun is _markup_. +
The verb is _to mark up_.

=== master&nbsp;/&nbsp;slave
Avoid this term. +
Instead, consider using _primary&nbsp;/&nbsp;subordinate_.
// MS

// Rarely used
// === matrix
// The plural is _matrices_.

// Rarely used
// === Mbps
// Abbreviation of _megabits per second_. +
// Not _Mb/s_.

=== metadata

=== method
As our documentation deals extensively with Java objects and methods, avoid using _method_ to mean _way_ or _process_.

=== MIME
It's usually unnecessary to write out this term in full. +
However, if it's required for some reason, it's _multipurpose internet mail extensions_.

=== mobile
Use _mobile_, _mobile phone_, or _mobile device_. +
Don't use _cell phone_.

=== movable
Don't use _[line-through]#moveable#_.

=== much
_Much_ is frequently used in questions and negative statements, but not usually in positive statements. +
In positive statements, use an alternative expression, such as _a lot of_, _a great deal of_, or _a large amount of_. +
For example:

[example]
====
_Is there *much* difference between version 1 and version 2?_ +
_No, there is *not much* difference between version 1 and version 2._ +
_Yes, there is *[line-through]#much#* difference between version 1 and version 2._ +
_Yes, there is *a lot of* difference between version 1 and version 2._
====

=== multifactor authentication


== N

=== N/A
Use this abbreviation of _not applicable_ in tables or other contexts where space is limited.

=== name server

=== namespace

// Rarely used
// === NAT
// Abbreviation of _network address translation_.

=== needed
Don't use _needed_ attributively (that is, before the noun phrase that it describes).
Instead, use _required_.
For example:

[example]
====
_Edit the code and make the *required* changes._ +

_Edit the code and make the *[line-through]#needed#* changes._ +
+++[+++Don't use _needed_ attributively.+++]+++

_Edit the code and make the changes that are *needed*._ +
+++[+++It's OK to use _needed_ predicatively.+++]+++
====

=== network
Write _network_ out in full. +
Don't shorten it to [line-through]#_net_#.

=== NoSQL

=== npm

=== null
In general contexts, use the term _null_ to refer to a null value.

== O

=== OAuth 2.0

=== of
Don't add _of_ to prepositions where it isn't necessary.
For example:

[example.recommend]
inside the parentheses
[example.avoid]
inside of the parentheses

[example.recommend]
off the premises
[example.avoid]
off of the premises

=== OK
Write _OK_, not _[line-through]#okay#_.

=== on-premises
Write _on-premises_ in full, not _[line-through]#on-prem#_.

=== once
Don't use _once_ to mean _after_, as it can be confusing. +
Use _after_ or _when_. +
For example:

[example.recommend]
*When* you have created the object, you need to initialize it.
[example.recommend]
*After* you have created the object, you need to initialize it.
[example.avoid]
*Once* you have created the object, you need to initialize it.

=== open source
As this is a common phrase, it's unnecessary to use a hyphen, even when it's used as an adjective phrase.

=== OS
It's unnecessary to write out this abbreviation of _operating system_ in full.

=== over
Don't use _over_ in the sense of _more than_.
Instead, use _more than_.

=== overlay


== P

=== parent-child

=== PDF
Don't use the extension _.pdf_ to refer to a file type.

=== per
Use _per_ instead of the slash character (i.e., /) to refer to a rate.
For example:

[example.recommend]
bits per second
[example.avoid]
bits/second

[example.recommend]
words per minute
[example.avoid]
words/minute

=== persist
The verb _persist_ doesn't take an object (that is, it's intransitive). +
For example:

[example.recommend]
We want *the user ID to persist* between sessions.
[example.avoid]
We want to *persist the user ID* between sessions.

=== please
Don't use _please_ in the context of instructions. +
It's unnecessary.


=== plugin

// Rarely used
// === PNG
// Don't use the file extension _.png_ to refer to a file type.

=== post
Don't use _post_ as a synonym for _after_. Instead, use _after_. It's sufficient.

=== postal code
Use _postal code_ rather than _postcode_ or the American equivalent, _zip code_.

=== practice
In US English, _practice_ can be a noun or a verb, depending on how it's used in a sentence.

=== precondition

=== press
Use the verb _press_ to refer to pressing a key or key combination on a computer keyboard. Don't use _hit_ or any other such verb in this context as connotes hostile actions.

== Q


== R

=== real time
The noun phrase is _real time_. The adjective phrase is _real-time_. For example:

[example]
====
_The data is retrieved in real time._ +
_Real-time processing takes place at the frontend._
====

=== regular expression
Don't use _[line-through]#regex#_.

=== repository
Don't use _[line-through]#repo#_.

=== respectively
The adverb _respectively_ is used in a well-defined grammatical context. +
It has the function of distributing meaning over a defined set of entities. +
For example:

[example]
====
_The research department, marketing department, and customer services department are located in San Francisco, New York, and New Orleans *respectively*._
====
Don't use _respectively_ in any other construction.

=== REST
It's unnecessary to write out this abbreviation of _representational state transfer_ in full.

=== runtime
//-

== S

=== (s), (es)
Don't append _(s)_ or _(es)_ to a singular word in order to indicate that the item in question may or may not be plural. Instead, either use the plural word only, or explicitly give both forms. +
For example:

[example.recommend]
Select the *files* that you wish to upload.
[example.recommend]
Select the *file or files* that you wish to upload.
[example.avoid]
Select the file*(s)* that you wish to upload.

[[s_or_z]]
=== -ise or -ize
In US English, the suffix _-ize_ is generally preferred over _-ise_. There are some exceptions, like _improvise_.

// Only specific to List Box documentation (including derivatives in Select, Context Menu, and Menu Bar)
// === separator
// Use _divider_ rather than _separator_.

=== server side

=== service level agreement
On the first mention, write it as _service level agreement (SLA)_. +
On subsequent mentions, write it as _SLA_.

=== setup
The noun and adjective are _setup_. +
The verb is _to set up_.

=== SHA-1

=== ship
Don't use _ship_ to refer to software releases. Instead, use _release_.

=== sign-in
The noun and adjective are _sign-in_. The verb is _to sign in (to)_ (not _to sign [line-through]#into#_).

=== smartphone
Don't use the term [line-through]#_smartphone_#. +
Instead, use _mobile_ or _mobile phone_.

=== software as a service
At the first mention, write _software as a service (SaaS)_. On subsequent mentions, _SaaS_ is enough.

=== space key

=== specification
Write _specification_ out in full. +
Don't abbreviate it to [line-through]#_spec_#.

=== ssh, SSH
`ssh`` is the terminal utility. +
_SSH_ is the associated communications protocol.

=== startup
The noun and adjective are _startup_. +
The verb is _to start up_.

=== status bar

=== stylesheet
[example.recommend]
stylesheet
[example.avoid]
style sheet

=== subclass
_Subclass_ is a noun and a verb.

=== subcomponent

=== subnet

=== sync
The verb forms are _sync_, _syncing_, _synced_.

== T

// Rarely used
// === tar
// Don't use the extension _.tar_ to refer to a file type. +
// For example:

// [example]
// ====
// _a *tar* file_
// ====

=== that
If the word _that_ is optional, include it for clarity. +
The goal, as always, is to help the reader to interpret each phrase and sentence correctly at the first reading. +
For example:

[example]
====
_&hellip; to *[line-through]#guarantee your software#* works correctly_,

_&hellip; to guarantee *that* your software works correctly_.
====

[[that_or_which]]
=== that or which?
In defining relative clauses, we can use either _that_ or _which_. +
For example:

[example]
====
_The company *that* developed the software provides excellent support._ +
or +
_The company *which* developed the software provides excellent support._
====

However, in non-defining relative clauses, we can't use _that_. +
For example:

[example]
====
_I emailed technical support at BrilSoft, which developed the software._ +
+++[+++Not _&hellip; at BrilSoft, that developed the software_.+++]+++
====


=== their or they're?
Because the pronunciation of _their_ and _they're_ is identical, it's easy to write the wrong form. +
This error is less likely to happen in our technical documentation, as we have made the decision not to use contracted forms. +
In general, the form _they're_ shouldn't be used in our technical documentation.


=== time frame
Use _time frame_ rather than _timeframe_.

=== time out
The verb is _time out_. +
The noun and adjective are _time-out_.
// TODO but in software development timeout is a common term?

=== time stamp
The noun is _time stamp_. +
The adjective and verb are _time-stamp_.
// TODO but in software development timestamp is a common term?

=== time zone
If a time zone has an unambiguous name, write it out in full, capitalized on the first use. +
Use _Coordinated Universal Time (UTC)_ rather than _Greenwich Mean Time (GMT)_. +
For example:

[example]
====
_The first backup was set to run at 09&ratio;00 *Coordinated Universal Time (UTC)*._ +
_The second backup was set to run at 23&ratio;00 *UTC*._
====

If the time zone doesn't have a name, or to guard against misunderstanding, use the form _UTC-n_ or _UTC+n_. +
For example:

[example]
====
_The videoconference is scheduled for 14&ratio;30 *UTC-7*._ +
_The system went down at 21&ratio;43 *UTC+9*._
====

=== toolkit

=== touchscreen

=== trailing
Use _trailing_ to refer to characters that occur at the end of a string. +
The opposite of _trailing_ is _leading_.

=== trojan
Use _trojan_ or _trojan horse_.

== U

// Rarely used
// === United Kingdom
// Use _the United Kingdom_ or _the UK_ to refer to the sovereign state. +
// Don't use _Great Britain_, _Britain_, or _England_ in this sense.

=== unique
Something is either unique or it isn't.
There can be no degrees of uniqueness. +
Hence, avoid using such expressions as _very unique_ or _rather unique_.

=== unzip
Don't use _unzip_. +
Instead, use _extract_.

=== uppercase

=== URL
Uniform Resource Locator is abbreviated as URL. It shouldn't be written out like it is here. It also shouldn't include periods (i.e., U.R.L.). The plural is written _URLs_.

=== US
Don't use _U.S._

=== username

=== UTF
_UTF-8_, _UTF-16_, _UTF-32_.

=== utilize
Avoid the word _utilize_. Use instead the word, _use_.

== V

// This is not what we or anyone else is actually doing (i.e. "v1.2.3" or "V24")
// === v.
// Use _v._ as the abbreviation for _version_. +
// For example:

// [example]
// ====
// Atom v. 1.57.0
// ====

// However, the exception is Vaadin's own software, since historically a capital _V_ is used in this context. +
// For example:

// [example]
// ====
// _Vaadin 21_ +
// _This was introduced in *V 20*._
// ====

// Rarely used
// === via
// Avoid using _via_.

=== vice versa
Avoid using _vice versa_, as it's often unclear exactly what is meant. +
Use more-specific language.

// Rarely used
// === videoconference
// === voicemail

=== vs
Write _versus_ in full, or abbreviate it to _vs_ without a final period. +
Avoid using _versus_ in the sense of _compared with_ or _as opposed to_.

== W

=== W3C

// Seems irrelevant for Vaadin/Hilla docs
// === was or were?
// In English, the subjunctive mood has largely fallen out of use. +
// However, it still exists in certain set constructions. +
// For example:

// [example]
// ====
// _If I *were* you&hellip;_ +
// +++[+++Not _If I was you&hellip;_.]
// ====

// In other constructions, using a subjunctive form is generally optional. +
// For example:

// [example]
// ====
// _If he *were* here, he could explain it to you._ +
// _If he *was* here, he could explain it to you._ +
// +++[+++Both of these are acceptable.+++]+++

// _It's necessary that you *be* here._ +
// _It's necessary that you *are* here._ +
// +++[+++Both of these are acceptable.+++]+++

// _It's important that she *have* experience._ +
// _It's important that she *has* experience._ +
// +++[+++Both of these are acceptable.+++]+++
// ====

// In some cases, you can avoid the issue by using alternative forms. +
// For example:

// [example]
// ====
// _It's necessary *for you to be* here._ +
// _It's important that she *should have* experience._
// ====

=== web
Use _web_ when referring to the World Wide Web.

=== web-based

=== webpage

=== website

// Rarely used
// === well-being

=== which or that?
See <<that_or_which,"that" or "which"?>>

=== while
Use _while_ in expressions of time. +
Don't use _while_ as a synonym for _although_ or _whereas_. +
For example:

[example.recommend]
*Although* it's possible to write code using an ordinary text editor, using an IDE has significant advantages.
[example.avoid]
*While* it's possible to write code using an ordinary text editor, using an IDE has significant advantages.

[example.recommend]
The previous version was written in C++, *whereas* the current version is Java-based.
[example.avoid]
The previous version was written in C++, *while* the current version is Java-based.

=== white paper

=== who or that?
Use _who_, rather than [line-through]#_that_#, in relative clauses that refer to people.
For example:

[example.recommend]
Users *who* require training.
[example.avoid]
Users *that* require training.

=== whom
In general, try to avoid using _whom_.
It can sound pretentious.

However, it's sometimes difficult to avoid elegantly. +
For example:

[example.recommend]
*Who* were you talking to?
[example.avoid]
*To whom* were you talking?

Sometimes it's preferable to use _whom_ to avoid an awkward sentence.
For example:

[example.recommend]
This is the customer *for whom* we selected the appropriate product, rewrote the core module, and delivered training to the sales and marketing staff.
[example.avoid]
This is the customer *who* we selected the appropriate product, rewrote the core module, and delivered training to the sales and marketing staff *for*.

=== whose or who's?
Although these two words sound exactly the same, they have completely different meanings.

_Whose_ means _of whom_ or _of which_. +
For example:

[example]
====
_This is the user *whose* account was blocked._ +
+++[+++That is, the user _of whom_ the account was blocked.+++]+++

_This is the server *whose* hard disk failed._
====

_Who&apos;s_ is a contraction of _who is_ or _who has_. +

=== Wi-Fi

=== wildcard


=== will
Try to avoid using the future form _will_ unless you really are talking about the future. +
A common case is when talking about the behavior of software. +
For example:

[example.recommend]
Press [guibutton]*OK*. A new dialog *opens*.
[example.avoid]
Press [guibutton]*OK*. A new dialog *will open*.

[example.recommend]
If there is no authenticated user, the method *returns* null.
[example.avoid]
If there is no authenticated user, the method *will return* null.

See also: <<styleguide#present-tense, Present Tense>>.

=== wireframe

=== workspace

=== workstation

== X
=== x-axis

=== x-coordinate

== Y
=== y-axis

=== y-coordinate

=== YAML
Don't use the extension _.yaml_ to refer to a file type.

== Z

=== z-axis

=== z-coordinate

=== zero
The plural of _zero_ is _zeros_.

=== zip
Don't use the extension _.zip_ to refer to a file type.


[discussion-id]`ECF2A383-1FCE-4659-9697-480EA3A257AF`


pass:[<!-- vale Vaadin.Abbr = YES -->]
pass:[<!-- vale Vaadin.Contractions = YES -->]
pass:[<!-- vale Vaadin.EN_US = YES -->]
pass:[<!-- vale Vaadin.FirstPerson = YES -->]
pass:[<!-- vale Vaadin.HeadingCase = YES -->]
pass:[<!-- vale Vaadin.HeadingPunctuation = YES -->]
pass:[<!-- vale Vaadin.JustSimply = YES -->]
pass:[<!-- vale Vaadin.Periods = YES -->]
pass:[<!-- vale Vaadin.Please = YES -->]
pass:[<!-- vale Vale.Spelling = YES -->]
pass:[<!-- vale Vaadin.ThereIs = YES -->]
pass:[<!-- vale Vaadin.TooWordy = YES -->]
pass:[<!-- vale Vaadin.Terms = YES -->]
pass:[<!-- vale Vaadin.We = YES -->]
pass:[<!-- vale Vaadin.Will = YES -->]
pass:[<!-- vale Vaadin.Wordiness = YES -->]
