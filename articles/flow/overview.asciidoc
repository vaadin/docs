---
title: Overview
order: 1
layout: page
---

= Vaadin Framework

Vaadin is a Java web framework for building modern web apps and websites.
You can create UIs in Java, or use HTML templates to create the UI, and then bind it to any backend using Java.

Vaadin features:

* An architecture that lets you concentrate on the UI.
No need to think about client-server communication.
* A set of carefully crafted UI components that focus on both the end-user and developer experience.
* Powerful abstraction layers to build your own reusable UI components with either Java or HTML templates.
* Data binding API to connect UI components to any backend using type-safe Java.
* Router API to create hierarchical page structures for the user to navigate.

The Vaadin documentation is arranged in the following sections and we recommend reading it in this order.

== Introduction
* <<introduction/introduction-overview#,Introduction to Vaadin Flow>>
* <<introduction/introduction-concepts#,Core Concepts>>
* <<introduction/introduction-compatibility#,Compatibility and Versioning>>
* https://vaadin.com/tutorials/getting-started-with-flow[Getting started with Vaadin Flow]

== Installing Development Tools
* <<installing/installing-overview#,Overview>>
* <<installing/installing-toolchain#,Working with a Toolchain>>

== Development Workflow
** <<workflow/workflow-overview#,Workflow Overview>>
** <<workflow/setup-live-reload-springboot#, Setting Up Live Reload Using Spring Boot>>
** <<workflow/setup-live-reload-jrebel#, Setting Up Live Reload Using JRebel>>
** <<workflow/setup-live-reload-hotswap-agent#, Setting Up Live Reload Using HotswapAgent>>
** <<workflow/tutorial-jetty-scaninterval#, Automatic Restart with Jetty Maven Plugin>>
** <<workflow/tutorial-cdi-reloadonupdate#, Automatic Restart with TomEE Maven Plugin>>
** <<workflow/run-on-server-intellij#,Run on Server in IntelliJ IDEA Ultimate>>

== Router and Navigation
* <<routing/tutorial-routing-on-client-side-and-server-side#,Routing on Client Side and Server Side>>
* <<routing/tutorial-routing-annotation#,Defining Routes with @Route>>
* <<routing/tutorial-routing-lifecycle#,Navigation Lifecycle>>
* <<routing/tutorial-router-layout#,Router Layouts and Nested Router Targets>>
* <<routing/tutorial-router-url-parameters#,URL Parameters for Navigation Targets>>
* <<routing/tutorial-routing-url-generation#,URL generation>>
* <<routing/tutorial-routing-navigation#,Navigating Between Routes>>
* <<routing/tutorial-routing-page-titles#,Updating Page Title on Navigation>>
* <<routing/tutorial-routing-exception-handling#,Router Exception Handling>>
* <<routing/tutorial-routing-get-registered-routes#,Getting Registered Routes>>
* <<routing/tutorial-router-dynamic-routes#,Dynamic Route Registration>>

== Using Vaadin Components
* <<components/tutorial-flow-components-setup#,Using Vaadin Components>>
* <<components/tutorial-component-basic-features#,Component Basic Features>>
* <<components/tutorial-enabled-state#, Component Enabled State>>
* <<components/tutorial-flow-grid#,Grid>>
* <<components/tutorial-flow-icon#,Using Icons>>

== Binding Data to Components
* <<binding-data/tutorial-flow-components-binder#,Binder overview>>
* <<binding-data/tutorial-flow-components-binder-validation#,Validating and Converting User Input>>
* <<binding-data/tutorial-flow-components-binder-load#,Loading from and Saving to Business Objects>>
* <<binding-data/tutorial-flow-components-binder-beans#,Binding Beans to Forms>>
* <<binding-data/tutorial-flow-data-provider#,Showing a list of data with Data Providers>>

== Importing JavaScript
* <<importing-dependencies/tutorial-importing#,Importing JavaScript>>

== Creating Components
* <<creating-components/tutorial-component-basic#,Creating A Simple Component Using the Element API>>
* <<creating-components/tutorial-component-many-elements#,Creating a Component Based on Many Elements>>
* <<creating-components/tutorial-component-property-descriptor#,Using API Helpers for Defining Component Properties>>
* <<creating-components/tutorial-component-composite#,Creating a Component Using Existing Components>>
* <<creating-components/tutorial-component-events#,Using Events with Components>>
* <<creating-components/tutorial-component-container#,Creating a Component Which Can Contain Other Components>>
* <<creating-components/tutorial-component-lifecycle-callbacks#,Component Lifecycle Callbacks>>

== Manipulating DOM with Element API
* <<element-api/tutorial-properties-attributes#,Element Properties and Attributes>>
* <<element-api/tutorial-event-listener#,Listening to User Events>>
* <<element-api/tutorial-user-input#,Retrieving User Input>>
* <<element-api/tutorial-dynamic-styling#,Dynamic styling>>
* <<element-api/tutorial-shadow-root#,Shadow root in server-side Element>>

== Drag and Drop
* <<dnd/generic-dnd#,Generic Drag and Drop>>
* <<dnd/drag-source#,Making Any Component Draggable>>
* <<dnd/drop-target#,Creating a Drop Target>>

== Integrating Web Components
* <<web-components/integrating-a-web-component#,Integrating a Web Component>>
* <<web-components/creating-java-api-for-a-web-component#,Creating Java API for a Web Component>>
* <<web-components/debugging-a-web-component-integration#,Debugging a Web Component Integration>>
* <<web-components/creating-another-type-of-addon#,Creating Another type of Add-on>>
* <<web-components/creating-an-in-project-web-component#,Creating an In-project Web Component>>
* <<web-components/introduction-to-webcomponents#,Introduction to Web Components>>

== Building Views with Templates
* <<polymer-templates/tutorial-template-intro#,Using Templates from Server-side Java Code>>
* <<polymer-templates/tutorial-template-basic#,Creating A Simple Component Using the Template API>>
* <<polymer-templates/tutorial-template-components#,Binding Template Components>>
* <<polymer-templates/tutorial-template-and-binder#,Combining Templates and Binders>>
* <<polymer-templates/tutorial-template-subtemplate#,Using sub-templates>>
* <<polymer-templates/tutorial-template-components-in-slot#,Dynamically Adding Server-side Components to Templates>>
* <<polymer-templates/styling-polymer-templates#,Styling Templates>>
* <<polymer-templates/tutorial-component-integration#,Detecting Component Mappings>>
* <<polymer-templates/tutorial-template-mapped-components-limitations#,Mapped Components Limitations>>
* <<polymer-templates/tutorial-polymer-template-basic#,PolymerTemplate, Creating a Simple Component Using the Template API>>
* <<polymer-templates/tutorial-polymer-template-and-binder#,PolymerTemplate, Combining Templates and Binders>>
* <<polymer-templates/tutorial-polymer-template-components-in-slot#,PolymerTemplate, Dynamically Adding Server-side Components to Templates>>
* <<polymer-templates/tutorial-styling-polymer-templates#,PolymerTemplate, Styling Templates>>
* <<polymer-templates/tutorial-template-event-handlers#,PolymerTemplate, Handling User Events>>
* <<polymer-templates/tutorial-template-bindings#,PolymerTemplate, Binding Model Data>>
* <<polymer-templates/tutorial-template-model-bean#,PolymerTemplate, Using Model Beans>>
* <<polymer-templates/tutorial-template-model-encoders#,PolymerTemplate, Using Model Encoders>>
* <<polymer-templates/tutorial-template-list-bindings#,PolymerTemplate, Creating Contents Dynamically Based on Items List>>
* <<polymer-templates/tutorial-template-parent-layout#,PolymerTemplate, Using Parent Layout>>

== Creating UI in TypeScript
* <<typescript/quick-start-guide#, Quick Start Guide>>
* <<typescript/starting-the-app#, Starting the Application in TypeScript>>
* <<typescript/creating-routes#, Creating Routes in TypeScript>>
* <<typescript/accessing-backend#, Accessing Java Backend in TypeScript>>
* <<typescript/main-layout#, Main Layout in TypeScript>>
* <<typescript/client-exceptions#, Client Side Exceptions>>
* <<typescript/configuring-security#, Configuring Security for TypeScript Views>>
* <<typescript/adding-login-form-with-spring-security#, Adding a Login Form with Spring Security>>
* <<typescript/check-user-login#, Checking Authentication>>
* <<typescript/intro-to-typescript-in-v15#, Appendix: Intro to TypeScript in Vaadin 15>>
* <<typescript/type-conversion#, Appendix: Type Conversion between Java and TypeScript>>
* <<typescript/custom-serialization#, Appendix: Customizing Serialization>>
* <<typescript/typescript-endpoints-generator#, Appendix: TypeScript Endpoints Generator>>
* <<typescript/typescript-client#, Appendix: TypeScript Client>>
* <<typescript/client-middleware#, Appendix: Client Middleware>>
* <<typescript/endpoint-methods-validation#, Appendix: Endpoint Methods Validation>>
* <<typescript/typescript-endpoints-urls#, Appendix: Endpoint URLs>>

== Client-Side Form Binding
* <<client-side-forms/tutorial-binder#, Binding Data to Client-Side Forms>>
* <<client-side-forms/tutorial-binder-load#, Loading From and Saving To Business Objects>>
* <<client-side-forms/tutorial-binder-validation#, Validating User Input>>
* <<client-side-forms/tutorial-form-status-tracking#, Reacting to Form State Changes>>
* <<client-side-forms/tutorial-binding-arrays#, Binding Arrays>>
* <<client-side-forms/appendix-client-side-form-binding-reference#, Appendix: Client-Side Form Binding Reference>>
* <<client-side-forms/appendix-vaadin-components#, Appendix: Binding Data to Vaadin Components>>
* <<client-side-forms/appendix-web-component-field-strategy#, Appendix: Using a Custom Web Component Field>>

== Using Vaadin with Spring
* <<spring/tutorial-spring-basic#,Use Vaadin with Spring>>
* <<spring/tutorial-spring-basic-mvc#,Use Vaadin with Spring MVC>>
* <<spring/tutorial-spring-routing#,Routing with Spring>>
* <<spring/tutorial-spring-scopes#,Vaadin Spring Scopes>>
* <<spring/tutorial-spring-configuration#,Vaadin Spring Configuration>>
* <<spring/tutorial-spring-examples#,Getting Started with Spring and Vaadin>>

== Using Vaadin with CDI
* <<cdi/tutorial-cdi-basic#,Use Vaadin with CDI>>
* <<cdi/tutorial-cdi-instantiated-beans#,Components instantiated by the framework>>
* <<cdi/tutorial-cdi-contexts#,Vaadin CDI contexts>>
* <<cdi/tutorial-cdi-events#,Observable Vaadin events>>
* <<cdi/tutorial-cdi-service-beans#,Vaadin service interfaces as a CDI bean>>
* <<cdi/tutorial-cdi-examples#,Getting Started with CDI and Vaadin>>

== Vaadin Portlet Support
* <<portlet-support/portlet-01-overview#,Vaadin Portlet Support Overview>>
* <<portlet-support/portlet-02-creating-vaadin-portlets#,Creating Vaadin Portlets>>
* <<portlet-support/portlet-03-handling-portlet-phases#,Handling Portlet Phases>>
* <<portlet-support/portlet-04-inter-portlet-communication#,Inter-portlet Communication>>
* <<portlet-support/portlet-05-creating-multi-module-portlet-project#,Creating Multi-Module Portlet Project>>
* <<portlet-support/portlet-06-adding-portlet-module#,Adding a Vaadin Portlet Module to an Existing Maven Multi-Module Project>>
* <<portlet-support/portlet-07-cdi-support#,Vaadin Portlet CDI Support>>
* <<portlet-support/portlet-demo-01-address-book#,Demonstration: Address Book>>

== Deploying Vaadin Applications
* <<production/tutorial-production-mode-basic#,Taking your Application into Production>>
* <<production/tutorial-jetty#,Deploying to Jetty>>
* <<production/tutorial-production-mode-advanced#,Advanced production mode topics>>

== Embedding Flow Applications
* <<embedding-flow-applications/tutorial-webcomponent-intro#,Embedding Introduction>>
* <<embedding-flow-applications/tutorial-webcomponent-properties#,Properties of Embedded Web Components>>
* <<embedding-flow-applications/tutorial-webcomponent-theming#,Theming an Embedded Application>>
* <<embedding-flow-applications/tutorial-webcomponent-push#,Embedded Application Push Configuration>>
* <<embedding-flow-applications/tutorial-webcomponent-security#,Securing an Embedded Application>>
* <<embedding-flow-applications/tutorial-webcomponent-exporter#,Embedding a Vaadin Application>>
* <<embedding-flow-applications/tutorial-webcomponent-preserveonrefresh#,Preserving Contents of Embedded Applications on Refresh>>
* <<embedding-flow-applications/tutorial-webcomponent-limitations#,Limitations in Embedded Application>>

== Progressive Web Applications (PWA)
* <<pwa/tutorial-pwa-introduction#,Introduction>>
* <<pwa/tutorial-pwa-pwa-with-flow#,Creating PWA with Flow>>
* <<pwa/tutorial-pwa-icons#,Application Icons>>
* <<pwa/tutorial-pwa-web-app-manifest#,Web App Manifest>>
* <<pwa/tutorial-pwa-service-worker#,Service Worker>>
* <<pwa/tutorial-pwa-offline#,Offline experience>>

== Migrating from Vaadin 8 to Vaadin platform
* <<migration/1-migrating-v8-v10#,Migrating from Vaadin 8 to Vaadin platform>>
* <<migration/2-migration-strategies#,Migration Strategies>>
* <<migration/3-general-differences#,Differences between Vaadin platform and Vaadin 8 Applications>>
* <<migration/4-routing-navigation#,Routing and Navigation>>
* <<migration/5-components#,Components in Vaadin platform>>
** <<migration/5-components#components,Component Set>>
** <<migration/5-components#basic-features,Basic Component Features>>
** <<migration/5-components#layouts,Layouts in Vaadin platform>>
* <<migration/6-theming#,Themes and Theming Applications>>
* <<migration/7-tools-integrations#,Add-ons, Integrations and Tools>>

== Advanced Topics
* <<advanced/tutorial-application-lifecycle#,Application Lifecycle>>
* <<advanced/tutorial-i18n-localization#,Application Localization (I18N)>>
* <<advanced/tutorial-modifying-the-bootstrap-page#,Modifying the Bootstrap Page>>
* <<advanced/tutorial-flow-runtime-configuration#,Flow runtime configuration>>
* <<advanced/tutorial-loading-indicator#,Customizing the Loading Indicator>>
* <<advanced/tutorial-push-configuration#,Server Push Configuration>>
* <<advanced/tutorial-push-access#,Asynchronous Updates>>
* <<advanced/tutorial-push-broadcaster#,Creating Collaborative Views>>
* <<advanced/tutorial-dependency-filter#,Modifying how dependencies are loaded with DependencyFilters>>
* <<advanced/tutorial-service-init-listener#,Configure RequestHandlers, IndexHtmlRequestListeners and DependencyFilters using VaadinServiceInitListener>>
* <<advanced/tutorial-dynamic-content#,Showing Dynamic Content>>
* <<advanced/tutorial-history-api#,History API>>
* <<advanced/tutorial-stream-resources#,Using stream resources>>
* <<advanced/tutorial-ui-init-listener#,UIInitListener>>
* <<advanced/tutorial-preserving-state-on-refresh#,Preserving view state between browser refreshes>>
* <<advanced/tutorial-switch-npm-pnpm#,Differences between pnpm and npm>>
