---
title: Overview
order: 10
layout: page
---

= Styling

Vaadin uses https://developer.mozilla.org/en-US/docs/Web/CSS[Cascading Style Sheets] (CSS) to separate the user interfaceâ€™s appearance from its logic.

.Use themes to organize your styles
[TIP]
Themes, which are a feature of Vaadin <<{articles}/ds/overview#, Design System>>, are the standard way to organize styles in a Vaadin application.
The documentation here is supplementary to themes.


== Prerequisites

To style components and your application you should be comfortable writing CSS. The https://developer.mozilla.org/en-US/docs/Learn/CSS[CSS tutorials on MDN Web Docs] are a great way to learn the basics of CSS.

== Styling Views and Custom Components

Views and custom components, extending from `Component`, are rendered in the global style scope.
You can apply traditional CSS styling techniques for them.

The most common technique is to add CSS classes to the components in the view and target those classes in your style sheets.
See <<importing-style-sheets#,Importing Style Sheets>> for details about the `@CssImport` annotation.

.`MyView.java`
[source, Java]
----
@CssImport("./styles/my-view.css")
public class MyView extends VerticalLayout {
  public MyView() {
    addClassName("my-view");

    H1 heading = new H1("My View Title");
    heading.addClassName("heading");

    Paragraph text = new Paragraph("Thanks for stopping by. Not much to see here. Click the button below to go back to start.");

    Button backButton = new Button("Go Back");
    backButton.addClassName("back-button");

    add(heading, text, backButton);
  }
}
----

.`styles/my-view.css`
[source, CSS]
----
.heading {
  margin-top: 0;
}

p {
  /* Assuming we are using the Lumo theme. If not, fall back to 1.2em */
  font-size: var(--lumo-font-size-l, 1.2em);
}

.back-button {
  background-color: var(--lumo-shade-90pct);
}
----


== Styling Templates

See <<../templates/styling-templates#,Styling Templates>>.


== Using Images

Static images, which need to be accessible by the browser, should be placed in the [filename]#/src/main/webapp/# folder.
For _Spring Boot -based projects_ use [filename]#/src/main/resources/META-INF/resources/#.

See <<../advanced/loading-resources#,Loading Resources>> for more information about how static resources are handled.

[source, Java]
----
Image image = new Image("context://my-image.png", "Alternative text");
----

== Using Icons

In general, icons are not different from images, as they show a graphic on the page.
For bitmap-based icons (JPG, PNG, WebP, etc.), follow the above instructions for using images.

Since icons have requirements on top of images, such as the need to be able to change their size and color using CSS, they are often created using the SVG vector format and embedded directly inside the resulting HTML, instead of being referenced via CSS `background-image: url(icon.svg)` or HTML `<img src="icon.svg">`.

Vaadin has a component specifically for showing SVG icons.
Vaadin offers a large <<{articles}/ds/foundation/icons/vaadin#,collection of icons>> for you to use (with both SVG and font formats).

.Prefer SVG icons over font icons
[NOTE]
SVG icons are considered as the best practice.
Font icons have some https://cloudfour.com/thinks/seriously-dont-use-icon-fonts/[well documented caveats] with screen reader usage.

Use the [classname]#Icon# component.
There are two ways to create an icon from the Vaadin Icons collection.

The Icon component can be used in all the same places as any other component.
Some components, such as Button, have API specifically for using icons.

[source, Java]
----
Icon edit = new Icon(VaadinIcon.EDIT);
Icon close = VaadinIcon.CLOSE.create();
----

The Lumo theme has its own set of icons (see <<{articles}/ds/foundation/icons#,Lumo Icons>>), which you can also use.

[source, Java]
----
Icon icon = new Icon("lumo", "clock");
----
