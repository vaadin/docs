---
title: Importing Style Sheets
order: 30
layout: page
---

= Importing Style Sheets
ifdef::web[]
endif::web[]

Import additional style sheets to customize component themes and style application views.

ifdef::web[]
endif::web[]

== Prerequisites

You should be familiar with <<style-scopes#,Style Scopes>>, to know whether you need to import a style sheet to the global scope or to a component scope.

To learn how static resources are handled, including where CSS files should be placed in your project, see <<../flow/importing-dependencies/tutorial-ways-of-importing#,Storing and Loading Resources>>.


== Example

[.example]
--
In server-side views (Java), use the https://vaadin.com/api/platform/com/vaadin/flow/component/dependency/CssImport.html[`@CssImport`] annotation to import local/bundled style sheets and the `@StyleSheet` annotation to import external/linked style sheets.
The `@CssImport` annotation can also be used to import component-specific style sheets.

[source, java]
----
include::src/main/java/com/vaadin/flow/tutorial/theme/ImportingStyleSheets.java[tags=cssimport;cssimport-themefor;stylesheet;app-class, indent=0, group=Java]
----

In client-side views (JavaScript), you need to write style sheets as JavaScript modules.
You can only import local/bundled, component-specific style sheets using this method.

[source, javascript]
----
include::src/main/js/ImportStyleSheets.js[tags=import-register-styles-function;import-css-function;register-styles, indent=0, group=JavaScript]
----

In HTML templates, use the standard `<link rel="stylesheet">` and `<style>` elements.

[source, html]
----
include::src/main/html/ImportStyleSheets.html[tags=stylesheets;inline-stylesheet, indent=0, group=HTML]
----
--


== Global Styles

There are two ways to import style sheets to the global scope:

 . Local/bundled style sheets, which are loaded with the application’s frontend bundle, together with all JavaScript.
 . External/linked style sheets, which are not bundled with the application’s frontend bundle but loaded and cached separately by the browser.

[[global-bundled]]
=== Local Style Sheets

Local/bundled style sheets are inlined to the application bundle during a production build, together with other client-side resources.
Bundling is recommended for styles that change together with the application logic or component implementations, as the browser can cache them as a single unit made of closely related resources.

[.example]
--
In server-side views (Java), the https://vaadin.com/api/platform/com/vaadin/flow/component/dependency/CssImport.html[`@CssImport`] annotation will handle all the boilerplate for you, you only need to reference a regular CSS file.

[CAUTION]
The [classname]#@CssImport# annotation does not work in Vaadin 14 compatibility mode (Bower and HTML imports).

[source, java]
----
include::src/main/java/com/vaadin/flow/tutorial/theme/ImportingStyleSheets.java[tags=cssimport;app-class, indent=0, group=Java]
----

When importing style sheets in client-side views, you need to take polyfilled browsers into consideration – namely Internet Explorer 11.
Those browsers do not have native style encapsulation via shadow DOM and require that styles are scoped (using CSS selectors) manually or via polyfills.

One way to scope global styles and prevent them from affecting Polymer-based components in polyfilled browsers is to use the `<custom-style>` element from the Polymer library.

ifdef::web[]
See the https://polymer-library.polymer-project.org/3.0/api/elements/custom-style[API documentation for `<custom-style>`]
endif::web[]

[source, html]
----
include::src/main/html/ImportStyleSheets.html[tags=style-scoping, indent=0, group=HTML]
----
--


[[global-linked]]
=== External Style Sheets

External/linked style sheets can be used to import styles without inlining the contents to the application bundle.
This allows the browser to load and cache the style sheet separately from the rest of the application.

External style sheets need to be accessible from a URL, and therefore need to be placed in the public resource folder in your web application.
They can also come from outside your web application, for example from a different domain or a Content Delivery Network (CDN).

[.example]
--
In server-side views (Java), the [classname]#@StyleSheet# annotation can be used to import style sheets from an external URL, or from a URL within your application. The latter type of URLs are prefixed with `context://`, which points to the root of the public resources folder of your application.

[source, java]
----
include::src/main/java/com/vaadin/flow/tutorial/theme/ImportingStyleSheets.java[tags=stylesheet;app-class, indent=0, group=Java]
----

In client-side templates (HTML), use the standard `<link rel="stylesheet">` element to import external style sheets.

[source, html]
----
include::src/main/html/ImportStyleSheets.html[tags=stylesheets, indent=0, group=HTML]
----
--

[CAUTION]
The CSS rules in external style sheets are not protected from overriding component-specific styles in browsers without native style encapsulation (shadow DOM) – namely Internet Explorer 11.
Use local style sheets in cases where this might be an issue, for example when including CSS which is not maintained by you.


== Component Styles

These instructions apply to components that use https://github.com/vaadin/vaadin-themable-mixin/[`ThemableMixin`], including all Vaadin components.

Component styles are scoped per component and allow you to customize components without worrying about side-effects to other parts of your application.
Component styles are always inlined to the application bundle – they can’t be external/linked style sheets.

Component-scoped style sheets *apply to all instances of the component* across the entire application.

[.example]
--

In server-side views, use the [classname]#@CssImport# annotation.
Refer to a `.css` file and specify the tag/element name of the component you wish to apply the style sheet to.

[source, java]
----
include::src/main/java/com/vaadin/flow/tutorial/theme/ImportingStyleSheets.java[tags=cssimport-themefor, indent=0, group=Java]
----

In client-side views, use the [methodname]#registerStyles# function.
Specify the tag/element name of the component and provide string of CSS that you wish to apply to the component.

You *need to call `registerStyles` before the component it targets* is registered and upgraded by the browser. In other words, before the first instantiation of the component.

[source, javascript]
----
include::src/main/js/ImportStyleSheets.js[tags=import-register-styles-function;import-css-function;register-styles, indent=0, group=JavaScript]
----
--

You can use the same style sheet for multiple components simultaneously by providing a space-separated list of component names instead of a single component name. Wildcard element names are supported as well, for example, `vaadin-*-overlay`.

[.example]
--
[source, java]
----
include::src/main/java/com/vaadin/flow/tutorial/theme/ImportingStyleSheets.java[tags=cssimport-themefor-multiple, indent=0, group=Java]
----

[source, javascript]
----
include::src/main/js/ImportStyleSheets.js[tags=register-styles-multiple, indent=0, group=JavaScript]
----
--
