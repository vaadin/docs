---
title: Overview
order: 1
---

= Data Binding

Vaadin Flow includes mechanisms to bind field components as well as forms consisting of fields directly to business objects, such as Java beans.
Binding is buffered, so you can load and reload data from the source to fields, and then save the edited data back.

[.example]
--
In this example we have a view with two editors, one writable, one read-only.
When the user clicks *Save*, the form data is written to the *BusinessPerson* object, which is reflected in the read-only form.

[source, java]
----
include::{root}/src/main/java/com/vaadin/demo/flow/binding/DataBinding.java[render, tags=snippet, indent=0, group=Java]
----

[source, java]
----
include::{root}/src/main/java/com/vaadin/demo/flow/binding/PersonEditor.java[tags=snippet, indent=0, group=Java]
----

[source, java]
----
include::{root}/src/main/java/com/vaadin/demo/flow/binding/BusinessPerson.java[tags=snippet, indent=0, group=Java]
----

[source, typescript]
----
include::{root}/frontend/demo/flow/binding/binding-overview.ts[hidden, tags=snippet,indent=0, group=TypeScript]
----
--

Field and form input can be validated before saving.
Further, when loading and saving, data representation may need to be converted between the field type and the underlying data types in the business objects.

== Overview

<<components-binder#, Binding Data to Forms>>::
How to bind data to forms, which are composites with multiple fields that each bind to sub-structures in data.

<<components-binder-validation#, Validating and Converting User Input>>::
Like individual fields, forms with multiple fields can be validated before saving the input to the bound business objects.

<<components-binder-load#, Loading From and Saving To Business Objects>>::
Form state is loaded from business objects, and can be saved, normally after validation.

<<components-binder-beans#, Binding Beans to Forms>>::
Beans are the standard Java model for business objects.
This article describes how they are bound to forms.

<<field#, Creating a Field Component>>::
How to create a field component.
The defining feature of field components is that they can have a value.
Binder requires that for a component to be bound.

<<data-provider#, Binding Items to Components>>::
Selection components allow selecting a field value from a number of items.
This article describes how they are bound and displayed in such components.
