---
title: Routing and Navigation
description: |
  Vaadin applications consist of one or more views and routing defines how URL addresses are mapped to those views.
  Navigating around the application works together with routing.
order: 30
---

= Routing and Navigation

Vaadin provides the [classname]#Router# class to structure the navigation of your web application into logical parts.

The router takes care of serving content when the user navigates within an application.
It includes support for nested routes, access to route parameters and more.

The user navigates by interacting with UI elements such as buttons and menus.
When this occurs, the interaction needs to be mapped to a particular route.

== Using the @Route Annotation

You can use the [classname]#@Route# annotation to define any component as a route target for a given URL fragment.

*Example*: Defining the `HelloWorld` component as the default route target (empty route) for your application.

[source,java]
----
@Route("")
public class HelloWorld extends Div {
    public HelloWorld() {
        setText("Hello world");
    }
}
----

*Example*: Defining the `SomePathComponent` component as the target for the specific route `some/path`.

[source,java]
----
@Route("some/path")
public class SomePathComponent extends Div {
    public SomePathComponent() {
        setText("Hello @Route!");
    }
}
----

When the user navigates to `\http://example.com/some/path`, the component `SomePathComponent` is shown on the page.
This assumes that your application is running from the root context.
The user may navigate by clicking a link in the application or entering an address in the address bar.

If you omit the [classname]#@Route# annotation parameter, the route target is derived from the class name.
For example:

- [classname]#MyEditor# becomes `"myeditor"`
- [classname]#PersonView# becomes `"person"`
- [classname]#MainView# becomes `""`.


== Topics

section_outline::[]
