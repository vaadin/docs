---
title: Best Practices
description: Describes various best practices for authentication, authorization, managing the application state, validating data, connecting to web services, and enabling SSL and HTTPS.
order: 40
layout: page
---

= Security Best Practices

// tag::authentication-authorization[]
== Authentication and Authorization

Vaadin lets you choose which authentication and authorization framework you want to use, instead of bundling any specific one.
Vaadin is fully compatible with the most-used security solutions in the Java ecosystem, including but not limited to Spring Security, JAAS, and Apache Shiro.
The Vaadin Spring add-on has helpers for developers to integrate into the security mechanisms of these respective frameworks.

Since Vaadin is a server-side framework, credential processing always happens on the server, away from any possible attack surface.
Credentials are never transmitted to the client, unless this is explicitly done by the developer.

It is generally recommended that the developer double-check user identity and access rights for each call from the client.
This can be automated with, for example, Spring Security and view-based authentication using roles.
What typically cannot be automated by these frameworks is data-based access rights, such as limiting access to specific entities.

As an example, if the server receives an ID of a `User` object to be displayed in, for example, a URL request parameter (`{yourapp.com}/users/4/edit`), then the ID in question can be freely changed by an attacker.
The application needs to be aware of this and check that the currently logged-in user has access rights to this entity.
This is something that is common to all UI frameworks, and not specific to Vaadin.

// end::authentication-authorization[]
// tag::spring-security-integration-ref[]
For examples of integrating Spring Security, see:
// end::spring-security-integration-ref[]
<<{articles}/flow/integrations/spring/view-based-access-control#, the Spring integration section>>.

== View-Based Access Control

[role="since:com.vaadin:vaadin@V21 standalone"]
--
--

[role="since:com.vaadin:vaadin@V21"]#It is possible to use a built-in view-based access control mechanism to secure Flow navigation targets#.
However, as mentioned in <<Authentication and Authorization,Authentication and Authorization>>, it is not mandatory to use it, so it is not enabled by default.
The view-based access control mechanism uses the `@AnonymousAllowed`, `@PermitAll`, `@RolesAllowed`, and `@DenyAll` annotations on view classes to define the access control rules.
**By default, any view without an annotation is secured; it acts as if it had the `@DenyAll` annotation.**

See <<{articles}/flow/integrations/spring/view-based-access-control#, View-Based Access Control>> for detailed information about enabling the access control mechanism in Vaadin Flow Spring Boot applications.

To enable and use this mechanism, the following should be added to a Vaadin Flow application (if it does not exist already):

- A security realm.
- A log-in view.
- Log-out capability.
- A [interfacename]`VaadinServiceInitListener` that adds [classname]`ViewAccessChecker` as the [classname]`BeforeEnterListener` of all UIs.
- A Service Provider under `META-INF/services` to load above the custom [classname]`ServiceInitListener` via the Java SPI loading mechanism.

=== Configuring a Security Realm

A _security realm_ is a mechanism for storing and mapping the users with their passwords and roles.
Configuring a security realm depends on the application server you are using to run the Vaadin application.
For example, if you use Apache Tomcat or TomEE, follow link:https://tomcat.apache.org/tomcat-10.0-doc/realm-howto.html[Realm Configuration How-To].

pass:[<!-- vale Vaadin.Headings = NO -->]

=== Handling User Log-in and Log-out

pass:[<!-- vale Vaadin.Headings = YES -->]

You can handle log-in and log-out in many ways.
The same applies to getting the authenticated user for a request.
The view-based access control implementation in Vaadin uses [methodname]`getUserPrincipal()` and [methodname]`isUserInRole(String)` in [classname]`HttpServletRequest` to check whether the currently authenticated user has access to the view.
So you need a way to provide the user information in the request.

The following example uses the currently active Vaadin servlet request.
It shows how to:

- check whether the user is currently authenticated to the application.
The request is not available in background threads, so the [methodname]`isAuthenticated()` method shows authentication state only in Vaadin request processing threads, otherwise it always returns `false`;
- authenticate the user with the given credentials.
The [methodname]`authenticate()` method fails if it is called from a background thread;
- log the user out by invalidating the HTTP session and redirecting to the home page.

.[filename]#SecurityUtils.java#
[source,java]
----
public class SecurityUtils {

    private static final String LOGOUT_SUCCESS_URL = "/";

    public static boolean isAuthenticated() {
        VaadinServletRequest request = VaadinServletRequest.getCurrent();
        return request != null && request.getUserPrincipal() != null;
    }

    public static boolean authenticate(String username, String password) {
        VaadinServletRequest request = VaadinServletRequest.getCurrent();
        if (request == null) {
            // This is in a background thread and we cannot access the request to
            // log in the user
            return false;
        }
        try {
            request.login(username, password);
            return true;
        } catch (ServletException e) {
            // login exception handle code omitted
            return false;
        }
    }

    public static void logout() {
        VaadinSession.getCurrent().getSession().invalidate();
        UI.getCurrent().getPage().setLocation(LOGOUT_SUCCESS_URL);
    }
}
----

=== Adding the Log-in View
Having a log-in view is one of the basic requirements of many authentication and authorization mechanisms.
It serves to redirect anonymous users to that page before granting access to view any protected resources.

.[filename]#LoginView.java#
[source,java]
----
@Route("login")
@PageTitle("Login")
public class LoginView extends VerticalLayout implements BeforeEnterObserver,
        ComponentEventListener<AbstractLogin.LoginEvent> {

    private static final String LOGIN_SUCCESS_URL = "/";

    private LoginForm login = new LoginForm();

    public LoginView() {
        addClassName("login-view");
        setSizeFull();

        setJustifyContentMode(JustifyContentMode.CENTER);
        setAlignItems(Alignment.CENTER);

        login.addLoginListener(this);

        add(new H1("Test Application"), login);
    }

    @Override
    public void beforeEnter(BeforeEnterEvent beforeEnterEvent) {
        if (beforeEnterEvent.getLocation()
            .getQueryParameters()
            .getParameters()
            .containsKey("error")) {
            login.setError(true);
        }
    }

    @Override
    public void onComponentEvent(AbstractLogin.LoginEvent loginEvent) {
        boolean authenticated = SecurityUtils.authenticate(
                loginEvent.getUsername(), loginEvent.getPassword());
        if (authenticated) {
            UI.getCurrent().getPage().setLocation(LOGIN_SUCCESS_URL);
        } else {
            login.setError(true);
        }
    }
}
----

In this example, Vaadin's Login Form component is used for the sake of brevity.
However, feel free to implement your own log-in view, if you wish.

=== Log-Out Capability

You typically let the user log out by using a log-out button.
The following example shows a basic implementation of a log-out button shown on the header of the main layout:

.[filename]#MainLayout.java#
[source,java]
----
public class MainLayout extends AppLayout {

    public MainLayout() {
        H1 logo = new H1("Vaadin CRM");
        logo.addClassName("logo");
        HorizontalLayout header;
        if (SecurityUtils.isAuthenticated()) {
            Button logout = new Button("Logout", click ->
                    SecurityUtils.logout());
            header = new HorizontalLayout(logo, logout);
        } else {
            header = new HorizontalLayout(logo);
        }

        // Other page components omitted.

        addToNavbar(header);
    }
}
----

=== Adding VaadinServiceInitListener
In order to restrict access to views, a [classname]`BeforeEnterListener` must be registered for the [classname]`VaadinService` to initialize and enable the [classname]`ViewAccessChecker`:

.[filename]#ViewAccessCheckerInitializer.java#
[source,java]
----
import com.vaadin.flow.server.ServiceInitEvent;
import com.vaadin.flow.server.VaadinServiceInitListener;
import com.vaadin.flow.server.auth.ViewAccessChecker;
import org.vaadin.example.views.login.LoginView;

public class ViewAccessCheckerInitializer implements VaadinServiceInitListener {

    private ViewAccessChecker viewAccessChecker;

    public ViewAccessCheckerInitializer() {
        viewAccessChecker = new ViewAccessChecker(); // <1>
        viewAccessChecker.setLoginView(LoginView.class); // <2>
    }

    @Override
    public void serviceInit(ServiceInitEvent serviceInitEvent) {
        serviceInitEvent.getSource().addUIInitListener(uiInitEvent -> {
            uiInitEvent.getUI().addBeforeEnterListener(viewAccessChecker); // <3>
        });
    }
}
----

This code contains some notable components of the view-based access control mechanism:

<1> [classname]`ViewAccessChecker`, which is at the core of this access control mechanism, is instantiated.
Note that it is enabled by default.
<2> The [classname]`LoginView` class is set to the `viewAccessChecker` instance.
Now it knows where to redirect unauthenticated users.
<3> The `viewAccessChecker` instance is set as the [classname]`BeforeEnterListener` in the overridden [methodname]`serviceInit()` method.
Now it is ready to intercept attempts to enter all views.

However, the above class still needs to be loaded, so we recommend following the instructions in the next step.

=== Enable Loading of VaadinServiceInitListener
To enable the Java SPI loading mechanism to load the  [classname]`ViewAccessCheckerInitializer` as the [classname]`VaadinServiceInitListener`, do the following:

- Under the `resources/META-INF/services` directory, create a file named exactly:
+
[text,text]
----
com.vaadin.flow.server.VaadinServiceInitListener
----

- Put the fully qualified name of the [classname]`ViewAccessCheckerInitializer` into this newly created file.
For example, if the [classname]`ViewAccessCheckerInitializer` class is in the `org.vaadin.example.security` package, the following value should be in the file:
+
[text,text]
----
org.vaadin.example.security.ViewAccessCheckerInitializer
----

This Service Provider configuration file triggers the Java SPI loading mechanism to load [classname]`ViewAccessCheckerInitializer` during application startup.
For more information on this, see <<{articles}/flow/advanced/service-init-listener#,VaadinServiceInitListener>>.

=== Access Annotations
Before we see some examples of access annotations, it is worth having a closer look at the annotations, and their meaning when applied to a view:

- `@AnonymousAllowed` permits anyone to navigate to the view without any authentication or authorization.
- `@PermitAll` allows any *authenticated* user to navigate to the view.
- `@RolesAllowed` grants access to users having the roles specified in the annotation value.
- `@DenyAll` disallows everyone from navigating to the view.
This is the default, which means that, if a view is not annotated at all, the `@DenyAll` logic is applied.

Some usage examples:

.Example of using `@AnonymousAllowed` to enable all users to navigate to this view
[source,java]
----
@Route(value = "", layout = MainView.class)
@PageTitle("Public View")
@AnonymousAllowed
public class PublicView extends VerticalLayout {
    // ...
}
----

.Example of using `@PermitAll` to allow only authenticated users (with any role) to navigate to this view
[source,java]
----
@Route(value = "private", layout = MainView.class)
@PageTitle("Private View")
@PermitAll
public class PrivateView extends VerticalLayout {
    // ...
}
----

.Example of using `@RolesAllowed` to enable only users with the `ADMIN` role to navigate to this view
[source,java]
----
@Route(value = "admin", layout = MainView.class)
@PageTitle("Admin View")
@RolesAllowed("ROLE_ADMIN") // <- Should match one of the user's roles (case-sensitive)
public class AdminView extends VerticalLayout {
    // ...
}
----

Now, if the application is started by navigating to `http://localhost:8080`, `PublicView` contents should be available without any authentication.
However, by navigating to `http://localhost:8080/private` or `http://localhost:8080/admin`, the user is redirected to the specified `LoginView`.

If the user is already authenticated and tries to navigate to a view for which they have no permission, an error message is displayed.
The message depends on the application mode:

- In development mode, Vaadin shows an *_Access denied_* message with the list of available routes.
- In production mode, Vaadin shows the [classname]`RouteNotFoundError` view, which shows the *_Could not navigate to 'RequestedRouteName'_* message by default.
For security reasons, the message does not say whether the navigation target exists.

// TODO: Consider adding more details and snippet code to showcase how the following can be achieved:
// 1. login with some users with different roles
// 2. save the requested URL to redirect to it after a successful login

The following example shows how the security annotations are inherited from the closest parent class that has them.

.Example of inheriting security annotations from parent class
[source,java]
----
@RolesAllowed("ROLE_ADMIN")
public abstract class AbstractAdminView extends VerticalLayout {
    // ...
}

@Route(value = "user-listing", layout = MainView.class)
@PageTitle("User Listing")
public class UserListingView extends AbstractAdminView {
    // ...
}
----

Annotating a child class overrides any inherited annotations.
Interfaces are not checked for annotations, only classes.
By design, the annotations are not read from parent layouts or "parent views", as this would make it unnecessarily complex to determine which security level should be applied.
If multiple annotations are specified on a single view class, the following rules are applied:

- `DenyAll` overrides other annotations
- `AnonymousAllowed` overrides `RolesAllowed` and `PermitAll`
- `RolesAllowed` overrides `PermitAll`

However, we do not recommend specifying more than one of the above access annotations on a view class.
It is confusing and probably has no logical purpose.

== Application State

The server is always aware of your application's state.
This means that, like client-side applications, the server is aware of what is currently visible on the end user's screen.
Hence, Vaadin denies actions to components that are not currently visible on the screen, or those that have been disabled on the server.

For instance, if the developer sets a component to be disabled, this effect is set on both the server and the client.
On the client, an attacker can circumvent this, since attackers have full control over anything in the browser.
However, the server will block any attempt to interact with the component and a warning is printed to the server logs.

[source,java]
----
Button button = new Button("Click me for effect!");
button.setEnabled(false);
button.addClickListener(e -> {
    // If the Button is disabled, this listener will not run,
    // even if an attacker enables the button client side.
});
----
// tag::data-validation[]
== Data Validation

In a Vaadin application, the data binding API supports data validation on the server, which cannot be bypassed by client-side attacks.
Vaadin components do support client-side validation to increase the responsiveness of the application, but the developer should be aware that these should be used purely for convenience, since they are easily circumvented in the browser.

As with other web applications, all data coming from the client should always be validated once it reaches the server.
It is not safe to rely only on client-side validation.
Vaadin provides a set of pre-created server side validators for this purpose.
In addition, the developer is free to use any Java API for validating the data, including connecting to external services.
Vaadin also has a built-in integration with Java's Bean Validation (JSR 303) standard.

Data coming from a data store (such as a database) and inserted as HTML into DOM elements (for example, setting `innerHTML` for elements or using HTML mode in component captions) should also be escaped.
Please see the chapter on XSS for more information.

// end::data-validation[]
== Web Services

No public Web Services are necessary in Vaadin applications.
All communication in Vaadin goes through a single HTTP request handler used for RPC requests using the standard Servlet Java API.
With Vaadin, you never open up your business logic as Web Services and thus there are fewer attack entry points to your Vaadin application.

// tag::ssl-https[]
== SSL and HTTPS

Vaadin always recommends developers to set up secure server endpoints and run all communication exclusively under HTTPS.
Vaadin works out of the box with HTTPS, and there is nothing for the developer to configure in their application code.
Please refer to the documentation of your servlet container for details on how to set up HTTPS on your server.
// end::ssl-https[]
