---
title: Browser Access
description: Accessing the browser page using the Page object.
order: 200
layout: page
---

= Accessing the Browser Page

Besides using the [classname]`Element` API to manipulate the DOM in the browser, you can also interact with the browser page by adding style sheets, executing JavaScript, and receiving browser resize events.

These features are available through the [classname]`Page` object.
You can access the page of the current request with [methodname]`UI.getCurrent().getPage()`.


== Getting the Window Location URL
Use the [methodname]`Page.fetchCurrentURL()` method to fetch the current URL from the browser.

For example:

.Getting the browser URL
[source,java]
----
UI.getCurrent().getPage().fetchCurrentURL(currentUrl -> {
    // This is your own method that you may do something with the url.
    // Please note that this method runs asynchronously
    storeCurrentURL(currentUrl);
});
----

// TODO add documentation on VaadinSession.getCurrent().getBrowser()

== Getting the Extended Client-Side Details

Use [methodname]`retrieveExtendedClientDetails()` in the current [classname]`Page` object to retrieve extended client-side details.
The method accepts a callback that, when called after client response, gets an [classname]`ExtendedClientDetails` object with various client-side data.

For example, the following can be used to get the screen width:


.Getting the screen width
[source,java]
----
UI.getCurrent().getPage().retrieveExtendedClientDetails(details -> {
    // This is your own method that you may do something with the screen width.
    // Please note that this method runs asynchronously
    handleScreenWidth(details.getScreenWidth());
});
----

== Executing JavaScript in the Browser

You can use server-side Java to execute simple JavaScript snippets in the browser.
You can also pass parameters to the executed script as variables named `$0`, `$1`, and so on.
Vaadin automatically serializes and escapes the parameter values.

You can execute JavaScript in the browser and pass parameters as follows:

[source,java]
----
public static void logElementSize(String name,
        Element element) {
    Page page = UI.getCurrent().getPage();

    page.executeJs(
            "console.log($0 + ' size:', "
            + "$1.offsetWidth, $1.offsetHeight)",
            name, element);
}
----

The supported parameter types are: `String`, `Boolean`, `Integer`, `Double`, `JsonValue`, and `Element`.

The script is executed after the DOM tree has been updated based on server-side changes.
The parameter value is `null` for a parameter of type [classname]`Element` that is not attached after the update (according to the server-side component structure).

Notice that the script is executed asynchronously, so you cannot directly pass values back to the server.
Instead, you can use the returned [classname]`PendingJavaScriptResult` instance to add a callback that is called when the result is available.

== Browser Window Resize Events

The [classname]`Page` class allows you to register a listener for events that affect the web page and the browser window in which the Vaadin UI resides.
The [classname]`Page` instance corresponding to a given [classname]`UI` is accessed by the [methodname]`getPage()` method of the [classname]`UI`.

You can get the browser window size by adding a resize listener, as follows:

[source,java]
----
Page page = UI.getCurrent().getPage();
page.addBrowserWindowResizeListener(
        event -> Notification.show("Window width="
                + event.getWidth()
                + ", height=" + event.getHeight()));
----
