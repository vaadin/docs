---
title: Upgrading from Vaadin 7 or 8 using Classic Components
order: 40
page-links:
  - https://vaadin.com/api/com.vaadin/vaadin-classic-components-flow/[API docs]
---

= Classic Components
:toclevels: 2

One of the biggest challenges in migrating from Vaadin 7 or 8 to Vaadin Flow is that Flow is based on a different set of web components.
The web components of Flow differ from their Vaadin 7 counterparts both in their API and behavior.

Classic Components is an add-on in Flow that provides a set of backwards-compatible components that ease migrating from Vaadin 7 or 8 to the latest Vaadin version.
The API, behavior, and even the DOM structure of the components is made to mimic the Vaadin 7/8 components as closely as possible.

Classic Components includes the following: HorizontalLayout, VerticalLayout, Panel, Label, GridLayout, and FormLayout.
These components either lack counterparts in Flow entirely, or have significantly different APIs, requiring a lot of modifications when migrating.
Classic Components also contain a number of abstract components from Vaadin 8 on which these components were based including [classname]`AbstractComponent`, [classname]`AbstractOrderedLayout`, and others. 

To use Classic Components, only the imports for the supported components need to be changed to be able to use almost all of the same component features. 

== License

Classic Components is licensed under Commercial Vaadin Developer License 4.0 (CVDLv4) and part of the https://vaadin.com/pricing[Prime Subscription].
You will be asked to validate your license or start a trial period when you start using it.

== Using Classic Components

Classic Components is intended for migrating your project from Vaadin 7 or 8 to the latest Vaadin version. The pack should work with any Vaadin version after 14, but it is tested against Vaadin 23.
The recommendation is to migrate to Vaadin 23.

To use Classic Components, you first need to add the dependency to your project's [filename]#pom.xml# or [filename]#build.gradle#, as follows:

* With Maven, add the pack dependency to [filename]#pom.xml#:
+
.`pom.xml`
[source,xml]
----
<dependencies>
    <!-| other dependencies -->
    <dependency>
        <groupId>com.vaadin</groupId>
        <artifactId>vaadin-classic-components-flow</artifactId>
    </dependency>
</dependencies>
----
+

After the dependency has been downloaded, you can start using the components by updating the component imports in your Java sources.
For the components that are included in the pack, change the import statements to the corresponding Classic packages, for example, `com.vaadin.ui.VerticalLayout` to `com.vaadin.classic.v8.ui.VerticalLayout`.

=== Limitations On Use With Multiplatform Runtime (MPR)

Using Classic Components in combination with <<{articles}/tools/mpr/overview#,Multiplatform Runtime (MPR)>> is not recommended for this version since it can lead to styling conflicts between the two.

=== Configuring the Component Defaults for Vaadin 7

If you are upgrading from Vaadin 7, you can configure the Classic components to use the Vaadin 7 defaults with the system property `vaadin.classic-components.vaadin7defaults`. By introducing the property (no value needed), the Vaadin 7 defaults are used.

== Included Components

Full API documentation is at https://vaadin.com/api/com.vaadin/vaadin-classic-components-flow/

=== HorizontalLayout and VerticalLayout

Classic Components comes with HorizontalLayout and VerticalLayout designed to work and behave as close as possible to the corresponding components present in the Vaadin 7 or 8 versions.
A few of the key features the components support include:

- *Expand Ratio*: children with "expand ratio" defined share the available space among them based on their ratios
- *Alignment*: each child can be aligned within its container (for example, top-left, middle-center, bottom-right, etc.)
- *Margin*: each side of the component's margin can be enabled or disabled independently

The DOM structure of VerticalLayout and HorizontalLayout was developed to maintain the same set of elements and CSS classes (such as `v-verticallayout`/`v-horizontallayout`, `v-has-width`, `v-expand` and so on), so that a project being migrated from Vaadin 7 or 8 is likely to be able to use its current styles without changes.
Class names defined in the layouts are added in the same way as before.
For example, if `custom-style` is added to a [classname]`VerticalLayout` instance, both `custom-style` and `v-verticallayout-custom-style` are added to the DOM element.

.Missing features
[NOTE]
[classname]`ContextClickEvent` and [classname]`LayoutClickListener` are not yet implemented in the Classic layouts.
They will be added in a future version.

HorizontalLayout and VerticalLayout are both Flow components, which means that they can be used together with any other component (Flow or other Classic Components).

==== Deviations

Unlike in the previous implementation, the layouts use flexbox, since this provides a nicer, cleaner way to achieve the same behavior, especially for the "expand ratio" and alignment features.
If any of the styles in the project being migrated rely on the previous implementation, they might not work as expected with the Classic layouts.

VerticalLayout and HorizontalLayout use Lumo variables to define their spacing and margin sizes.

|===
|Valo Sass variable |Lumo CSS variable

|`$v-layout-spacing-horizontal` |`--lumo-space-m`
|`$v-layout-spacing-vertical` |`--lumo-space-m`
|`$v-layout-margin-top` |`--lumo-space-m`
|`$v-layout-margin-right` |`--lumo-space-m`
|`$v-layout-margin-bottom` |`--lumo-space-m`
|`$v-layout-margin-left` |`--lumo-space-m`

|===


=== FormLayout

The Classic FormLayout resembles, as closely as possible, the Vaadin 7 or 8 version of FormLayout. 
It shows all components added to it in a table with two columns.
The left column contains the component's caption (except for Checkbox).
The components themselves appear stacked in the right column.
If a component is marked as required, an asterisk is appended to its caption.
As with HorizontalLayout and VerticalLayout, FlowLayout extends from the common superclass [classname]`AbstractOrderedLayout` and a selection of methods in classes with the same names from the V8 inheritance hierarchy.

.FormLayout is also in Flow
[NOTE]
FormLayout is also a Flow component, which means it can be used together with any other component (Flow or other Classic Components).

=== GridLayout

The Classic GridLayout resembles the Vaadin 8 version of this component.
It supports row and column spans, row and column expand ratios, and cell alignment. 

=== Panel

The Classic Panel component implements the same behavior as its counterpart in Vaadin 7/8 versions.
It comes with updated styles based on the Lumo theme.

==== Deviations

While most of the API comes from the Classic API, there are a few methods that are either not implemented or have their signature changed.
For example, [methodname]`setIcon(Resource)` is deprecated, but you can use [methodname]`setIcon(Icon)` instead.
On the other hand, [methodname]`getIcon()` cannot be used, because it originally returns a [classname]`Resource` instance.
Instead, the Classic [classname]`Panel` introduces [methodname]`getIconAsIcon()`, which returns the [classname]`Icon` instance set previously.
You can find the full list of unimplemented methods in <<incompatible_api, "Incompatible and Unsupported API and Migration Instructions">>.

=== Label

The Classic Label component supports the same API as its counterpart in Vaadin 7/8.
The only unsupported API is [methodname]`setIcon()`.

As in Vaadin 7/8, it is possible to change how the component interprets its contents.
The content mode can be `ContentMode.HTML`, `ContentMode.PREFORMATTED`, and `ContentMode.TEXT`.
The default is `ContentMode.TEXT`.
The caption can be interpreted as HTML by setting the mode with [methodname]`setCaptionAsHtml()`.

==== Deviations

Unlike in the Label component in Vaadin 7/8, the wrapper element is always present, regardless of whether a caption is set or not.
While this does not affect the visual layout, it might break some CSS selectors.
For example, it might break use of a CSS direct-child selector, such as `.my-class > .v-label`.

Another deviation from Vaadin 7/8 is when the content mode is set to `ContentMode.HTML`.
Although the anchor and the image tags are still going to work, contrary to Vaadin 7/8, the script tags are completely removed from the content.
The same applies when the caption is interpreted as HTML.

Also, as previously mentioned, there is no support for [methodname]`setIcon()` at the moment.

== Incompatible and Unsupported API and Migration Instructions [[incompatible_api]]

Any API that was already deprecated in Vaadin 8 (or 7) **does not exist** in the Classic Components.
You should thus change any code that uses the deprecated APIs before starting the migration.

Any Classic Component API that cannot work or is obsolete in Vaadin Flow is included in the Classic Components as `@Deprecated` and **does not do anything except log a warning in development mode**.
This is done to make it is faster to get the project to compile and run, and enables you to see the migration results sooner without having to comment out code.

This section goes through both the incompatible and the unsupported API introduced by each Classic Component class and how you could mitigate the situation if using that API in your project.
"Classic Components" is shortened to _CC_ in the tables below.

=== com.vaadin.ui.Component

The base [interfacename]`Component` interface from Vaadin 7 and 8 is replaced by the abstract class [classname]`com.vaadin.flow.component.Component` in Flow.
Most of the API is still the same or has changed only slightly.
Classic Components introduces any missing API in the [classname]`AbstractComponent` class instead.

.Component
|===
|Method signature |Mitigation

| [methodname]`String getId()`
| **Return type changed to** `Optional<String>` by Flow [classname]`Component`
| [methodname]`HasComponents	getParent()`
| **Return type changed to** `Optional<Component>` by Flow [classname]`Component`
| [methodname]`UI getUI()`
| **Return type changed to** `Optional<UI>` by Flow [classname]`Component`
| [methodname]`String getCaption()`

[methodname]`void setCaption(String caption)`
| **Migrate**. Supported only by CC's `Label`; for other components, you need to move the text to another component, such as `Span` or `Div`.
Replaced by [methodname]`setLabel(String)` in field components in Flow.
| [methodname]`String getDescription()`
| **Remove/Migrate**. 
Not supported by CC, and no direct replacement in Flow.
Alternatives are https://vaadin.com/directory/search?keyword=tooltip[available in the Directory].
| [methodname]`Resource getIcon()`

[methodname]`setIcon(Resource icon)`
| **Remove/Migrate**.
Not supported by CC components.
For Flow components, it depends on whether the component supports icons; for example, `Button` supports icons.
| [methodname]`void readDesign(org.jsoup.nodes.Element design, DesignContext designContext)`

[methodname]`void writeDesign(org.jsoup.nodes.Element design, DesignContext designContext)`
| **Remove**. You should not be even calling these methods as they are for Vaadin Designer integration only.
|===

=== com.vaadin.server.AbstractClientConnector

The Classic Components version of the class is in the `com.vaadin.classic.v8.server` package.

.AbstractClientConnector
|===
|Method signatures |Mitigation

|[methodname]`protected void fireEvent(EventObject event)`
| **Migrate**.
Flow components' [classname]`ComponentEventBus` needs event object type to be [classname]`ComponentEvent<T>` instead.
Use [methodname]`getEventBus().fireEvent(event)` to fire the event.
From outside the component, use [methodname]`ComponentUtil::fireEvent()`.
| [methodname]`protected void addExtension(Extension extension)`

[methodname]`Collection<Extension> getExtensions()`

[methodname]`void removeExtension(Extension extension)`

| **Remove/Migrate**. Flow components cannot be extended with extensions.
The method of migration depends on what the extension does.
For pure server-side extensions, you can subclass the component.
For extensions with client-side parts, you need to make a JavaScript file and call it from Java code inside the extended class.
| [methodname]`Registration addListener(Class<?> eventType, SerializableEventListener listener, Method method)`

[methodname]`protected Registration addListener(String eventIdentifier, Class<?> eventType, SerializableEventListener listener, Method method)`
| **Migrate**.
For external usage, use distinct _addXyzListener_ API in the component or [methodname]`ComponentUtil::addListener()` methods.
For usage inside the component, this is replaced by Flow's [classname]`ComponentEventListener` added to [classname]`ComponentEventBus`, which is only accessible inside the component.
| [methodname]`protected void addMethodInvocationToQueue(String interfaceName, Method method, Object[] parameters)`
| **Remove**. This method was only for internal usage; you should not be using it. It does not apply for Flow.
| `protected SharedState createState()`

[methodname]`protected SharedState getState()`

[methodname]`protected SharedState getState(boolean markAsDirty)`

[methodname]`Class<? extends SharedState> getStateType()`

[methodname]`protected void updateDiffstate(String propertyName, JsonValue newValue)`

| **Remove/Migrate**.
[classname]`SharedState` is not applicable to Flow; data is transferred through the <<../element-api/properties-attributes#,`Element` API>> with properties and attributes instead.
| [methodname]`JsonObject encodeState()`
| **Remove**.
Internal method that does not apply to Flow.
| [methodname]`static Iterable<? extends ClientConnector> getAllChildrenIterable(ClientConnector connector)`
| **Migrate**.
Does not apply directly to Flow; child components can be obtained with [methodname]`Component::getChildren()`
| [methodname]`String getConnectorId()`
| **Remove/Migrate**.
Does not apply to Flow.
Manually set IDs can be used with [methodname]`setId()` / [methodname]`getId()`.
Internally, Flow uses [methodname]`StateNode::getId()` to track _nodes_ between client and server.
| [methodname]`ErrorHandler getErrorHandler()`

[methodname]`void setErrorHandler(ErrorHandler errorHandler)`

| **Migrate**.
Flow does not have a component-level error handler.
Migrate to use [methodname]`VaadinSession::setErrorHandler()` instead.
Or, depending the type of error, you could use an <<../routing/exceptions#, error view>> instead.
| [methodname]`Collection<?> getListeners(Class<?> eventType)`
| **Remove/Migrate**.
No replacement available in Flow.
Use the [methodname]`fireEvent()` API from [classname]`ComponentEventBus` or [classname]`ComponentUtil` to notify all listeners.
| [methodname]`protected Resource getResource(String key)`

[methodname]`protected void setResource(String key, Resource resource)`
| **Remove**.
Not applicable in Flow.
| [methodname]`ServerRpcManager<?> getRpcManager(String rpcInterfaceName)`

[methodname]`List<ClientMethodInvocation> retrievePendingRpcCalls()`

| **Remove**.
Internal method that is not applicable in Flow.
| [methodname]`protected <T extends ClientRpc> T getRpcProxy(Class<T> rpcInterface)`

[methodname]`protected <T extends ServerRpc> void registerRpc(T implementation)`

[methodname]`protected <T extends ServerRpc> void registerRpc(T implementation, Class<T> rpcInterfaceType)`
| **Remove/Migrate**.
Not applicable in Flow.
See documentation for <<../element-api/client-server-rpc#, RPC calls between the client and the server>>.
| [methodname]`boolean handleConnectorRequest(VaadinRequest request, VaadinResponse response, String path)`
| **Remove**.
Internal method that should not even be used.
| [methodname]`protected boolean hasListeners(Class<?> eventType)`
| **Migrate**.
The event type is different; Classic Components have both [methodname]`protected boolean hasListeners(Class<? extends ComponentEvent>)` and [methodname]`hasListener(Class<? extends ComponentEvent>)`.
Flow's [classname]`Component` introduces the latter.
|===

=== com.vaadin.ui.AbstractComponent

The Classic Components version of the component is in the `com.vaadin.classic.v8.ui` package.

.AbstractComponent
|===
|Method signature |Mitigation

| [methodname]`protected void fireComponentErrorEvent()]`
| **Remove/Migrate**.
Not supported by CC components and no direct replacement in Flow.
The method of migration depends on what the error event was for.
| [methodname]`protected void focus()`
| **Migrate**.
You need to first check whether the component implements [interfacename]`com.vaadin.flow.component.Focusable`, and then call [methodname]`focus()` on it.
| [methodname]`protected ActionManager getActionManager()`
| **Migrate**.
Not supported by CC.
See <<../components/shortcut#, how to add shortcuts>> in Flow.
| [methodname]`ErrorMessage getComponentError()`

[methodname]`ErrorMessage getErrorMessage()`

[methodname]`void setComponentError(ErrorMessage componentError)`

| **Remove/Migrate**.
Not supported by CC and, in Flow, error messages are component-specific.
| [methodname]`protected Collection<String> getCustomAttributes()`
| **Remove**.
You should not even be calling this, as it was for Vaadin Designer integration only.
| [methodname]`boolean isCaptionAsHtml()`

[methodname]`void setCaptionAsHtml(boolean captionAsHtml)`
| **Migrate**.
Supported only by CC's `Label`.
For other components, you need to move the text to another component, such as `Span` or `Div`.
Replaced by [methodname]`setLabel(String)` in field components in Flow.
| [methodname]`protected boolean isReadOnly()`

[methodname]`protected void setReadOnly(boolean readOnly)`
| **Remove/Migrate**.
Not supported by CC components.
In Flow, only field components can be read-only.
| [methodname]`protected boolean isRequiredIndicatorVisible()`

[methodname]`protected void setRequiredIndicatorVisible(boolean visible)`
| **Remove/Migrate**.
Not supported by CC components.
In Flow, only field components can have a required indicator.
| [methodname]`boolean isResponsive()`

[methodname]`void setResponsive(boolean responsive)`
| **Remove**.
Not supported by CC or Flow components.
| [methodname]`void setDescription(String description)`

[methodname]`void setDescription(String description, ContentMode mode)`
| **Remove/Migrate**.
Not supported by CC, and no direct replacement in Flow.
Alternatives are https://vaadin.com/directory/search?keyword=tooltip[available in the Directory].
|===
