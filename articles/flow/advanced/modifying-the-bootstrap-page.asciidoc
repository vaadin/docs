---
title: Modifying the Bootstrap Page at Runtime
description: How to customize the application shell, or bootstrap page, to improve page loading speed
order: 30
layout: page
---


= Modifying the Bootstrap Page at Runtime

== Application Shell [[application-shell]]

The link:https://developers.google.com/web/fundamentals/architecture/app-shell[App Shell Model] aims to make your website faster by loading the 'important' parts of the web page first, so improving the user experience.
The key to this is to deliver the minimum HTML, CSS and JavaScript required to display the user interface on the first visit, and eventually cache it for use on subsequent revisits.

The _Application Shell_ in Vaadin is also known as the _Bootstrap Page_, or simply [filename]#index.html#.

== Modifying the Application Shell

In Vaadin 15 and later, the developer has full control of the contents of [filename]#index.html#.
There are various ways to modify it:

. On the client side, by editing [filename]#frontend/index.html# when the content is static, for instance the `<viewport>` tag.
. On the server side, for changes that require some dynamic server content, or simply when Java syntax is preferred; for example, making the application installable by enabling the `@PWA` built-in feature.
- Implement [interfacename]#AppShellConfigurator# for cases covered by the [classname]#AppShellSettings# API, or by annotations.
- Configure an [interfacename]#IndexHtmlRequestListener# for advanced cases that modify the document structure.

== Customizing the Application Shell Template

By default, during the first request, Vaadin parses the [filename]#frontend/index.html# template file and delivers it with a few modifications as described in https://vaadin.com/docs/v22/fusion/application/starting/#default-bootstrap-template-and-entry-point[Default Bootstrap Template and Entry Point].

This is the best place to customize the application shell, for example to put an analytics tag in the page.

.index.html
[source,xml]
----
...
<head>
  <title>My App</title>
</head>
<body>
  ...
  <!-- Google Analytics -->
  <script>
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-XXXXX-Y', 'auto');
    ga('send', 'my-app-bootstrap');
  </script>
</body>
----


== Customizing the Application Shell at Runtime

=== The AppShellConfigurator Interface [[application-shell-configurator]]

In Java code, when adding dynamic content during the bootstrap process, use the [interfacename]#AppShellConfigurator# marker interface rather than editing the [filename]#index.html#.

[NOTE]
There must be a single application shell for the entire Vaadin application, so that no more than one class can implement [interfacename]#AppShellConfigurator#.

[NOTE]
[interfacename]#AppShellConfigurator# replaces the obsolete [interfacename]#PageConfigurator# interface.

==== The AppShellConfigurator.configurePage() Method

Override [methodname]#configurePage()# to add content to the [filename]#index.html# template by calling the following [classname]#AppShellSettings# methods:

- [methodname]#AppShellSettings.setViewport()# to set the viewport value; this replaces the viewport present in the [filename]#index.html# template.
- [methodname]#AppShellSettings.setPageTitle()# to set the initial page title; this replaces the template title tag.
- [methodname]#AppShellSettings.setBodySize()# to configure the body width and height values.
- [methodname]#AppShellSettings.addMetaTag()# to append meta tags to the head.
- [methodname]#AppShellSettings.addInlineFromFile()# to include content from resource files.
- [methodname]#AppShellSettings.addInlineWithContents()# to add arbitrary content.
- [methodname]#AppShellSettings.addLink()# to add links to the head.
- [methodname]#AppShellSettings.addFavIcon()# to configure the favicon.
- [methodname]#AppShellSettings.getLoadingIndicatorConfiguration()# to configure a loading indicator when legacy bootstrapping is used (deprecated; see the details after the code example).
- [methodname]#AppShellSettings.getReconnectDialogConfiguration()# to configure the reconnect dialog when legacy bootstrapping is used (deprecated; see the details after the code example).
- [methodname]#AppShellSettings.getPushConfiguration()# to customize the push mechanism when legacy bootstrapping is used (deprecated; see the details after the code example).

[source,java]
----
public class AppShell implements AppShellConfigurator {

  @Override
  public void configurePage(AppShellSettings settings) {
    settings.setViewport("width=device-width, initial-scale=1");
    settings.setPageTitle("A cool vaadin app");
    settings.setBodySize("100vw", "100vh");
    settings.addMetaTag("author", "bunny");
    settings.addFavIcon("icon", "icons/icon-192.png", "192x192");
    settings.addLink("shortcut icon", "icons/favicon.ico");

    settings.addInlineFromFile(
            TargetElement.BODY,
            Position.APPEND,
            "custom.html",
            Wrapping.AUTOMATIC);
    settings.addInlineWithContents(Position.PREPEND,
            "console.log(\"foo\");", Wrapping.JAVASCRIPT);
  }
}
----


[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/flow/advanced/bootstrap/ServiceListener.java[tags=snippet]
----

==== Java Annotations[[java-annotations]]

Vaadin provides a set of annotations to modify the application shell.
However, in Vaadin 15, unlike in previous versions, these annotations must be placed in the application shell class.

- `@Viewport` to set the viewport value.
- `@PageTitle` to set the initial page title.
- `@BodySize` to configure the body size.
- `@Meta` to append meta tags to the head.
- `@Inline` to include content from resource files in the [filename]#index.html#.
- `@PWA` to define application PWA properties.
- `@Push` to configure server push.

[source,java]
----
@Viewport("width=device-width, initial-scale=1")
@PageTitle("A cool vaadin app")
@BodySize(height = "100vh", width = "100vw")
@Meta(name = "author", content = "bunny")
@Inline(wrapping = Wrapping.AUTOMATIC,
        position = Position.APPEND,
        target = TargetElement.BODY,
        value = "custom.html")
@PWA(name = "Cool Vaadin App", shortName = "my-app")
@Push(value = PushMode.MANUAL, transport = Transport.WEBSOCKET)
public class AppShell implements AppShellConfigurator {
}
----

[NOTE]
Modifications in [methodname]#AppShellConfigurator.configurePage()# have priority over the equivalent annotations.

[NOTE]
Annotations do not cover all the cases that can be achieved when overriding the [methodname]#AppShellConfigurator.configurePage()# method.

=== The IndexHtmlRequestListener Interface [[IndexHtmlRequestListener-interface]]

In addition, for advanced cases not covered in the previous section, content can be modified via an [interfacename]#IndexHtmlRequestListener#.

An implementation of the listener should be added via a [classname]#ServiceInitEvent# when a [classname]#VaadinService# is initialized.
Check the <<../advanced/service-init-listener#,ServiceInitListener tutorial>> for details of using Vaadin [classname]#ServiceInitListeners#.

The following example changes the body class dynamically:

[source,java]
----
public class MyIndexHtmlRequestListener implements
        IndexHtmlRequestListener {

    @Override
    public void modifyIndexHtmlResponse(
            IndexHtmlResponse indexHtmlResponse) {

        Document document = indexHtmlResponse.getDocument();
        Element body = document.body();
        body.classNames(computeBodyClassNames());
    }

    private Set<String> computeBodyClassNames() {
        // Introduce some logic to dynamically change the body class
        return Collections.singleton("my-className");
    }
}
----

This can also be achieved using a servlet container deployment property with the name `useDeprecatedV14Bootstrapping`.
