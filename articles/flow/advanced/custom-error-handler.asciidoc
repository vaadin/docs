---
title: Custom Error Handling
description: Customizing the error views related to navigation between routes.
order: 145
layout: page
---

= Custom Error Handling

You can customize the error views related to navigation between different routes as described in the <<{articles}/flow/routing/exceptions#, Router Exception Handling>> article.

For other unhandled runtime exceptions, an [classname]`ErrorHandler` class can be used to gracefully let users know that something went wrong.
In order to do so, first create your custom [classname]`ErrorHandler` class, then use that class to override the default error handler.

For example, the following [classname]`CustomErrorHandler` class logs the error and displays a friendly notification to the user.

[source,java]
----
public class CustomErrorHandler implements ErrorHandler {

    private static final Logger logger = LoggerFactory.getLogger(CustomErrorHandler.class);

    @Override
    public void error(ErrorEvent errorEvent) {
        logger.error("Something wrong happened", errorEvent.getThrowable());
        if(UI.getCurrent() != null) {
            UI.getCurrent().access(() -> {
                Notification.show("An internal error has occurred." +
                        "Please contact support.");
            });
        }
    }
}
----

Then assign the custom error handler to the current user session:

[source,java]
----
VaadinSession.getCurrent().setErrorHandler(new CustomErrorHandler());
----

To apply the custom error handler to all user sessions, you can use a [classname]`SessionInitListener`, which receives an event each time a new [classname]`VaadinSession` is initialized.
See the <<session-and-ui-init-listener#,Session and UI Listeners>> article to learn how to create a [classname]`SessionInitListener`.
