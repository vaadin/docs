---
title: All Vaadin properties
order: 18
layout: page
---


= All Vaadin Configuration Properties

There are a number of properties that you can use to configure your Vaadin application.

This document summarizes the properties that are defined in `com.vaadin.server.DeploymentConfiguration` and `com.vaadin.server.Constants` classes.

These properties can be set from the command line as a system property, as a Servlet init parameter in the `web.xml` or using the `@WebServlet` annotation.
For further information, please consult the tutorial <<tutorial-flow-runtime-configuration#, Changing Flow behavior with runtime configuration>>.

[NOTE]
If you use Spring Boot then you should add the prefix `vaadin.`, e.g. vaadin.productionMode=true.

.Vaadin properties
[width="100%",cols="3,10",frame="topbot",options="header"]
|===
|Property |Description

|productionMode |
Turns application to work in production mode.
Production mode disables most of the logged information that appears on the console because logging and other debug features can have a significant performance impact.
In addition to this, development mode JS functions are not exported, `push` is given as a minified JS file instead of full size and static resources are cached.

|requestTiming |
If request timing info should be made available.
If true, in each response the server includes some basic timing information.
This can be used for performance testing.


|disable-xsrf-protection |
Cross-site request forgery protection. This protection is enabled by default, but it might need to be disabled to allow a certain type of testing.
For these cases, the check can be disabled by setting the init parameter.

|heartbeatInterval |
Vaadin UIs that are open on the client side send a regular heartbeat to the server to indicate they are still alive, even though there is no ongoing user interaction.
When the server does not receive a valid heartbeat for a given UI, it will eventually remove that UI from the session.
Vaadin UIs that are open on the client side send a regular heartbeat to the server to indicate they are still alive, even though there is no ongoing user interaction.
When the server does not receive a valid heartbeat for a given UI, it will eventually remove that UI from the session.

|closeIdleSessions |
When it is set to true (the default is false), the session will be closed if no UI is active.
Heartbeat requests are just like any other request from the servlet containerâ€™s viewpoint.
This means that as long as there is an open UI, the session never expires even though there is no user interaction.
You can control this behavior by setting an init parameter named closeIdleSessions to true.

|pushMode |
The permitted values are "disabled" or "manual". Please consult <<tutorial-push-configuration#, Server Push Configuration>> documentation.

|pushURL |
It is the url to use for push requests. Some servers require a predefined URL to push.
Please consult <<tutorial-push-configuration#, Server Push Configuration>> documentation.

|syncIdCheck |
Returns whether sync id checking is enabled. The sync id is used to gracefully handle situations
when the client sends a message to a connector that has recently been removed on the server.
By default, it is true.

|sendUrlsAsParameters |
Returns whether the sending of URL's as GET and POST parameters in requests with content-type
<code>application/x-www-form-urlencoded</code>is enabled or not.

|pushLongPollingSuspendTimeout |
When using the long polling transport strategy,  it specifies how long it accepts responses after
each network request. Number of milliseconds.

|maxMessageSuspendTimeout |
In certain cases, such as when the server sends adjacent `XmlHttpRequest` responses and push
messages over a low bandwidth connection, messages may be received out of order by the client.
This property specifies the maximum time (in milliseconds) that the client will then wait for
the predecessors of a received out-order message, before considering them missing and requesting
a full resynchronization of the application state from the server. The default value is 5000 ms.
You may increase this if your application exhibits an undue amount of resynchronization requests
(as these degrade the UX due to flickering and loss of client-side-only state such as scroll
position).

|i18n.provider |
I18N provider property. To use localization and translation strings the application only needs to implement `I18NProvider` and define the fully qualified class name in the property `i18n.provider`.
Please consult <<tutorial-i18n-localization#, I18N localization>> documentation.

|disable.automatic.servlet.registration |
Configuration name for the parameter that determines if Flow should automatically register servlets needed for the application to work.

|devmode.optimizeBundle |
By default, in development mode all frontend resources found on the class path are included in the generated Webpack bundle.
When set to `true`, creates an optimized bundle by including only frontend resources that are used from the application entry points (this is the default in production mode).
Uses bytecode scanning which increases application startup time. *This feature is available only in Vaadin Platform 14.1 and newer.*

|pnpm.enable |
**Available since Vaadin 14.2 and 15**, this is by default set to `true` in 16, which means that _pnpm_ is used to download and resolve frontend dependencies. Setting it to false disables pnpm, and _npm_ will be used instead to handle the frontend resources. More information in the <<tutorial-switch-npm-pnpm#, switch between pnpm and npm documentation>>.

|devmode.liveReload.enabled |
This is by default set to `true`, which means that if you are using
some live reload tool on the server side the browser will be refreshed automatically once code
is reloaded on the server side. See <<../workflow/workflow-overview#,Workflow Overview>>.

|===
