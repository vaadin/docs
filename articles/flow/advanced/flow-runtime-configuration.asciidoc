---
title: Application runtime configuration
order: 4
layout: page
---

= Changing the Application Behavior with Runtime Configuration

Vaadin applications have extra parameters that may be configured to change its behavior.
This section describes how to apply the properties described in <<tutorial-all-vaadin-properties, all Vaadin properties documentation>>.
For Spring applications, there is <<../spring/tutorial-spring-configuration, Spring specific instructions available>>.

== Configuration Using System Properties

When using Java's system properties to set the Vaadin application parameters,
the `vaadin.` prefix is needed to be specified before the parameter names.
The following shows and example of setting the system property when executing
a Maven goal from the command line:
[source,bash]
----
mvn jetty:run -Dvaadin.frontend.url.es6=http://mydomain.com/es6/ -Dvaadin.frontend.url.es5=http://mydomain.com/es5/
----

System properties can be configured for Maven plugin executions. For instance, the following
example sets a Vaadin specific system property when the Jetty Maven plugin is run:

[source,xml]
----
            <plugin>
                <groupId>org.eclipse.jetty</groupId>
                <artifactId>jetty-maven-plugin</artifactId>
                <configuration>
                    <systemProperties>
                        <systemProperty>
                            <name>vaadin.pushMode</name>
                            <value>disabled</value>
                        </systemProperty>
                    </systemProperties>
                </configuration>
            </plugin>
----

== Configuration Using Servlet Initialization Parameters

Another alternative is to use servlet initialization parameters.
You can use the Servlet 3.0 `@WebServlet` annotation, which requires you to configure
your own servlet (otherwise it is done automatically by Vaadin with default parameter values):

[source,java]
----
@WebServlet(urlPatterns = "/*", name = "myservlet", asyncSupported = true, initParams = {
        @WebInitParam(name = "frontend.url.es6", value = "http://mydomain.com/es6/"),
        @WebInitParam(name = "frontend.url.es5", value = "http://mydomain.com/es5/") })
@VaadinServletConfiguration(productionMode = false)
public class MyServlet extends VaadinServlet {
}
----

Yet another approach is to use the `web.xml` file:

[source,xml]
----
<?xml version="1.0" encoding="UTF-8"?>
<web-app
  id="WebApp_ID" version="3.0"
  xmlns="http://java.sun.com/xml/ns/j2ee"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
      http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd">

  <servlet>
    <servlet-name>myservlet</servlet-name>
    <servlet-class>
        com.vaadin.server.VaadinServlet
    </servlet-class>

    <init-param>
      <param-name>frontend.url.es6</param-name>
      <param-value>http://mydomain.com/es6/</param-value>
    </init-param>

    <init-param>
      <param-name>frontend.url.es5</param-name>
      <param-value>http://mydomain.com/es5/</param-value>
    </init-param>
  </servlet>

  <servlet-mapping>
    <servlet-name>myservlet</servlet-name>
    <url-pattern>/*</url-pattern>
  </servlet-mapping>
</web-app>
----


[NOTE]
System properties override application properties ergo if you have both properties with the same name specified, the system one will be used.

== Parameters and description

The `productionMode` (default value is `false`) parameter turns application to work in production mode
In order for web components to work, extra libraries (polyfills) are required to be loaded, can be turned off if different versions or libraries should be included instead.
