---
title: Observable Vaadin Events
order: 4
layout: page
---

= Observable Vaadin Events

The https://vaadin.com/directory/component/vaadin-cdi/[Vaadin CDI] add-on publishes many Vaadin events to CDI. 

It is not necessary to register a listener, using only an observer is sufficient to handle these events.

Events published to CDI include:

* `ServiceInitEvent` See <<../advanced/tutorial-service-init-listener#,VaadinServiceInitListener>>
for more.
* `PollEvent`.
* `BeforeEnterEvent`. See <<../routing/tutorial-routing-lifecycle#,Navigation Lifecycle>> for more. 
* `BeforeLeaveEvent`. See <<../routing/tutorial-routing-lifecycle#,Navigation Lifecycle>> for more. 
* `AfterNavigationEvent`. See <<../routing/tutorial-routing-lifecycle#,Navigation Lifecycle>>
for more.
* `UIInitEvent`. See <<../advanced/tutorial-ui-init-listener#,UIInitListener>> for more.
* `SessionInitEvent`. See <<../advanced/tutorial-application-lifecycle#handling-session-initialization-and-destruction,Handling Session Initialization and Destruction>> for more. 
* `SessionDestroyEvent`. See <<../advanced/tutorial-application-lifecycle#handling-session-initialization-and-destruction,Handling Session Initialization and Destruction>> for more. 
* `ServiceDestroyEvent`.

[WARNING]
Whether or not `ServiceDestroyEvent` works with CDI during application shutdown depends on each specific implementation.

*Example*: Using the `@Observes` annotation to listen `ServiceInitEvent`.

[source,java]
----
public class BootstrapCustomizer {

    private void onServiceInit(@Observes
            ServiceInitEvent serviceInitEvent) {
        serviceInitEvent.addIndexHtmlRequestListener(
                this::modifyBootstrapPage);
    }

    private void modifyBootstrapPage(
            IndexHtmlResponse response) {
        response.getDocument().body().append(
                "<p>By CDI add-on</p>");
    }
}
----
