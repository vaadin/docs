---
title: Overview
order: 1
layout: page
---

= Using Vaadin Components

Flow comes with some set of components for standard HTML Elements. The module `flow-html-components` contains:
- `Anchor`  component for `a` HTML element
- `Article`  component for `article` HTML element
- `Aside`  component for `aside` HTML element
- `DescriptionList` component for `dl` HTML element
- `Div` component for `dl` HTML element
- `Emphasis` component for `em` HTML element
- `Footer` component for `footer` HTML element
- `H1`, .., `H6` for heading HTML elements (`h1`, .., `h6`)
- `Header` component for `header` HTML element
- `Hr` component for `hr` HTML element
- `Iframe` component for `iframe` HTML element
- `Image` component for `img` HTML element
- `Input` component for `input` HTML element
- `Label` component for `label` HTML element
- `ListItem` component for `li` HTML element
- `Main` component for `main` HTML element
- `NativeButton` component for `button` HTML element (`Button` class is used for `vaadin-button` Vaadin component).
- `NativeDetails` component for `details` HTML element (`Details` class is used for `vaadin-details` Vaadin component).
- `Nav` component for `nav` HTML element
- `OrderedList` component for `ol` HTML element
- `Paragraph` component for `p` HTML element
- `Pre` component for `pre` HTML element
- `Section` component for `section` HTML element
- `Span` component for `span` HTML element
- `UnorderedList` component for `ul` HTML element

Standard HTML Components have API which allows to set most used properties and attributes.
It is also possible to use Element API to set any property or attribute in case API doesn't have ready-made method to do this.
The components which may contain other HTML elements implement `HtmlContainer` interface to be able to make hierarchical structure.
Element API allows to make any standard HTML element via `Element` constructor if your are lacking it in the above list. 
There is also `ElementFactory` class which contains factory methods for many standard HTML elements.

The `flow-html-components` module is not a necessary part of Flow and may be excluded in your project: 
`vaadin` dependency (see below) via its transitive `vaadin-core` dependency inherits `flow-html-components` artifact.
You may exclude this artifact explicitly or include if you don't use `vaadin` dependency in your project:

[source,xml]
----
<dependencies>
    <!-- other dependencies -->
    <dependency>
        <groupId>com.vaadin</groupId>
        <artifactId>flow-html-components</artifactId>
        <version>${flow.version}</version>
    </dependency>
</dependencies>
----


Vaadin Platform includes a set of <<{articles}/ds/components#,components>>, with server-side Java APIs, that you can use to build your UI.

The components, together with Flow, are included as platform dependencies.

.Free training courses
TIP: Watch the https://vaadin.com/learn/training/v14-intro[Vaadin 14: Introduction] free training video to learn more about Vaadin terminology and what Vaadin components are.

The `vaadin-core` module includes all open-source components, such as Text Field, Button and Grid. The `vaadin` module extends this set to include all officially supported components in Vaadin, like Vaadin Charts.

== Vaadin Dependency

The components are part of Vaadin and are included as dependencies, together with Flow. Each component has a Java API.

Using the platform dependency (`com.vaadin:vaadin`) ensures that all available components, both open source and commercial, are included automatically. You are guaranteed to get compatible versions of both Flow and the components.

*Example*: Declaring the `vaadin.platform` dependency.

[source,xml]
----
<dependencies>
    <!-- other dependencies -->
    <!-- component dependency -->
    <dependency>
        <groupId>com.vaadin</groupId>
        <artifactId>vaadin</artifactId>
        <version>${vaadin.platform.version}</version>
    </dependency>
</dependencies>
----

[NOTE]
It is possible to include components individually by declaring a dependency for each component. See below for an example.

The platform also includes themes for the components that you can customize to ensure the styling suits your needs. See <<{articles}/ds/overview#,Design System>> for more information.

You can find additional prebuilt Web Components (with Java APIs) contributed by the Vaadin community in the https://vaadin.com/directory/search[Vaadin Directory].

== Individual Component Dependencies

As an alternative to using the platform dependency, you can declare single components as dependencies.

You should add both the Vaadin `bom` and the relevant Flow component package, for example `vaadin-button-flow`, to your project dependencies. The Vaadin `bom` fixes all vaadin-related dependencies to a tested combination, so that the individual components can be added safely. Without the BOM, some dependencies may change in the future, because of new releases, or because of their use of version ranges.

*Example*: Adding the Button component in your `pom.xml` using Maven.

[source,xml]
----
<dependencyManagement>
    <dependencies>
        <dependency>
            <groupId>com.vaadin</groupId>
            <artifactId>vaadin-bom</artifactId>
            <version>
                ${vaadin.platform.version}
            </version>
            <type>pom</type>
            <scope>import</scope>
        </dependency>
    </dependencies>
</dependencyManagement>

<dependencies>
    <!-- other dependencies -->

    <!-- component dependency -->
    <dependency>
        <groupId>com.vaadin</groupId>
        <artifactId>vaadin-button-flow</artifactId>
    </dependency>
</dependencies>
----
