---
title: Overview
order: 1
layout: page
---

= Using Vaadin Components

The <<{articles}/ds/overview#, Vaadin Design System>> includes a set of <<{articles}/ds/components#,components>> that you can use to build your UI.
The components have a server-side Java API in addition to the TypeScript API for client-side development.

You use a component by first creating it and then adding it to a containing layout.

For example, to add a <<{articles}/ds/components/button#, Button component>>, create the object and add it to a layout (here, the calling object extends a layout):

[.example.show-code]
--
[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/flow/application/events/EventsLambda.java[render,tags=snippet,indent=0,group=Java]
----

[source,typescript]
----
include::{root}/frontend/demo/flow/application/events/events-basic.ts[hidden, indent=0, group=TypeScript]
----
--

== Components for Standard HTML Elements

Vaadin also includes an API for creating and using standard HTML elements, as outlined below.

The module `flow-html-components` contains:

[cols="3,2,8",options=header]
|===
| Component | HTML Element | Notes
| `Anchor` | `a` |
| `Article`  | `article` |
| `Aside`  | `aside` |
| `DescriptionList` | `dl` |
| `Div` | `dl` |
| `Emphasis` | `em` |
| `Footer` | `footer` |
| `H1`, .., `H6` | `h1`, .., `h6` |
| `Header` | `header` |
| `Hr` | `hr` |
| `Iframe` | `iframe` |
| `Image` | `img` |
| `Input` | `input` |
| `Label` | `label` |
| `ListItem` | `li` |
| `Main` | `main` |
| `NativeButton` | `button` | `Button` class is used for `vaadin-button` Vaadin component.
| `NativeDetails` | `details` | `Details` class is used for `vaadin-details` Vaadin component.
| `Nav` | `nav` |
| `OrderedList` | `ol` |
| `Paragraph` | `p` |
| `Pre` | `pre` |
| `Section` | `section` |
| `Span` | `span` |
| `UnorderedList` | `ul` |
|===

Standard HTML components have an API that allows you to set most typical properties and attributes.
You can also use the Element API to set any property or attribute if the component API does not have an appropriate method.

Components that can contain other components implement the `HtmlContainer` interface to create a hierarchical structure.
The Element API allows you to create any standard HTML element using the `Element` constructor.
The `ElementFactory` class contains factory methods for many standard HTML elements.

The standard `vaadin` dependency (see below) inherits the `flow-html-components` artifact through its transitive `vaadin-core` dependency.
The `flow-html-components` artifact is not an essential part of Flow and may be explicitly excluded from your project.
You can also include it if you do not use the `vaadin` dependency in your project:

[source,xml]
----
<dependencies>
    <!-| other dependencies -->
    <dependency>
        <groupId>com.vaadin</groupId>
        <artifactId>flow-html-components</artifactId>
        <version>${flow.version}</version>
    </dependency>
</dependencies>
----

Vaadin Platform includes a set of <<{articles}/ds/components#,components>>, with server-side Java APIs, which you can use to build your UI.
The components, together with Flow, are included as platform dependencies.

.Free training courses
TIP: Watch the https://vaadin.com/learn/training/v14-intro[Vaadin 14: Introduction] free training video to learn more about Vaadin terminology and what Vaadin components are.

The `vaadin-core` module includes all open-source components, such as Text Field, Button and Grid. The `vaadin` module extends this set to include all officially supported components in Vaadin, such as Vaadin Charts.

== Vaadin Dependency

The components are part of Vaadin and are included as dependencies, together with Flow.
Each component has a Java API.

Using the platform dependency (`com.vaadin:vaadin`) ensures that all available components, both open source and commercial, are included automatically.
You are guaranteed to get compatible versions of both Flow and the components.

The following example shows how to declare the `vaadin.platform` dependency:

[source,xml]
----
<dependencies>
    <!-| other dependencies -->
    <!-| component dependency -->
    <dependency>
        <groupId>com.vaadin</groupId>
        <artifactId>vaadin</artifactId>
        <version>${vaadin.platform.version}</version>
    </dependency>
</dependencies>
----

.Including component dependencies individually
[NOTE]
It is possible to include components individually by declaring a dependency for each component.
See below for an example.

The platform also includes themes for the components.
You can customize these to ensure that the styling suits your needs.
See <<{articles}/ds/overview#,Design System>> for more information.

You can find additional prebuilt Web Components (with Java APIs) contributed by the Vaadin community in the https://vaadin.com/directory/search[Vaadin Directory].

== Individual Component Dependencies

As an alternative to using the platform dependency, you can declare single components as dependencies.

You should add both the Vaadin `bom` and the relevant Flow component package, for example `vaadin-button-flow`, to your project dependencies.
The Vaadin `bom` binds all Vaadin-related dependencies to a tested combination, so that the individual components can be added safely.
Without the `bom`, some dependencies may change in the future, because of new releases, or because of their use of version ranges.

The following example shows how to add the Button component to your `pom.xml` using Maven:

[source,xml]
----
<dependencyManagement>
    <dependencies>
        <dependency>
            <groupId>com.vaadin</groupId>
            <artifactId>vaadin-bom</artifactId>
            <version>
                ${vaadin.platform.version}
            </version>
            <type>pom</type>
            <scope>import</scope>
        </dependency>
    </dependencies>
</dependencyManagement>

<dependencies>
    <!-| other dependencies -->

    <!-| component dependency -->
    <dependency>
        <groupId>com.vaadin</groupId>
        <artifactId>vaadin-button-flow</artifactId>
    </dependency>
</dependencies>
----
