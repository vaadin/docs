---
title: Single Element
description: Creating a component using a single HTML element.
order: 2
layout: page
---

= Creating a Component Using the Element API

In this section, we demonstrate how to create a component using the [classname]`Element` API and a single DOM element.

*Example*: Creating a `TextField` component based on an `<input>` element.

[source,java]
----
@Tag("input")
public class TextField extends Component {

    public TextField(String value) {
        getElement().setProperty("value",value);
    }
}
----

* The root element is:
** created automatically (by the [classname]`Component` class) based on the `@Tag` annotation.
** Accessed using the [methodname]`getElement()` method.
** Used to set the initial value of the field.

[TIP]
You can use predefined constants in the `@Tag` annotation.
For example, the `@Tag("input")` annotation is equivalent to `@Tag(Tag.INPUT)`.
There are constants for most, but not all, tag names.

== Adding an API

To make the component easier to use, you can add an API to get and set the value.

*Example*: Adding an API using the `@Synchronize` annotation.

[source,java]
----
@Synchronize("change")
public String getValue() {
    return getElement().getProperty("value");
}
public void setValue(String value) {
    getElement().setProperty("value", value);
}
----

* Adding the `@Synchronize` annotation to the getter ensures that the browser sends property changes to the server.
* The annotation defines the name of the DOM event that triggers synchronization, in this case a `change` event.
* Changes to the input element cause the updated `value` property (deduced from the getter name) to be sent to the server.

.Using the @Synchronize annotation
[TIP]
The `@Synchronize` annotation can specify multiple events and override the name of the property, if necessary.

.@Synchronize maps events from the root element
[NOTE]
The `@Synchronize` annotation only maps events that originate from the root element, or are bubbled to the root element.
For example, if you have an `<input>` element inside  a `<div>` element, `@Synchronize` only maps events from the `<div>` element.

See <<property-descriptor#,Using API Helpers to Define Component Properties>> for an alternative, and simpler, way to manage properties and attributes.


== Overriding Default Disabled Behavior

The [methodname]`setEnabled` method is available for all components that implement the [interfacename]`HasEnabled` interface.

.Availability of the setEnabled() method
[NOTE]
The [methodname]`setEnabled()` method is also available for all components that implement the [interfacename]`HasValue`, [interfacename]`HasComponents` or [interfacename]`Focusable` interfaces.

By default, disabling a component adds a `disabled` property to the client element.
You can change this behavior by overriding the [methodname]`Component:onEnabledStateChanged(boolean)` method.

*Example*: Overriding the default disabled behavior to cause items to be updated in a component that has a customized "disabled" indicator.

[source,java]
----
@Override
public void onEnabledStateChanged(boolean enabled) {
    setDisabled(!enabled);
    refreshButtons();
}
----
