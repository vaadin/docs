---
title: Using Vaadin Mixin Interfaces
order: 10
layout: page
---

= Using Vaadin Mixin Interfaces

A "mixin" refers to a defined amount of functionality that can be added to a class.
Traditionally, Java did not support this kind of multiple inheritance but, since Java 8, interfaces can also include default methods, which allows them to work as mixins.

Vaadin Flow uses the mixin concept to provide common APIs and default behavior for sets of functionalities found in most Web Components.

The most important predefined mixins are provided by the [interfacename]`HasSize`, [interfacename]`HasComponents` and [interfacename]`HasStyle` interfaces.
You can use these interfaces to add typical functions to your Java components.

== HasSize Interface

If your component implements the [interfacename]`HasSize` interface, you can set the size of the component using the [methodname]`setWidth(String)` and [methodname]`setHeight(String)` methods.

Methods available in the [interfacename]`HasSize` interface:

* [methodname]`void setWidth(String width)`
* [methodname]`String getWidth()`
* [methodname]`void setHeight(String height)`
* [methodname]`String getHeight()`
* [methodname]`void setSizeFull()`
* [methodname]`void setSizeUndefined()`

== HasComponents Interface

If your component implements the [interfacename]`HasComponents` interface, you can add and remove child components to and from it.

Methods available in the [interfacename]`HasComponents` interface:

* [methodname]`void add(Component... components)`
* [methodname]`void remove(Component... components)`
* [methodname]`void removeAll()`

== HasStyle Interface

Components that implement the [interfacename]`HasStyle` interface can have a class attribute and support inline styles.

Methods available in the [interfacename]`HasStyle` interface:

* [methodname]`void addClassName(String className)`
* [methodname]`boolean removeClassName(String className)`
* [methodname]`void setClassName(String className)`
* [methodname]`String getClassName()`
* [methodname]`ClassList getClassNames()`
* [methodname]`void setClassName(String className, boolean set)`
* [methodname]`boolean hasClassName(String className)`
* [methodname]`Style getStyle()`
* [methodname]`void addClassNames(String... classNames)`
* [methodname]`void removeClassNames(String... classNames)`

== Using Mixin Interfaces

*Example*: Creating a custom `Tooltip` component that implements the [interfacename]`HasComponents` and [interfacename]`HasStyle` interfaces.

[source,java]
----
public class Tooltip extends Component
        implements HasComponents, HasStyle {

}
----

[source,javascript]
----
class Tooltip extends PolymerElement {
    static get template() {
        return html`
            <div part="content" theme="dark">
                <slot></slot>
            </div>`;
    }
}
----

* A component that implements [interfacename]`HasComponents` needs to extend from a tag that supports having child components.
The `slot` tag is used in Web Components to define where child components should be put.

When you implement the [interfacename]`HasComponents` interface, adding child components to the parent component is allowed automatically.

*Example*: Adding new `H5` and `Paragraph` child components to the `Tooltip` parent component.

[source,java]
----
Tooltip tooltip = new Tooltip();

tooltip.add(new H5("Tooltip"));
tooltip.add(new Paragraph("I am a paragraph"));
----

== Other Useful Mixin Interfaces

Vaadin Flow provides many additional useful mixin interfaces:

* [interfacename]`HasEnabled`: Interface for components and other UI objects that can be enabled or disabled.
* [interfacename]`HasElement`: Marker interface for any class that is based on an [classname]`Element`.
* [interfacename]`HasDataProvider<T>`: Generic interface for listing components that use a data provider to display data.
* [interfacename]`HasValidation`: Interface that supports input validation.
* [interfacename]`HasItems`: Mixin interface for components that display a collection of items.
* [interfacename]`HasOrderedComponents`: Interface that supports ordered child components, with an index for the layout.
* [interfacename]`HasText`: Interface that supports text content.
* [interfacename]`Focusable<T>`: Interface that provides methods to gain and lose focus.


== Advantages of Using Mixin Interfaces

Using Vaadin mixins is a best practice, because their code and functionality has been thoroughly checked and tested by Vaadin.

Mixins also keep your code clean and simple.
For example, compare setting component width:

* Without mixins: [methodname]`getElement().getStyle().set("width", "300px")`.
* After implementing the [interfacename]`HasSize` interface: [methodname]`setWidth("300px")`.
