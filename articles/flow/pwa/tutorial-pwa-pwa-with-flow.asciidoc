---
title: Creating PWAs with Vaadin
order: 2
layout: page
---

= Creating PWAs with Vaadin

The Vaadin server automatically serves the needed resources for a PWA, when you use the `@PWA` annotation in the root layout of your application. 

*Example*: Using the `@PWA` annotation with the `@Route` annotation to automatically serve PWA resources. 

[source,java]
----
@PWA(name = "My Progressive Web Application",
     shortName = "MyPWA")
@Route("")
public class MyPWA extends Div {
    public MyPWA() {
        setText("Welcome to my PWA");
    }
}
----
* Vaadin server automatically serves the <<tutorial-pwa-web-app-manifest#,web manifest>>, <<tutorial-pwa-service-worker#,service worker>>, <<tutorial-pwa-icons#,icons>>, <<tutorial-pwa-offline#,offline page>>, and installation prompt, and adds the necessary additions to the application headers. 
* The `shortName` parameter should not exceed 12 characters. See <<tutorial-pwa-web-app-manifest#,PWA Web App Manifest>> for a list of `@PWA` annotation parameters you can use.

[NOTE]
You can only have one `@PWA` annotation per application. The annotation must be placed in the application's parent layout, or in a view annotated with `@Route`.


[discussion-id]`A9C32973-4754-4F10-998F-FB4E64E1093B`

