---
title: PWA Service Worker
order: 5
layout: page
---

= PWA Service Worker

When the `@PWA` annotation exists, Vaadin automatically generates a simple service worker during application startup.

The generated service worker:

* Caches <<pwa-offline#,offline resources>>, including the TypeScript views, offline page, icons, and custom (user-defined) offline resources.
* Handles the <<pwa-offline#,offline experience>>, by serving the TypeScript views offline, or the separate offline page.

[NOTE]

The service worker can only respond to full navigation events, like refresh or direct navigation to a URL.

The service worker uses https://developers.google.com/web/tools/workbox/[Google Workbox] to cache resources.

== Defining Custom Cache Resources

You can define custom resources to be cached automatically by the service worker, using the `offlineResources` parameter in the `@PWA` annotation.

*Example*: Defining `styles/offline.css`, `img/offline.jpg` and `js/jquery.js` as offline resources for caching.

[source,java]
----
@PWA(name = "My Progressive Web Application",
     shortName = "MyPWA",
     offlineResources = {
        "styles/offline.css", "js/jquery.js", "img/offline.jpg" })
----

== Overriding the Generated Service Worker

You can override the generated service worker with a custom service worker.

To override the generated service worker file, create the file named `sw.ts` in the `frontend` folder.

[NOTE]
To ensure that your custom service worker deals with offline support and resource caching properly, you can copy the default service worker from `target/sw.ts` and use it as a template.
