---
title: Overview
order: 1
layout: page
---

= Progressive Web Applications

Progressive Web Applications (PWAs) combine new technologies with established best practices. They allow you to create reliable, accessible, and engaging applications that give users a native-like experience, with a user-friendly opt-in installation flow, and a capability to work offline.

For a generic introduction to PWA, please see the article on https://vaadin.com/pwa[What are Progressive Web Applications and Why Build a PWA].

== Basic PWA Concepts

All PWAs have the following common basic features that enable native-app-like behavior:

* *Web App Manifest*: This provides information about an application, for example its name, theme, icon, and description. These details are needed to make an installable version of web application.

* *Service Worker*: This is a type of web worker. Essentially, it is a JavaScript file that:
** Runs separately from the main browser thread.
** Intercepts network requests.
** Caches and retrieves resources from the cache.
** Delivers Push messages.

The ability to intercept network requests makes it possible to serve files directly from the browserâ€™s cache and create a full application experience, even when no network is available.

== Creating PWAs with Flow

Vaadin Flow automatically serves the needed resources for a PWA when you use the `@PWA` annotation in the
<<../advanced/modifying-the-bootstrap-page#application-shell-configurator,Application Shell>>.
The `@PWA` annotation must be placed in the Application Shell class.

*Example*: Using the `@PWA` annotation to automatically serve PWA resources.

[source,java]
----
@PWA(name = "My Progressive Web Application",
     shortName = "MyPWA")
public class AppShell implements AppShellConfigurator {
}
----
* Vaadin server automatically serves the <<pwa-web-app-manifest#,web manifest>>, <<pwa-service-worker#,service worker>>, <<pwa-icons#,icons>>, and <<pwa-offline#,offline experience>>, and adds the necessary additions to the application headers. 
* The `shortName` parameter should not exceed 12 characters. See <<tutorial-pwa-web-app-manifest#,PWA Web App Manifest>> for a list of `@PWA` annotation parameters you can use.

== Application Installation Requirements

To support installation on devices, the following additional features are required. These depend on the device and browser used:

*Icons*::
Different icon sizes are needed to support different devices.
To enhance the experience, splash screen images are also required.

*Offline support*::
The service worker must be able respond to serve the client if a network is not available.

*Header information*::
The application must include browser and/or device-specific theming and icon data in the header. This is in addition to the manifest file. 

*HTTPS*::
Many new browser features, including those required for PWAs, require HTTPS.
Even if your PWA currently works without HTTPS in some environments (for example, Android), this is likely to change and it is probable that PWAs that do not support HTTPs will malfunction in the future.
