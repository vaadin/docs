---
title: PolymerTemplate, Dynamically Adding Server-side Components to Templates
order: 12
layout: page
---

= PolymerTemplate, Dynamically Adding Server-side Components to Templates

*Usage of polymer based templates is deprecated since Vaadin 18 and we recommend using Lit based templates instead.*

== Using the <slot> Element

*Example*: `<slot>` element in a JavaScript Polymer template.

[source,js]
----
import {PolymerElement,html} from '@polymer/polymer/polymer-element.js';

class ComponentContainer extends PolymerElement {
    static get template() {
        return html`
            <div>
                <slot></slot>
            </div>`;
    }

    static get is() {
        return 'component-container';
    }
}

customElements.define(ComponentContainer.is, ComponentContainer);
----

*Example*: Mapped Java template class.

[source,java]
----
@Tag("component-container")
@JsModule("./com/example/component-container.js")
public class ComponentContainer extends PolymerTemplate<TemplateModel> {

    public ComponentContainer() {
        Element label = ElementFactory.createLabel("Main layout header");
        Element button = ElementFactory.createButton("Click me");

        getElement().appendChild(label, button);
    }
}

----
* Without the `<slot>` tag in the JavaScript Polymer template, the `label` and `button` would not be visible to the user, even though they can be located in the DOM.
* You can add multiple components that will display in the slot when added to a template element with an open `<slot></slot>`.
* You can remove any element from a `<slot>`. It will work as expected and no longer display in the main element.
