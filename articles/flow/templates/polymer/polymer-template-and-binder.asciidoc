---
title: Combining Templates and Binders
order: 11
layout: page
---

= Combining Templates and Binders

[role="deprecated:com.vaadin:vaadin@V18"]
--
*Polymer templates are deprecated.
Lit templates are recommended instead.*
--

== Creating the Template Component

The first step is to create the JavaScript Polymer template and its mapped Java class.

*Example*: Creating the `user-form` JavaScript Polymer template.

[source,javascript]
----
import { PolymerElement, html } from '@polymer/polymer/polymer-element.js';
import '@vaadin/checkbox';
import '@vaadin/form-layout';
import '@vaadin/text-area';
import '@vaadin/text-field';
import './form-buttons-bar.js'

class UserForm extends PolymerElement {
    static get template() {
        return html`
            <style>
            </style>
            <vaadin-form-layout id="form">
                <vaadin-text-field id="email" label="Email (login)" colspan="2"></vaadin-text-field>
                <vaadin-text-field id="first-name" label="First Name"></vaadin-text-field>
                <vaadin-text-field id="last-name" label="Last Name"></vaadin-text-field>
                <vaadin-text-area id="comments" label="Comments"></vaadin-text-area>
            </vaadin-form-layout>
            <form-buttons-bar id="action-buttons"></form-buttons-bar>`;
    }

    static get is() {
          return 'user-form';
    }
}

customElements.define(UserForm.is, UserForm);
----

*Example*: Creating the mapped [classname]`UserForm` Java template class.

[source,java]
----
@Tag("user-form")
@JsModule("./src/user-form.js")
public class UserForm extends PolymerTemplate <UserForm.FormComponentModel> {

  @Id("email")
  private TextField email;

  @Id("first-name")
  private TextField firstName;

  @Id("last-name")
  private TextField lastName;

  @Id("comments")
  private TextArea comment;

  @Id("action-buttons")
  private FormButtonsBar actionButtons;
----

== Creating and Linking the Binder

== Creating the Main View

First, we create the [classname]`MainView` Polymer template component.
This component displays a grid of users and our new `UserForm` component.
For the grid, we use the Vaadin <<{articles}/ds/components/grid#,`Grid` component>>.

Here is the result.

image:images/template-and-binder-first-result.png[MainView]

*Example*: Creating the `main-view` JavaScript Polymer template.

[source,javascript]
----
import { PolymerElement, html } from '@polymer/polymer/polymer-element.js';
import '@vaadin/grid'
import './user-form.js';

class MainView extends PolymerElement {
    static get template() {
        return html`
            <style>
            </style>
            <div id="main-container">
                <vaadin-grid id="users-grid"></vaadin-grid>
                <user-form id="user-form"></user-form>
            </div>`;
    }

    static get is() {
          return 'main-view';
    }
}

customElements.define(MainView.is, MainView);
----

*Example*: Creating the mapped [classname]`MainView` Java template class.

[source,java]
----
@Tag("main-view")
@JsModule("./src/main-view.js")
@Route("")
public class MainView extends PolymerTemplate<TemplateModel> {

    @Id("user-form")
    private UserForm userForm;

    @Id("users-grid")
    private UsersGrid usersGrid;
}
----
