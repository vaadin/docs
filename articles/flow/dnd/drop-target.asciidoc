---
title: Drop Target
description: Make any component a drop target that the user can drop things on to.
order: 30
layout: page
---

= Creating a Drop Target

With the [classname]`DropTarget` class, you can make any component a drop target that the user can drop things on to.
When the drop occurs, you can get an event on the server side and obtain the data related to the drag operation when the drag originates from the same UI (browser window/tab).
The [classname]`DropTarget` class is a configuration object for the drop target and contains static methods for configuring the given component as a drop target instance.

[source,java]
----
VerticalLayout first = new VerticalLayout();
VerticalLayout second = new VerticalLayout();

// Make the first layout an active drop target
DropTarget<VerticalLayout> dropTarget = DropTarget.create(first);

// Provide access to drop target API for second layout,
// without setting it as an active drop target.
DropTarget<VerticalLayout> dropTarget2 = DropTarget.configure(second);

// Change previously set settings
dropTarget2.setDropEffect(DropEffect.NONE);
----

The [classname]`DropTarget` configuration object does not itself store any data, as it is just an API extension that facilitates making any component a drop target.
Creating a new [classname]`DropTarget` instance of a component will not reset any previous configuration, but any changes will override the previous configuration.

Similarly to the [interfacename]`DragSource`, the [interfacename]`DropTarget` is a "mix-in interface" that can be added to any custom component to expose the drop target API for it.

[source,java]
----
public class Column extends VerticalLayout implements DropTarget<VerticalLayout> {

    public Column() {
        // Allow drops by default
        setActive(true);
    }

    // All drop target methods have default implementations
}
----

== Reacting to Drops

When the user performs a valid drop on the browser, the [classname]`DropEvent` is fired.
You can listen to the event with a [classname]`DropListener`.
If the drag originated from within the same Vaadin UI, you can retrieve the dragged component or the assigned business data from the [classname]`DropEvent`.

[source,java]
----
Div box = new Div();
box.setWidth("300px");
box.setHeight("300px");

DropTarget<Div> dropTarget = DropTarget.create(box);

dropTarget.addDropListener(event -> {
    // move the dragged component to inside the drop target component
    if (event.getDropEffect() == DropEffect.MOVE) {
        // the drag source is available only if the dragged component is from
        // the same UI as the drop target
        event.getDragSourceComponent().ifPresent(box::add);

        event.getDragData().ifPresent(data -> {
            // the server side drag data is available if it has been set and the
            // component was dragged from the same UI as the drop target
        });
    }
});
----

You can read more about setting the server-side drag data from the previous chapter, <<drag-source#drag.data,Drag Source>>.
At the moment, there is no way to retrieve any client-side drag data from the drop event.

== Controlling the Drop with Drop Effect

The [classname]`DropEffect` set for the drop target needs to match the `effectAllowed` set for the drag operation in order for the drop to succeed.

The drop effect is determined in priority order by:

* the desired action `dropEffect` set by the drop target;
* the `effectAllowed` set for the drag source;
* the modifier keys the user presses and holds when dropping.

This means that not setting a drop effect for a drop target will allow either the drag source or the user to determine the drop effect.
The possible values for the drop effect are: `COPY`, `MOVE`, `LINK` and `NONE`.
Setting the drop effect to `NONE` means that the drop cannot occur, and thus no [classname]`DropEvent` will be fired.

.Drop effect on Edge and Safari
[NOTE]
If the drop effect set for the drop target does not match the `effectAllowed` of the drag source, it *does not* prevent drop on Edge and Safari.
For FireFox and Chrome, the drop is prevented when the properties do not match.
Edge and Safari allow the drop but do not prevent the drop on the `DragEnd` event.

== Drop Target Styling

When there is a valid drag over the drop target, the drop target element will receive the `v-drag-over-target` class name automatically while the dragged object stays over the drop target.
The class name is removed when:

* the drop occurs, or
* the drop is canceled, or
* the object is moved outside the drop target.

[source,css]
----
.v-drag-over-target.card {
    outline: 1px solid lightgreen;
}
----

Depending on the desired user experience, you might consider highlighting the possible drop targets for a started drag during the [classname]`DragStart` event.
See an example of this in the <<drag-source#, `DragSource`>> documentation.
