---
title: Drag Source
description: Make any component draggable by the user and configure the drag operation.
order: 20
layout: page
---

= Creating a Drag Source

With the [classname]`DragSource` class, you can make any component draggable by the user, and configure the drag operation.
By default, the entire component will be made draggable, and not just a small part of it.
The [classname]`DragSource` class is a configuration object for the dragged item and contains static methods for configuring the given component instance.

[source,java]
----
Div box1 = new Div();
Div box2 = new Div();

// Make box 1 draggable and store reference to the configuration object
DragSource<Div> box1DragSource = DragSource.create(box1);

// Access box 2 drag related configuration object without making it draggable
DragSource<Div> box2DragSource = DragSource.configure(box2);

// Make box 2 draggable
box2DragSource.setDraggable(true);

add(box1, box2);
----

The [classname]`DragSource` configuration object does not itself store any data, as it is just a convenience proxy that facilitates making a component draggable.
Creating a new [classname]`DragSource` instance of a component will not reset any previous configuration, but any changes will override the previous configuration.

When a component is set draggable on the server side, the `draggable` attribute is assigned to its topmost element on the browser, making it draggable.
When the user starts to drag the component, the root element of the component gets the `v-dragged` class name in the browser.
This can be used to highlight the dragged component to the user.

[source,css]
----
.v-dragged.card {
    outline: 1px dotted hotpink;
    opacity: 0.5;
}
----

== Exposing the Drag Source API on your Component

As the [interfacename]`DragSource` is an interface, it can also be used as a "mix-in interface", which gives an easy way to add its API to your custom component.
This useful when you want to reuse the component in many places for drag operations.

[source,java]
----
public class CardComponent extends Div implements DragSource<CardComponent>, HasStyle {
    public CardComponent() {
        // all cards will be draggable by default
        setDraggable(true);
    }
    // all DragSource methods have default implementations
}
----

[drag.data]
== Assigning Server-Side Data to the Drag Source

It is possible to set any Java object as the server-side drag data for the drag
source.
This data will be provided on the [classname]`DropEvent` when the drop occurs on a valid drop target, if it is inside the same UI (browser window / tab) as the drag source component.

[source,java]
----
// continuing from the previous example, CardComponent implements DragSource
CardComponent card1 = new CardComponent();
CardComponent card2 = new CardComponent();

card1.setDragData("Queen of Hearts");
card2.setDragData(new Card(11, Land.Spade)); // the data can be any object
----

The data will not be sent to the browser, as it is stored in the component instance as server-side-only data.

Note that it is not currently possible to configure the client-side drag data, the _dataTransfer_ object, from the server side.
This will become available in the future.

== Drag Start and End Events

The [interfacename]`DragSource` provides a way to react when the user starts and stops dragging a component.
The [classname]`DragStartEvent` is fired when the drag starts in the browser, which means that you cannot cancel the drag.
You should avoid doing any heavy synchronous processing there, since this blocks the user from dragging the component further in the browser.
This has a negative effect on the UX.

[source,java]
----
// Continuing from the previous example with CardComponent
card1.addDragStartListener(event -> {
    // Highlight suitable drop targets in the UI
    getVisibleCards().forEach(target -> {
        Card targetCard = target.getCard();
        if (targetCard.getLand() == ((Card) card1.getDragData()).getLand()
                && target != card1) {
            target.addClassName("possible-drop-zone");
        }
    })
});
----

When the user stops dragging the component by either dropping it or by canceling the drag with, for example, the escape key, the [classname]`DragEndEvent` is fired.
The [methodname]`isSuccessful()` method returns `true` if the drop occurred on a drop target that accepted the drop, but only for Chrome and Firefox (read the note after the sample).

[source,java]
----
card1.addDragEndListener(event -> {
    getVisibleCards().forEach(target -> target.removeClassName("possible-drop-zone"));
    // NOTE: The following is always FALSE for Edge and Safari !!!
    if (event.isSuccessful()) {
        // Better to put logic for successful drop into DropEvent for the
        // DropTarget because of the above
    }
});
----

.Handling drag end in Edge and Safari
[NOTE]
Unfortunately, Edge and Safari do not report whether the drop occurred successfully or not in the [classname]`DragEnd` event.
You need to take this into account if your users will be using any of these browsers, and do any logic in the [classname]`DropEvent` handler of the [classname]`DropTarget` instead.
For Chrome and Firefox, it works correctly.

=== The Effect Allowed and Drop Effect

It is possible to customize the `effectAllowed` for the drag source.
This has an effect on what the browser visually presents to the user and should match what is set in the drop target as the `dropEffect`.
The [classname]`DragEndEvent` reports the `dropEffect` for the drop event.

The value will be determined in priority order by:

* the desired action `dropEffect` set by the drop target;
* the `effectAllowed` set for the drag source;
* the modifier keys the user presses and holds when dropping.

When the drop effect is `MOVE`, you should move / remove the drag source component from its original location.
When the drop effect is `NONE`, the drop did not occur and [methodname]`dropEvent.isSuccessful()` returns `false`.

=== Customizing the Draggable Element

You can customize the element that will be made draggable by overriding the [methodname]`getDraggableElement()` method in the [interfacename]`DragSource` interface.
This is useful if it is not the whole component that is to be draggable, but only a part of it.

[source,java]
----
/* NOTE: RouteItem is a made up custom component, not a core Vaadin component. */
public class DraggableRouteItem extends RouteItem implements DragSource<RouteItem> {
    private Icon dragHandle = VaadinIcon.MENU.create();

    public DraggableRouteItem(String destination) {
        super(destination);
        add(dragHandle);
    }

    // Instead of allowing the whole item to be draggable, only allow dragging
    // from the icon.
    @Override
    public Element getDraggableElement() {
        return dragHandle.getElement();
    }
}
----

Note that changing the draggable element will also change the drag image that the browser shows under the cursor.
HTML 5 has an API for setting a custom drag image element, but it is not yet available from the server-side API, because it works unreliably in some browsers (Edge / Safari).
