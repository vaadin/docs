---
title: Handling Events
order: 20
layout: page
---

[[application.events]]
= Handling Events

For handling user interaction, Vaadin Flow uses _event-driven programming_.
User interaction with the UI in the browser causes events.
Flow passes the events from the browser to the server-side, where your application code can handle them.
You need to implement an _event listener_ for each component that the user can interact with.

You can implement event listeners with regular classes, anonymous classes, lambda expressions, or method references.

== Implementing an Event Handler

Let us first look at the verbose way to handle events, by implementing an interface for an event type.
This way we can learn how events really are handled.

Each way of user interaction fires a different event type.
For example, clicking a button fires a [classname]#ClickEvent<Button># event.
Such events can be handled by implementing a [interfacename]#ComponentEventListener# for the event type.
The events are handled in the [methodname]#onComponentEvent()# method.

An event listener needs to be added to the component with an event-type specific method `add*Listener()`, such as with [methodname]#addClickListener()#.
Many components also allow passing it in the constructor.

In the following, we implement the click listener as a local class:

[.example.show-code]
--

[source, java]
----
include::{root}/src/main/java/com/vaadin/demo/flow/application/events/EventsBasic.java[render,tags=snippet,indent=0,group=Java]
----

--

As shown in the example, you can access the originating component with [methodname]#getSource()# from the event.

== Lambda Expressions

Lambda expressions are the easy way in Java to implement interfaces that only have a single method to implement, which is the case with event listeners.

For example, in the following, we use a lambda expression to handle button click events:

[.example.show-code]
--

[source, java]
----
include::{root}/src/main/java/com/vaadin/demo/flow/application/events/EventsLambda.java[render,tags=snippet,indent=0,group=Java]
----

--

Most components, like Button above, allow passing a listener to the constructor.
For others, you need to use an `add*Listener()` method, such as [methodname]#addClickListener()#, as was done in the other example earlier.


[[application.events.anonymous]]
== Using Anonymous Classes

Anonymous classes are another shorthand way to implement handlers.
They are more explicit than lambda expressions with the parameter type, and can in that way make the code more clear.
They can also have a state like normal classes.

The following example defines an anonymous class that inherits the [classname]#Button.ClickListener# interface.


[.example.show-code]
--

[source, java]
----
include::{root}/src/main/java/com/vaadin/demo/flow/application/events/EventsAnon.java[render,tags=snippet,indent=0,group=Java]
----

--

Most components, like Button, allow passing a listener to the constructor.
For others, you need to use an `add*Listener()` method, such as [methodname]#addClickListener()#.

Note that to be able to access the component from the anonymous listener class, you can have a reference to the component that is declared before the constructor is executed, for example as a member variable in the outer class.
You can also to get a reference to the component from the event object, as was done in the example above.

== Handler Methods

You can also direct events to methods with method references:

[.example.show-code]
--

[source, java]
----
include::{root}/src/main/java/com/vaadin/demo/flow/application/events/EventsMethod.java[render,tags=snippet,indent=0,group=Java]
----

--
