---
title: Overview
order: 1
layout: page
---

[[application.overview]]
= Creating a Flow Application

Vaadin Flow lets a server-side Java application build a user interface from components in Java, which are connected to web components running in the browser.
Flow manages relaying user interaction back to the server side application, which can handle it with event listeners.

Application views and their components are typically used to display and input application data, often stored in a backend service such as database.
Application logic is often created with application frameworks such as Spring.

image::images/application-architecture.png[]

The basic aspects of a Flow application are as follows:

<<ui#, Building a UI>>::
An application consists of one or more views built hierarchically from user interface components.
Views can be nested, such as a main view displaying sub-views.

<<events#, Handling Events>>::
Flow relays user interaction back to the server-side as component events, which the application can handle in Java code using an event handler.
An event handler is an implementation of an event listener interface, such as a lambda expression or an anonymous class, and you can also use handler methods.

<<routing-navigation#, Basic Routing and Navigation>>::
Each view has a route through which it can be accessed by a URL.
Interaction with the application includes navigation between the different views.
+
Routing and Navigation are further described in <<../routing/overview#, Routing and Navigation>>.

<<main-view#, Creating a Main View>>::
Applications often have a main view with a menu bar to show a selection of sub-views.
When the user clicks on a menu item, the sub-view is displayed.
The [classname]#AppLayout# component allows creating such views easily, supporting navigation and responsive layouts.

<<resources#, Images and Icons>>::
Images and icons are basic visual features of an application.
Vaadin Design System comes with <<../../ds/foundation/icons#, two sets of icons>> that you can use in your application.

<<errors#, Handling Errors>>::
User input, backend failures, and other reasons can cause various types of application errors.
An application should handle them in a robust way.

<<templates#, Component Templates>>::
Instead of Java code, UIs can be defined using JavaScript component templates.
They are composites with server-side APIs.

