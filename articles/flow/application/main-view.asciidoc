---
title: Creating a Main View
description: |
  Applications often have a main view with a menu bar that shows a selection of sub-views.
  When the user clicks on a menu item, the sub-view is displayed.
order: 18
layout: page
---

[[flow.application.main-view]]
= Creating a Main View

The [classname]`AppLayout` component allows you to create typical main views that have a header, a menu, and a content area.
// TODO Actually still need to wire it by yourself
It works with full routing and navigation, making it easier to set these up than wiring them yourself.
It is responsive to changes in the screen size and orientation, and adapts to both desktop and mobile browsers.

.A main view created with the project builder
image::images/starter-main-view.png[]

[classname]`AppLayout` is highly flexible and enables a range of main view layouts that can have either horizontal or vertical menus.
These can be displayed statically or opened by clicking, and have many customizable elements.
See <<{articles}/ds/components/app-layout#, the Design System documentation>> for a showcase of the features.

By default, the starter applications created with https://start.vaadin.com[Vaadin Start] use [classname]`AppLayout` to create the main view.

[[flow.application.main-view.main-view]]
== The Main View

A main view uses [classname]`AppLayout` by extending it and setting up the elements in the constructor.
You need to set the content for the header and the drawer.
You can have an application menu either horizontally in the header (navigation bar) or vertically in the drawer.

The following example shows how to create a main view with a vertical menu in the drawer, and a button to open and close it in the navigation bar:

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/flow/application/mainview/MainView.java[tags=mainview,indent=0]
----

You can customize the styling by specifying the path to the CSS files with the `@CssImport` annotation.
The stylesheets should be placed below the `frontend` folder in the project.
In a similar way, you can include JavaScript code with the `JsModule` annotation.
In the example, we include a JavaScript file that sets shared custom styles.
See <<../advanced/loading-resources#, Loading Resources>> for more details on importing the CSS and JavaScript resources.

Notice that the main view itself does not have a route, as it is only a frame for the actual content views.

[[flow.application.main-view.header]]
== Creating a Header

The navigation bar of [classname]`AppLayout` is a horizontal element that can contain any component, such as a header or a horizontal menu.
Applications created with the project builder use it to produce a header containing a menu toggle, a view title, and a user image.

.A header with drawer (menu) toggle, view title, and a user avatar.
image::images/starter-main-view-header.png[]

You can use a [classname]`DrawerToggle` component to toggle displaying the drawer.

The following example creates such a header, using the `viewTitle` member in the main view class:

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/flow/application/mainview/MainView.java[tags=header,indent=0]
----

[[flow.application.main-view.menu]]
== Creating a Menu

A menu can be displayed either in the navigation bar or in the drawer.
In an application created by the project builder, it is displayed in the drawer, as described here.

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/flow/application/mainview/MainView.java[tags=drawer,indent=0]
----

The actual menu is a vertical [classname]`Tabs` component.
It is filled from a list of [classname]`Tab` components.
Each tab contains a [classname]`RouterLink` to the corresponding view.

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/flow/application/mainview/MainView.java[tags=menu,indent=0]
----

[[flow.application.main-view.navigation]]
== Handling Navigation

When the user navigates to a view, the tab for the view should be highlighted by setting it as selected.
You can also set the view title in header.

You can do both these things by overriding [methodname]`afterNavigation()` in [classname]`AppLayout`, as follows:

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/flow/application/mainview/MainView.java[tags=navigation,indent=0]
----

pass:[<!-- vale Vaadin.Weasel = NO -->]
The selected tab should correspond to the displayed content (the view).
pass:[<!-- vale Vaadin.Weasel = YES -->]

You can retrieve it as follows:

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/flow/application/mainview/MainView.java[tags=selection,indent=0]
----

You can get the view title from the `PageTitle` annotation given to the view (see <<flow.application.main-view.view>>).

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/flow/application/mainview/MainView.java[tags=pagetitle,indent=0]
----

The same title is automatically set as the page title in the browser, so you do not need to handle that.


[[flow.application.main-view.view]]
== Creating a View

Like any view, a view displayed in an [classname]`AppLayout` needs a route defined with the `@Route` annotation.
The route needs to be linked to the main view by using the `layout` parameter to pass the class object of the main view.

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/flow/application/mainview/HelloWorldView.java[tags=route,indent=0]
----

Notice that the main view itself did not have a route.
To have an entry point to the main view, and often to the entire application, you need to define a default view.
You do this using a route alias, as described in <<flow.application.main-view.view.default>>.

=== Page Title

You can set the page title shown in the browser window or tab using the `@PageTitle` annotation.

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/flow/application/mainview/HelloWorldView.java[tags=pagetitle,indent=0]
----

You can use the page title in a view header or breadcrumbs, as shown in <<flow.application.main-view.navigation>>.

=== Styling a View

You can define custom styling for the view with the `@CssImport` annotation.

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/flow/application/mainview/HelloWorldView.java[tags=styling,indent=0]
----

[[flow.application.main-view.view.default]]
=== Default View

Most applications need an entry point.
You can define a view as the default view by defining the route of the main view with `@RouteAlias`.
The `value` defining the route needs to be empty for the root route.

You also need to define the enclosing main view with the `layout` parameter, as for the earlier route.

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/flow/application/mainview/HelloWorldView.java[tags=default,indent=0]
----

You could also have `/main` for the main view and then `/main/hello` for the sub-view.

=== Finishing the View

Otherwise a view displayed in [classname]`AppLayout` is like any other view or a composite component.

[source,java]
----
include::{root}/src/main/java/com/vaadin/demo/flow/application/mainview/HelloWorldView.java[tags=snippet,indent=0]
----
