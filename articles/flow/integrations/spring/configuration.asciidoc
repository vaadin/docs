---
title: Configuration
order: 60
layout: page
---

= Vaadin Spring Configuration

You can use many properties to configure your Vaadin application.
See, for example, the [classname]`com.vaadin.server.DeploymentConfiguration` and [classname]`com.vaadin.server.Constants` classes for the numerous property names.
In addition to these properties, you can also set Spring properties as system properties.
Spring configuration properties have the same names, but are prefixed with `vaadin.`.

== Special Configuration Parameters

=== Configure the Scanning of Packages

To decrease the startup time during development as well as the build time for the production bundle, Flow automatically excludes a number of packages (such as the ones belonging to the `java` and `springframework` packages) from being scanned for annotations.
The set of packages that Vaadin Flow excludes by default are defined in the [classname]`VaadinServletContextInitializer` class.
You can extend this list using the `vaadin.blacklisted-packages` property, which is a comma-separated string that can be used to exclude packages from being scanned.

.application.properties
[source,properties]
----
vaadin.blacklisted-packages=org/bouncycastle,com/my/db/package
----

`whitelisted-packages` is a comma-separated string that can be used to specify
the only packages that need to be scanned for UI components and views.
In order to improve performance during development, we recommended setting this property, especially in big applications.
Note that [classname]`com/vaadin/flow/component` is implicitly included and is always scanned.

.application.properties
[source,properties]
----
vaadin.whitelisted-packages=com/foo/myapp/ui,com/foo/components
----

[NOTE]
You should use either `whitelisted-packages` or `blacklisted-packages`.
If both of them have values, `blacklisted-packages` is ignored.

=== Launch the Browser Automatically in Development Mode

You can configure a Spring Boot project to launch the default browser automatically when starting the application in development mode via the following property:

.application.properties
[source,properties]
----
vaadin.launch-browser = true
----

== Using Spring Boot Properties

You can set properties for Spring Boot in your [filename]#application.properties# file.

*Example*: Setting Spring URL mapping in [filename]#application.properties#.

[source,ini]
----
vaadin.urlMapping=/my_mapping/*
----
* By default, URL mapping is `/*`.

[NOTE]
An additional servlet, such as `/my_mapping/*`, is required to handle the front-end resources for non-root servlets.
The servlet can be defined in your application class.
See https://raw.githubusercontent.com/vaadin/flow-and-components-documentation/master/tutorial-servlet-spring-boot/src/main/java/org/vaadin/tutorial/spring/Application.java[`Application` class] for a example.

== Configuring Spring MVC Applications

If you use <<spring-mvc#,Spring MVC>>, and hence the [classname]`VaadinMVCWebAppInitializer` subclass, you need to populate your configuration properties yourself.

*Example*: Setting configuration properties in a Spring MVC application.

[source,java]
----
@Configuration
@ComponentScan
@PropertySource("classpath:application.properties")
public class MyConfiguration {

}
----
* The [filename]#application.properties# file is still used, but you can use any name and any property source.
