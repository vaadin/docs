---
title: Appendix A - Address Book Example Project Demonstration
order: 101
description: Describes how to build two Vaadin Portlets that communicate with each other as a multi-module project
---

= Demonstration: Address Book

This demonstration brings together all the topics covered in the previous chapters.
The focus of this chapter is on using inter-portlet communication between two Vaadin Portlets.
Using this document along with the demonstration code, you will be able to understand the demonstration code and build similar applications yourself.

The learning goals are:

- Why events are needed
- How to send events from one Vaadin Portlet to another
- How to listen for events from other Vaadin Portlets
- How to update the portlet's state based on the event

The source code with a complete project for this example is available in

* https://github.com/vaadin/addressbook-portlet/tree/feature/liferay/[Address Book for Liferay 7]

== Address Book Project Structure

The address book demonstration shows how to build a simple address book application using Vaadin Portlets.
The address book consists of two portlets.
One portlet, _Contact List_, displays all the available contacts the user has.
The other portlet, _Contact Form_, shows the information about the contact selected via the contact list.
Contact Form portlet also allows the user to edit the existing contact.

The project is structured as a multi-module project and has the following four modules:

* `addressbook-backend` +
Holds the shared-data layer for both portlets.
* `addressbook-bundle` +
Builds the frontend resource bundle for both portlets.
* `addressbook-form` +
Contact information portlet.
* `addressbook-grid` +
Contact list portlet.
* `portal` +
Configuration for automatically setting up and running a Pluto portal using the Cargo plugin.

In this chapter we focus on the portlet implementations.
To get more familiar with setting up and maintaining a multi-module Vaadin Portlet project, take a look at the next chapter, <<creating-multi-module-portlet-project.asciidoc#,Creating Multi-Module Portlet Project>>.

=== Structure

The address book consists of two portlets and their view components.
The classes ending in `Portlet` are classes that extend [classname]`VaadinLiferayPortlet`, and classes ending in `View` are the view component classes for the portlets.

- Contact List: [classname]`ContactListPortlet` and [classname]`ContactListView` (in the `addressbook-grid` module)
+
Responsible for displaying the available contacts in the address book.
Allows the user to select a contact to be displayed in the Contact Form.

- Contact Form: [classname]`ContactFormPortlet` and [classname]`ContactFormView` (in the `addressbook-form` module)
+
Responsible for displaying and modifying the contact information in the address book.

The other classes are there to provide business logic and mock implementations for data services

=== Functionality Requirements as Portlets

==== Contact List
The portlet operates in only one portlet mode, `view`, and the user cannot change the mode.
When the user selects a contact from the list, the contact's details are displayed on the _Contact Form_ portlet.
When the contact's information is changed in the _Contact Form_ portlet, the relevant contact information is updated on the list.
The list shows a limited number of contact attributes, including first name, last name, and phone number.
When the portlet is maximized (its window state is changed to MAXIMIZED) more attributes are shown, including email and birthday.

In order to provide this functionality, the _Contact List_'s view class needs to

- be able to receive events
- be able to send events
- be able to react to window state changes

These requirements can be fulfilled by implementing the [interfacename]`PortletView` interface.

==== Contact Form
The portlet supports two portlets modes: `view` and `edit`.
When the portlet is in `view` mode, the contact information is only displayed and cannot be changed.
When user changes the portlet into `edit` mode, the information can be updated.
After editing the information, the user can either save or discard the changes.

In order to provide this functionality, the _Contact List_ view class needs to

- be able to react to portlet mode changes
- be able to receive events
- be able to send events

These requirements can be fulfilled by implementing the [interfacename]`PortletView` interface.

[NOTE]
We use [interfacename]`PortletView` in both view classes, as it provides a single entry point to the portlet state.
We can both register event listeners and mutate the portlet's state through the [classname]`PortletViewContext` object.
However, if we were interested in only very particular types of updates and did not need to change the state, we could simply implement the [interfacename]`PortletModeHandler`, [interfacename]`WindowStateHandler`, or [interfacename]`EventHandler` interfaces

=== Implementation Details
In this section we have a look at selected parts of the view classes [classname]`ListPortletView` and [classname]`FormPortletView`.
The classes contain code that is not directly related to the portlet implementation and we will skip those parts.

.ListPortletView.java
[source,java]
----
public class ContactListView extends VerticalLayout implements PortletView {
    private ListDataProvider<Contact> dataProvider;

    private Grid<Contact> grid = new Grid<>(Contact.class);

    private PortletViewContext portletViewContext;

    @Override
    public void onPortletViewContextInit(PortletViewContext context) {
        // save context for sending events
        portletViewContext = context;

        // add event listeners for both "contact-updated" custom event
        // and window state change event
        context.addEventChangeListener("contact-updated",
                this::onContactUpdated);
        context.addWindowStateChangeListener(
                event -> handleWindowStateChanged(event.getWindowState()));
        init();
    }

    private void onContactUpdated(PortletEvent event) {
        int contactId = Integer
                .parseInt(event.getParameters().get("contactId")[0]);
        // retrieve the contact information from contact service
        Optional<Contact> contact = getService()
                .findById(contactId);
        // update grid's data provider with the updated contact
        contact.ifPresent(value -> dataProvider.refreshItem(value));
    }

    private ContactService getService() {
        // returns ContactService instance
    }

    private void handleWindowStateChanged(WindowState windowState) {
        if (WindowState.MAXIMIZED.equals(windowState)) {
            grid.setColumns("firstName", "lastName", "phoneNumber", "email",
                    "birthDate");
            grid.setMinWidth("700px");
            // ... rest of the configuration
        } else if (WindowState.NORMAL.equals(windowState)) {
            grid.setColumns("firstName", "lastName", "phoneNumber");
            grid.setMinWidth("450px");
            // ... rest of the configuration
        }
    }

    private void fireSelectionEvent(
            ItemClickEvent<Contact> contactItemClickEvent) {
        // get contact id
        Integer contactId = contactItemClickEvent.getItem().getId();

        // save the id into a string-to-string map
        Map<String, String> param = Collections.singletonMap(
                "contactId", contactId.toString());

        // send the event with name "contact-selected"
        portletViewContext.fireEvent("contact-selected", param);
    }

    private void init() {
        // ... grid initialization

        // add item click listener which fires our contact-selected event
        grid.addItemClickListener(this::fireSelectionEvent);

        // ... rest of the configuration
    }
}
----

The [classname]`ContactListView` view implements the [interfacename]`PortletView` interface.
The [methodname]`onPortletViewContextInit(PortletViewContext)` method in the [interfacename]`PortletView` interface provides the implementing class with a reference to a [classname]`PortletViewContext` object, which allows us to register listeners and change the portlet's state.
Besides [methodname]`onPortletViewContextInit()`, the [classname]`ContactListView` has three important methods from the portlet perspective: [methodname]`fireSelectionEvent()`, [methodname]`handleWindowStateChanged()`, and [methodname]`contactUpdated()`.
Firing the selection event is triggered when user selects a contact in the list.
The method creates a parameter map which contains the id of the selected contact.
We then use the our [classname]`portletViewContext` instance to send the event under the name `contact-selected`.
Other Vaadin Portlet views that have registered listeners for this event name will be notified about the event.

[methodname]`handleWindowStateChanged()` is registered as a listener for the [classname]`WindowStateChange` event.
It is called when, for example, the portlet view is maximized or normalized.
In this method, when the window state is changed to maximized, the minimum width of the grid is set to a higher value and more grid columns are shown.

The other method, [methodname]`contactUpdated()`, is registered as an event listener for `contact-updated` event via the [classname]`PortletViewContext` instance.
The `contact-updated` event has the same parameters as the `contact-selected` event.
We use the contact id to update the correct contact information on the list.

.FormPortletView.java
[source,java]
----
public class ContactFormView extends VerticalLayout implements PortletView {
    private static final String ACTION_EDIT = "Edit";
    private static final String ACTION_CREATE = "Create new";
    private static final String ACTION_SAVE = "Save";

    private PortletViewContext portletViewContext;

    private Binder<Contact> binder;
    private Contact contact;

    private Button action;
    // ... other components

    @Override
    public void onPortletViewContextInit(PortletViewContext context) {
        // save context for sending events
        this.portletViewContext = context;
        // add event listeners for both "contact-selected" custom event
        // and portlet mode change event
        context.addEventChangeListener("contact-selected",
                this::onContactSelected);
        context.addPortletModeChangeListener(this::handlePortletModeChange);
        init();
    }

    // handles "contact-selected" event from PortletListView.
    // we check that the contact ID parameter is correct and that the contact exists.
    // then we display the contact information on the form.
    private void onContactSelected(PortletEvent event) {
        int contactId = Integer
                .parseInt(event.getParameters().get("contactId")[0]);
        Optional<Contact> contact = getService().findById(contactId);
        if (contact.isPresent()) {
            // ... set active contact
            this.contact = contact.get();
            // ... update the form
        } else {
            // ... empty the form
            clear();
        }
    }

    // called when the portlet mode changes
    // FormPortlet supports two modes: 'view' and 'edit'
    private void handlePortletModeChange(PortletModeEvent event) {
        // set fields to read-only mode when portlet mode is 'view'
        binder.setReadOnly(event.isViewMode());

        // set the button's text based on the portlet mode
        if (event.isViewMode()) {
            action.setText(ACTION_EDIT);
        } else {
            action.setText(ACTION_SAVE);
        }
    }

    private void fireUpdateEvent(Contact contact) {
        Map<String, String> param = Collections
                .singletonMap("contactId", contact.getId().toString());

        portletViewContext.fireEvent("contact-updated", param);
    }

    private PortletMode getPortletMode() {
        return portletViewContext.getPortletMode();
    }

    private void init() {
        // ... create the form layout
        setupButtons();

        // ... add components to form
    }

    private ContactService getService() {
        // returns ContactService instance
    }

    private void setupButtons() {
        action = new Button("action", event -> {
            if (PortletMode.EDIT.equals(getPortletMode())) {
                save();
            } else {
                portletViewContext.setPortletMode(PortletMode.EDIT);
            }
        });

        // ... setup rest of the buttons
    }

    private void clear() {
        // ... reset contact and clear form
    }

    private void save() {
        if (contact != null) {
            // ... save contact
        } else {
            // ... create new contact
        }
        // send custom portlet event
        fireUpdateEvent(contact);

        // ... update form

        // sent portlet mode back to view
        portletViewContext.setPortletMode(PortletMode.VIEW);
    }
}
----

[classname]`ContactFormView` uses the [classname]`PortletViewContext` received via the [methodname]`onPortletViewContextInit(PortletViewContext)` method to register an event listener and portlet mode listener.
The important methods for the portlet operation are [methodname]`handlePortletMode()` and [methodname]`onContactSelected()`.
The [classname]`ContactFormView` supports two portlet modes, `view` and `edit`, which are declared in [filename]#portlet.xml#.
In the [methodname]`handlePortletMode()` method, depending on the portlet mode, we either enable or disable editing on the form fields.
We also change the name of the `action` button to correspond to the correct mode.

[methodname]`onContactSelected()` is called when the event `contact-selected` is sent by the _Contact List_ portlet.
When the event arrives, the contact id is used to display information for the selected `Contact`.
