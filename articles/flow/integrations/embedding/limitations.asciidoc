---
title: Limitations
order: 80
layout: page
---

= Embedded Application Limitations

Some Vaadin features are not available in embedded applications.

Limitations in embedded applications include:

* *Navigation and routing*: <<../../routing#,Both features>> are unavailable for embedded applications.
** There is no point annotating your classes with the<<../../routing#using-the-route-annotation, `@Route` annotation>>, because it is not possible to navigate to the route target.
** You also cannot use the <<../../routing/navigation#,router link>>, whether via the `RouterLink` class or in a custom way.
* *Theming*: You can specify only one `@Theme` annotation. See <<theming#,Theming Embedded Applications>> for more.
* *Push*: You can use only one `@Push` annotation. See <<push#,Configuring Push in Embedded Applications>> for more.
* *Progressive Web Applications*: Neither the `@PWA` annotation nor any PWA features are available in embedded applications.
* *Cross-site embedding*: Any Vaadin application is a Java Servlet-based application. Java Servlet applications use cookies to store a session ID.
Sometimes, some browsers (for example, Safari) do not allow cookies for an embedded page if it has a different domain.
In this case, embedding requires SSL tracking mode to work.
Please refer to the "Using an external Embeddable Application" section of <<index#,Overview of Embedding Applications>> for how to configure embedded applications to work in this situation.
* *CORS headers*: https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS[Cross-Origin Resource Sharing (CORS) headers] are not defined automatically.
If the Vaadin servlet providing the embeddable application is outside the servlet container that provides the page in which it is embedded, these headers need to be provided.
+
The responses from the Vaadin servlet should contain appropriate CORS headers.
You can add these by:

** configuring the servlet container (see the documentation on adding HTTP headers for responses for your specific container), or
** packaging the embeddable application with a custom [classname]`VaadinServlet`.
+
*Example*: Custom [classname]`VaadinServlet` that adds CORS headers
+

[source,java]
----
public class CustomServlet extends VaadinServlet {

    @Override
    public void service(ServletRequest req, ServletResponse res) throws ServletException, IOException {
        setAccessControlHeaders((HttpServletResponse) res);
        super.service(req, res);
    }

    private void setAccessControlHeaders(HttpServletResponse resp) {
        resp.setHeader("Access-Control-Allow-Origin", "http://localhost:80");
        resp.setHeader("Access-Control-Allow-Methods", "*");
        resp.setHeader("Access-Control-Allow-Headers", "Content-Type");
        resp.setHeader("Access-Control-Allow-Credentials", "true");
    }
}
----
+
*** This example assumes that the embedding (host) site is served from the same host mapped to port 80 (be it a servlet container or a custom Python HTTP server).
Our servlet container with our Vaadin servlet is bound to, for example, port 8080.
* Theme resources should be available on the server of the embedding page or embedded in CSS (as data URLs).
+
When embedding the application on a different server, relative CSS URLs target the embedding server and not the embedded application server.
+
Retrieve the target server address from the request as follows:

[source,java]
----
StringBuffer requestURL = ((HttpServletRequest) VaadinRequest.getCurrent()).getRequestURL();
----

You can then prepend that to the resource URL.
For example:
[source,java]
----
new Image(requestURL.toString() + "themes/app-theme/img/logo.png", "logo");
----
