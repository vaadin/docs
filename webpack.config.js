/**
 * This file has been autogenerated as it didn't exist or was made for an older incompatible version.
 * This file can be used for manual configuration will not be modified if the flowDefaults constant exists.
 */
const fs = require('fs');
const path = require('path');
const merge = require('webpack-merge');
const flowDefaults = require('./webpack.generated.js');

const fileNameOfTheFlowGeneratedMainEntryPoint = require('path').resolve(
  __dirname,
  'target/frontend/generated-flow-imports.js'
);
const filteredFileNameOfTheFlowGeneratedMainEntryPoint =
  fileNameOfTheFlowGeneratedMainEntryPoint + '-filtered.js';

// TODO: Find better solution for loading only the export bundle
// The Flow webpack config contains 3 bundles: bundle, export, gizmo
// For the docs app we only need the `export` bundle, which contains
// the WCs for the exported demos. We want to avoid loading the
// `bundle` bundle, which contains all JS sources, including Vaadin WCs,
// because the Vaadin components are provided by the DS publisher
// webpack bundle. Loading this bundle causes several issues when
// running the docs. The brute force solution here is to simply
// remove the other bundles from the config.
delete flowDefaults.entry['bundle'];
delete flowDefaults.entry['gizmo'];

// @ts-ignore
module.exports = merge(flowDefaults, {
  entry: {
    export: filteredFileNameOfTheFlowGeneratedMainEntryPoint
  },
  module: {
    rules: [
      {
        test: /(\\|\/).*example-resources\.ts$/,
        exclude: path.resolve(__dirname, 'frontend', 'example-resources.ts')
      }
    ]
  },
  externals: {
    // docs-app has its own bundle with all the Vaadin resources.
    // Polymer etc dependencies have purposefully been excluded from the
    // docs project (Vaadin) bundle. However, the embedded Flow examples
    // (like target/frontend/accordion-basic-wc.ts)
    // now import "applyTheme" which has an indirect dependency to Polymer
    // so we need to direct the applyTheme function to use the version
    // bundled with docs-app. Otherwise we'd end up with conflicting imports
    // (Vaadin/Polymer) originating from two separate bundles loaded on the same page.
    // We'll do this by declaring "generated/theme" (generated by Vaadin to embedded components)
    // as an external, which gets registered to the global namespace by docs-app bundle
    // (in frontend/demo/example-resources.ts).
    'generated/theme': '__applyTheme',
    'generated/theme.js': '__applyTheme'
  },
  plugins: [
    function(compiler) {
      compiler.hooks.afterPlugins.tap('Filter out external deps', compilation => {
        const original = fs.readFileSync(fileNameOfTheFlowGeneratedMainEntryPoint, 'utf8');

        // Exclude component imports which are included in the "bundle" module
        const filtered = original
          .split('\n')
          .filter(row => {
            if (row.startsWith("import '@vaadin")) return false;
            if (row.startsWith("import '@polymer")) return false;
            if (!row.startsWith('import')) return false;
            return true;
          })
          .join('\n');

        fs.writeFileSync(filteredFileNameOfTheFlowGeneratedMainEntryPoint, filtered);
      });
    }
  ]
});

/**
 * This file can be used to configure the flow plugin defaults.
 * <code>
 *   // Add a custom plugin
 *   flowDefaults.plugins.push(new MyPlugin());
 *
 *   // Update the rules to also transpile `.mjs` files
 *   if (!flowDefaults.module.rules[0].test) {
 *     throw "Unexpected structure in generated webpack config";
 *   }
 *   flowDefaults.module.rules[0].test = /\.m?js$/
 *
 *   // Include a custom JS in the entry point in addition to generated-flow-imports.js
 *   if (typeof flowDefaults.entry.index != "string") {
 *     throw "Unexpected structure in generated webpack config";
 *   }
 *   flowDefaults.entry.index = [flowDefaults.entry.index, "myCustomFile.js"];
 * </code>
 * or add new configuration in the merge block.
 * <code>
 *   module.exports = merge(flowDefaults, {
 *     mode: 'development',
 *     devtool: 'inline-source-map'
 *   });
 * </code>
 */
